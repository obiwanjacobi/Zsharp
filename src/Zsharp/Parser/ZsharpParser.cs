//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\marc\Documents\MyProjects\Zsharp\src\Zsharp\Zsharp.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Zsharp.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ZsharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		U8=1, U16=2, U32=3, U64=4, I8=5, I16=6, I32=7, I64=8, F32=9, F64=10, STR=11, 
		BOOL=12, BIT=13, PTR=14, OPT=15, ERR=16, IMM=17, MODULE=18, IMPORT=19, 
		EXPORT=20, LOOP=21, BREAK=22, CONTINUE=23, IF=24, ELSE=25, RETURN=26, 
		IN=27, SELF=28, TRUE=29, FALSE=30, COMMENT=31, NUMBERbin=32, NUMBERoct=33, 
		NUMBERdec=34, NUMBERdec_prefix=35, NUMBERhex=36, CHARACTER=37, STRING=38, 
		AND=39, OR=40, NOT=41, UNUSED=42, PLUS=43, MINUS_NEG=44, MULT_PTR=45, 
		DIV=46, MOD=47, POW=48, EQ_ASSIGN=49, NEQ=50, GREAT_ANGLEclose=51, SMALL_ANGLEopen=52, 
		GREQ=53, SMEQ=54, BIT_AND=55, BIT_OR=56, BIT_XOR_IMM=57, BIT_NOT=58, BIT_SHL=59, 
		BIT_SHR=60, BIT_ROLL=61, BIT_ROLR=62, CONCAT=63, SUBopen=64, SUBclose=65, 
		PARENopen=66, PARENclose=67, QUESTION=68, COLON=69, DOT=70, RANGE=71, 
		SPREAD=72, COMMA=73, META=74, COMPTIME=75, ERROR=76, STR_QUOTE=77, CHAR_QUOTE=78, 
		COMMENTstart=79, IDENTIFIERupper=80, IDENTIFIERlower=81, SP=82, TAB=83, 
		INDENT=84, EOL=85;
	public const int
		RULE_file = 0, RULE_header = 1, RULE_source = 2, RULE_codeblock = 3, RULE_module_statement = 4, 
		RULE_module_name = 5, RULE_statement_module = 6, RULE_statement_import = 7, 
		RULE_statement_export = 8, RULE_flow_statement = 9, RULE_statement_return = 10, 
		RULE_statement_if = 11, RULE_statement_else = 12, RULE_statement_elseif = 13, 
		RULE_statement_break = 14, RULE_statement_continue = 15, RULE_statement_loop = 16, 
		RULE_statement_loop_infinite = 17, RULE_statement_loop_while = 18, RULE_definition_top = 19, 
		RULE_definition = 20, RULE_expression_value = 21, RULE_comptime_expression_value = 22, 
		RULE_expression_arithmetic = 23, RULE_arithmetic_operand = 24, RULE_expression_logic = 25, 
		RULE_logic_operand = 26, RULE_expression_comparison = 27, RULE_comparison_operand = 28, 
		RULE_expression_bool = 29, RULE_function_def = 30, RULE_function_def_export = 31, 
		RULE_function_parameter_list = 32, RULE_function_parameter = 33, RULE_function_parameter_self = 34, 
		RULE_function_return_type = 35, RULE_function_call = 36, RULE_function_parameter_uselist = 37, 
		RULE_function_param_use = 38, RULE_variable_def_top = 39, RULE_variable_def = 40, 
		RULE_variable_def_typed = 41, RULE_variable_def_typed_init = 42, RULE_variable_assign_auto = 43, 
		RULE_variable_assign = 44, RULE_variable_ref = 45, RULE_struct_def = 46, 
		RULE_struct_field_def_list = 47, RULE_struct_field_def = 48, RULE_enum_def = 49, 
		RULE_enum_option_def_listline = 50, RULE_enum_option_def_list = 51, RULE_enum_option_def = 52, 
		RULE_enum_option_value = 53, RULE_enum_base_type = 54, RULE_type_def = 55, 
		RULE_type_alias = 56, RULE_type_ref_use = 57, RULE_type_ref = 58, RULE_type_name = 59, 
		RULE_known_types = 60, RULE_type_Bit = 61, RULE_type_Ptr = 62, RULE_type_Opt = 63, 
		RULE_type_Err = 64, RULE_type_Imm = 65, RULE_template_param_list_use = 66, 
		RULE_template_param_use = 67, RULE_template_param_list_use_number = 68, 
		RULE_template_param_list_use_type = 69, RULE_template_param_list = 70, 
		RULE_template_param_var = 71, RULE_template_param_any = 72, RULE_identifier_type = 73, 
		RULE_identifier_var = 74, RULE_identifier_param = 75, RULE_identifier_func = 76, 
		RULE_identifier_field = 77, RULE_identifier_enumoption = 78, RULE_identifier_module = 79, 
		RULE_identifier_unused = 80, RULE_literal_bool = 81, RULE_literal = 82, 
		RULE_number = 83, RULE_operator_arithmetic = 84, RULE_operator_arithmetic_unary = 85, 
		RULE_operator_logic = 86, RULE_operator_logic_unary = 87, RULE_operator_comparison = 88, 
		RULE_operator_bits = 89, RULE_operator_bits_unary = 90, RULE_operator_assignment = 91, 
		RULE_empty_line = 92, RULE_newline = 93, RULE_comment = 94, RULE_string = 95, 
		RULE_indent = 96;
	public static readonly string[] ruleNames = {
		"file", "header", "source", "codeblock", "module_statement", "module_name", 
		"statement_module", "statement_import", "statement_export", "flow_statement", 
		"statement_return", "statement_if", "statement_else", "statement_elseif", 
		"statement_break", "statement_continue", "statement_loop", "statement_loop_infinite", 
		"statement_loop_while", "definition_top", "definition", "expression_value", 
		"comptime_expression_value", "expression_arithmetic", "arithmetic_operand", 
		"expression_logic", "logic_operand", "expression_comparison", "comparison_operand", 
		"expression_bool", "function_def", "function_def_export", "function_parameter_list", 
		"function_parameter", "function_parameter_self", "function_return_type", 
		"function_call", "function_parameter_uselist", "function_param_use", "variable_def_top", 
		"variable_def", "variable_def_typed", "variable_def_typed_init", "variable_assign_auto", 
		"variable_assign", "variable_ref", "struct_def", "struct_field_def_list", 
		"struct_field_def", "enum_def", "enum_option_def_listline", "enum_option_def_list", 
		"enum_option_def", "enum_option_value", "enum_base_type", "type_def", 
		"type_alias", "type_ref_use", "type_ref", "type_name", "known_types", 
		"type_Bit", "type_Ptr", "type_Opt", "type_Err", "type_Imm", "template_param_list_use", 
		"template_param_use", "template_param_list_use_number", "template_param_list_use_type", 
		"template_param_list", "template_param_var", "template_param_any", "identifier_type", 
		"identifier_var", "identifier_param", "identifier_func", "identifier_field", 
		"identifier_enumoption", "identifier_module", "identifier_unused", "literal_bool", 
		"literal", "number", "operator_arithmetic", "operator_arithmetic_unary", 
		"operator_logic", "operator_logic_unary", "operator_comparison", "operator_bits", 
		"operator_bits_unary", "operator_assignment", "empty_line", "newline", 
		"comment", "string", "indent"
	};

	private static readonly string[] _LiteralNames = {
		null, "'U8'", "'U16'", "'U32'", "'U64'", "'I8'", "'I16'", "'I32'", "'I64'", 
		"'F32'", "'F64'", "'Str'", "'Bool'", "'Bit'", "'Ptr'", "'Opt'", "'Err'", 
		"'Imm'", "'module'", "'import'", "'export'", "'loop'", "'break'", "'continue'", 
		"'if'", "'else'", "'return'", "'in'", "'self'", "'true'", "'false'", null, 
		null, null, null, null, null, null, null, "'and'", "'or'", "'not'", "'_'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'**'", "'='", "'<>'", "'>'", "'<'", 
		"'>='", "'<='", "'&'", "'|'", "'^'", "'~'", "'<<'", "'>>'", "'|,'", "'>|'", 
		"'&&'", "'['", "']'", "'('", "')'", "'?'", "':'", "'.'", "'..'", "'...'", 
		"','", "'#'", "'#!'", "'!'", "'\"'", "'''", "'//'", null, null, "' '", 
		"'\t'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "U8", "U16", "U32", "U64", "I8", "I16", "I32", "I64", "F32", "F64", 
		"STR", "BOOL", "BIT", "PTR", "OPT", "ERR", "IMM", "MODULE", "IMPORT", 
		"EXPORT", "LOOP", "BREAK", "CONTINUE", "IF", "ELSE", "RETURN", "IN", "SELF", 
		"TRUE", "FALSE", "COMMENT", "NUMBERbin", "NUMBERoct", "NUMBERdec", "NUMBERdec_prefix", 
		"NUMBERhex", "CHARACTER", "STRING", "AND", "OR", "NOT", "UNUSED", "PLUS", 
		"MINUS_NEG", "MULT_PTR", "DIV", "MOD", "POW", "EQ_ASSIGN", "NEQ", "GREAT_ANGLEclose", 
		"SMALL_ANGLEopen", "GREQ", "SMEQ", "BIT_AND", "BIT_OR", "BIT_XOR_IMM", 
		"BIT_NOT", "BIT_SHL", "BIT_SHR", "BIT_ROLL", "BIT_ROLR", "CONCAT", "SUBopen", 
		"SUBclose", "PARENopen", "PARENclose", "QUESTION", "COLON", "DOT", "RANGE", 
		"SPREAD", "COMMA", "META", "COMPTIME", "ERROR", "STR_QUOTE", "CHAR_QUOTE", 
		"COMMENTstart", "IDENTIFIERupper", "IDENTIFIERlower", "SP", "TAB", "INDENT", 
		"EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Zsharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ZsharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ZsharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ZsharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(ZsharpParser.Eof, 0); }
		public HeaderContext[] header() {
			return GetRuleContexts<HeaderContext>();
		}
		public HeaderContext header(int i) {
			return GetRuleContext<HeaderContext>(i);
		}
		public SourceContext[] source() {
			return GetRuleContexts<SourceContext>();
		}
		public SourceContext source(int i) {
			return GetRuleContext<SourceContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 194; header();
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXPORT || _la==COMMENT || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (IDENTIFIERupper - 80)) | (1L << (IDENTIFIERlower - 80)) | (1L << (INDENT - 80)) | (1L << (EOL - 80)))) != 0)) {
				{
				{
				State = 200; source();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 206; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public Module_statementContext module_statement() {
			return GetRuleContext<Module_statementContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Empty_lineContext empty_line() {
			return GetRuleContext<Empty_lineContext>(0);
		}
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 2, RULE_header);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208; module_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209; comment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 210; empty_line();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : ParserRuleContext {
		public Definition_topContext definition_top() {
			return GetRuleContext<Definition_topContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Empty_lineContext empty_line() {
			return GetRuleContext<Empty_lineContext>(0);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(Context, State);
		EnterRule(_localctx, 4, RULE_source);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; definition_top();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; comment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 215; empty_line();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockContext : ParserRuleContext {
		public Flow_statementContext[] flow_statement() {
			return GetRuleContexts<Flow_statementContext>();
		}
		public Flow_statementContext flow_statement(int i) {
			return GetRuleContext<Flow_statementContext>(i);
		}
		public Variable_assignContext[] variable_assign() {
			return GetRuleContexts<Variable_assignContext>();
		}
		public Variable_assignContext variable_assign(int i) {
			return GetRuleContext<Variable_assignContext>(i);
		}
		public Function_callContext[] function_call() {
			return GetRuleContexts<Function_callContext>();
		}
		public Function_callContext function_call(int i) {
			return GetRuleContext<Function_callContext>(i);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public Empty_lineContext[] empty_line() {
			return GetRuleContexts<Empty_lineContext>();
		}
		public Empty_lineContext empty_line(int i) {
			return GetRuleContext<Empty_lineContext>(i);
		}
		public CodeblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockContext codeblock() {
		CodeblockContext _localctx = new CodeblockContext(Context, State);
		EnterRule(_localctx, 6, RULE_codeblock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 224;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 218; flow_statement();
						}
						break;
					case 2:
						{
						State = 219; variable_assign();
						}
						break;
					case 3:
						{
						State = 220; function_call();
						}
						break;
					case 4:
						{
						State = 221; definition();
						}
						break;
					case 5:
						{
						State = 222; comment();
						}
						break;
					case 6:
						{
						State = 223; empty_line();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_statementContext : ParserRuleContext {
		public Statement_moduleContext statement_module() {
			return GetRuleContext<Statement_moduleContext>(0);
		}
		public Statement_importContext statement_import() {
			return GetRuleContext<Statement_importContext>(0);
		}
		public Statement_exportContext statement_export() {
			return GetRuleContext<Statement_exportContext>(0);
		}
		public Module_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_statementContext module_statement() {
		Module_statementContext _localctx = new Module_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_module_statement);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; statement_module();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; statement_import();
				}
				break;
			case EXPORT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 230; statement_export();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public Identifier_moduleContext identifier_module() {
			return GetRuleContext<Identifier_moduleContext>(0);
		}
		public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(ZsharpParser.DOT, 0); }
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		return module_name(0);
	}

	private Module_nameContext module_name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Module_nameContext _localctx = new Module_nameContext(Context, _parentState);
		Module_nameContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_module_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 234; identifier_module();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 241;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Module_nameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_module_name);
					State = 236;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 237; Match(DOT);
					State = 238; identifier_module();
					}
					} 
				}
				State = 243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Statement_moduleContext : ParserRuleContext {
		public ITerminalNode MODULE() { return GetToken(ZsharpParser.MODULE, 0); }
		public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Statement_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_module; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_module(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_moduleContext statement_module() {
		Statement_moduleContext _localctx = new Statement_moduleContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(MODULE);
			State = 245; Match(SP);
			State = 246; module_name(0);
			State = 247; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_importContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(ZsharpParser.IMPORT, 0); }
		public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Statement_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_import; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_importContext statement_import() {
		Statement_importContext _localctx = new Statement_importContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement_import);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(IMPORT);
			State = 250; Match(SP);
			State = 251; module_name(0);
			State = 252; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_exportContext : ParserRuleContext {
		public ITerminalNode EXPORT() { return GetToken(ZsharpParser.EXPORT, 0); }
		public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Identifier_funcContext identifier_func() {
			return GetRuleContext<Identifier_funcContext>(0);
		}
		public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		public Statement_exportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_export; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_export(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_exportContext statement_export() {
		Statement_exportContext _localctx = new Statement_exportContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement_export);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(EXPORT);
			State = 255; Match(SP);
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 256; identifier_func();
				}
				break;
			case 2:
				{
				State = 257; identifier_type();
				}
				break;
			}
			State = 260; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flow_statementContext : ParserRuleContext {
		public Statement_ifContext statement_if() {
			return GetRuleContext<Statement_ifContext>(0);
		}
		public Statement_elseContext statement_else() {
			return GetRuleContext<Statement_elseContext>(0);
		}
		public Statement_elseifContext statement_elseif() {
			return GetRuleContext<Statement_elseifContext>(0);
		}
		public Statement_loopContext statement_loop() {
			return GetRuleContext<Statement_loopContext>(0);
		}
		public Statement_returnContext statement_return() {
			return GetRuleContext<Statement_returnContext>(0);
		}
		public Statement_breakContext statement_break() {
			return GetRuleContext<Statement_breakContext>(0);
		}
		public Statement_continueContext statement_continue() {
			return GetRuleContext<Statement_continueContext>(0);
		}
		public Flow_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flow_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlow_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flow_statementContext flow_statement() {
		Flow_statementContext _localctx = new Flow_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_flow_statement);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 262; statement_if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263; statement_else();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 264; statement_elseif();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 265; statement_loop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 266; statement_return();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 267; statement_break();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 268; statement_continue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_returnContext : ParserRuleContext {
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(ZsharpParser.RETURN, 0); }
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		public Expression_valueContext expression_value() {
			return GetRuleContext<Expression_valueContext>(0);
		}
		public Statement_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_return; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_returnContext statement_return() {
		Statement_returnContext _localctx = new Statement_returnContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; indent();
			State = 272; Match(RETURN);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 273; Match(SP);
				State = 274; expression_value();
				}
			}

			State = 277; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_ifContext : ParserRuleContext {
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public ITerminalNode IF() { return GetToken(ZsharpParser.IF, 0); }
		public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		public Expression_logicContext expression_logic() {
			return GetRuleContext<Expression_logicContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public Statement_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_if; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_ifContext statement_if() {
		Statement_ifContext _localctx = new Statement_ifContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; indent();
			State = 280; Match(IF);
			State = 281; Match(SP);
			State = 282; expression_logic(0);
			State = 283; newline();
			State = 284; codeblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_elseContext : ParserRuleContext {
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(ZsharpParser.ELSE, 0); }
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public Statement_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_else; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_elseContext statement_else() {
		Statement_elseContext _localctx = new Statement_elseContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; indent();
			State = 287; Match(ELSE);
			State = 288; newline();
			State = 289; codeblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_elseifContext : ParserRuleContext {
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(ZsharpParser.ELSE, 0); }
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public ITerminalNode IF() { return GetToken(ZsharpParser.IF, 0); }
		public Expression_logicContext expression_logic() {
			return GetRuleContext<Expression_logicContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public Statement_elseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_elseif; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_elseif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_elseifContext statement_elseif() {
		Statement_elseifContext _localctx = new Statement_elseifContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement_elseif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; indent();
			State = 292; Match(ELSE);
			State = 293; Match(SP);
			State = 294; Match(IF);
			State = 295; Match(SP);
			State = 296; expression_logic(0);
			State = 297; newline();
			State = 298; codeblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_breakContext : ParserRuleContext {
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(ZsharpParser.BREAK, 0); }
		public Statement_breakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_break; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_break(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_breakContext statement_break() {
		Statement_breakContext _localctx = new Statement_breakContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement_break);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; indent();
			State = 301; Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_continueContext : ParserRuleContext {
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public ITerminalNode CONTINUE() { return GetToken(ZsharpParser.CONTINUE, 0); }
		public Statement_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_continue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_continue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_continueContext statement_continue() {
		Statement_continueContext _localctx = new Statement_continueContext(Context, State);
		EnterRule(_localctx, 30, RULE_statement_continue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; indent();
			State = 304; Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_loopContext : ParserRuleContext {
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public Statement_loop_infiniteContext statement_loop_infinite() {
			return GetRuleContext<Statement_loop_infiniteContext>(0);
		}
		public Statement_loop_whileContext statement_loop_while() {
			return GetRuleContext<Statement_loop_whileContext>(0);
		}
		public Statement_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_loop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_loopContext statement_loop() {
		Statement_loopContext _localctx = new Statement_loopContext(Context, State);
		EnterRule(_localctx, 32, RULE_statement_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; indent();
			State = 309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 307; statement_loop_infinite();
				}
				break;
			case 2:
				{
				State = 308; statement_loop_while();
				}
				break;
			}
			State = 311; newline();
			State = 312; codeblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_loop_infiniteContext : ParserRuleContext {
		public ITerminalNode LOOP() { return GetToken(ZsharpParser.LOOP, 0); }
		public Statement_loop_infiniteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_loop_infinite; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_loop_infinite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_loop_infiniteContext statement_loop_infinite() {
		Statement_loop_infiniteContext _localctx = new Statement_loop_infiniteContext(Context, State);
		EnterRule(_localctx, 34, RULE_statement_loop_infinite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(LOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_loop_whileContext : ParserRuleContext {
		public ITerminalNode LOOP() { return GetToken(ZsharpParser.LOOP, 0); }
		public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		public Expression_logicContext expression_logic() {
			return GetRuleContext<Expression_logicContext>(0);
		}
		public Statement_loop_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_loop_while; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_loop_while(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_loop_whileContext statement_loop_while() {
		Statement_loop_whileContext _localctx = new Statement_loop_whileContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement_loop_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(LOOP);
			State = 317; Match(SP);
			State = 318; expression_logic(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definition_topContext : ParserRuleContext {
		public Function_def_exportContext function_def_export() {
			return GetRuleContext<Function_def_exportContext>(0);
		}
		public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		public Enum_defContext enum_def() {
			return GetRuleContext<Enum_defContext>(0);
		}
		public Struct_defContext struct_def() {
			return GetRuleContext<Struct_defContext>(0);
		}
		public Type_defContext type_def() {
			return GetRuleContext<Type_defContext>(0);
		}
		public Type_aliasContext type_alias() {
			return GetRuleContext<Type_aliasContext>(0);
		}
		public Variable_def_topContext variable_def_top() {
			return GetRuleContext<Variable_def_topContext>(0);
		}
		public Definition_topContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition_top; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition_top(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Definition_topContext definition_top() {
		Definition_topContext _localctx = new Definition_topContext(Context, State);
		EnterRule(_localctx, 38, RULE_definition_top);
		try {
			State = 327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320; function_def_export();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321; function_def();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 322; enum_def();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 323; struct_def();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 324; type_def();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 325; type_alias();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 326; variable_def_top();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		public Variable_defContext variable_def() {
			return GetRuleContext<Variable_defContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 40, RULE_definition);
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIERupper:
			case IDENTIFIERlower:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329; function_def();
				}
				break;
			case INDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330; variable_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_valueContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Expression_boolContext expression_bool() {
			return GetRuleContext<Expression_boolContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Expression_arithmeticContext expression_arithmetic() {
			return GetRuleContext<Expression_arithmeticContext>(0);
		}
		public Expression_logicContext expression_logic() {
			return GetRuleContext<Expression_logicContext>(0);
		}
		public Expression_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_valueContext expression_value() {
		Expression_valueContext _localctx = new Expression_valueContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression_value);
		try {
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333; number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334; @string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 335; expression_bool();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 336; function_call();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 337; expression_arithmetic(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 338; expression_logic(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comptime_expression_valueContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Expression_boolContext expression_bool() {
			return GetRuleContext<Expression_boolContext>(0);
		}
		public Comptime_expression_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comptime_expression_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComptime_expression_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comptime_expression_valueContext comptime_expression_value() {
		Comptime_expression_valueContext _localctx = new Comptime_expression_valueContext(Context, State);
		EnterRule(_localctx, 44, RULE_comptime_expression_value);
		try {
			State = 344;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBERbin:
			case NUMBERoct:
			case NUMBERdec:
			case NUMBERdec_prefix:
			case NUMBERhex:
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 341; number();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 342; @string();
				}
				break;
			case TRUE:
			case FALSE:
			case IDENTIFIERupper:
			case IDENTIFIERlower:
			case INDENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 343; expression_bool();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_arithmeticContext : ParserRuleContext {
		public ITerminalNode PARENopen() { return GetToken(ZsharpParser.PARENopen, 0); }
		public Expression_arithmeticContext[] expression_arithmetic() {
			return GetRuleContexts<Expression_arithmeticContext>();
		}
		public Expression_arithmeticContext expression_arithmetic(int i) {
			return GetRuleContext<Expression_arithmeticContext>(i);
		}
		public ITerminalNode PARENclose() { return GetToken(ZsharpParser.PARENclose, 0); }
		public Operator_arithmetic_unaryContext operator_arithmetic_unary() {
			return GetRuleContext<Operator_arithmetic_unaryContext>(0);
		}
		public Operator_bits_unaryContext operator_bits_unary() {
			return GetRuleContext<Operator_bits_unaryContext>(0);
		}
		public Arithmetic_operandContext arithmetic_operand() {
			return GetRuleContext<Arithmetic_operandContext>(0);
		}
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Operator_arithmeticContext operator_arithmetic() {
			return GetRuleContext<Operator_arithmeticContext>(0);
		}
		public Operator_bitsContext operator_bits() {
			return GetRuleContext<Operator_bitsContext>(0);
		}
		public Expression_arithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_arithmetic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_arithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_arithmeticContext expression_arithmetic() {
		return expression_arithmetic(0);
	}

	private Expression_arithmeticContext expression_arithmetic(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_arithmeticContext _localctx = new Expression_arithmeticContext(Context, _parentState);
		Expression_arithmeticContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_expression_arithmetic, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARENopen:
				{
				State = 347; Match(PARENopen);
				State = 348; expression_arithmetic(0);
				State = 349; Match(PARENclose);
				}
				break;
			case MINUS_NEG:
				{
				State = 351; operator_arithmetic_unary();
				State = 352; expression_arithmetic(3);
				}
				break;
			case BIT_NOT:
				{
				State = 354; operator_bits_unary();
				State = 355; expression_arithmetic(2);
				}
				break;
			case NUMBERbin:
			case NUMBERoct:
			case NUMBERdec:
			case NUMBERdec_prefix:
			case NUMBERhex:
			case CHARACTER:
			case IDENTIFIERupper:
			case IDENTIFIERlower:
			case INDENT:
				{
				State = 357; arithmetic_operand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 374;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 372;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new Expression_arithmeticContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression_arithmetic);
						State = 360;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 361; Match(SP);
						State = 362; operator_arithmetic();
						State = 363; Match(SP);
						State = 364; expression_arithmetic(7);
						}
						break;
					case 2:
						{
						_localctx = new Expression_arithmeticContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression_arithmetic);
						State = 366;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 367; Match(SP);
						State = 368; operator_bits();
						State = 369; Match(SP);
						State = 370; expression_arithmetic(6);
						}
						break;
					}
					} 
				}
				State = 376;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Arithmetic_operandContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public Variable_refContext variable_ref() {
			return GetRuleContext<Variable_refContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Arithmetic_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_operand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic_operand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_operandContext arithmetic_operand() {
		Arithmetic_operandContext _localctx = new Arithmetic_operandContext(Context, State);
		EnterRule(_localctx, 48, RULE_arithmetic_operand);
		try {
			State = 380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 377; number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378; variable_ref();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 379; function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_logicContext : ParserRuleContext {
		public ITerminalNode PARENopen() { return GetToken(ZsharpParser.PARENopen, 0); }
		public Expression_logicContext[] expression_logic() {
			return GetRuleContexts<Expression_logicContext>();
		}
		public Expression_logicContext expression_logic(int i) {
			return GetRuleContext<Expression_logicContext>(i);
		}
		public ITerminalNode PARENclose() { return GetToken(ZsharpParser.PARENclose, 0); }
		public Operator_logic_unaryContext operator_logic_unary() {
			return GetRuleContext<Operator_logic_unaryContext>(0);
		}
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Logic_operandContext logic_operand() {
			return GetRuleContext<Logic_operandContext>(0);
		}
		public Operator_logicContext operator_logic() {
			return GetRuleContext<Operator_logicContext>(0);
		}
		public Expression_logicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_logic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_logic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_logicContext expression_logic() {
		return expression_logic(0);
	}

	private Expression_logicContext expression_logic(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_logicContext _localctx = new Expression_logicContext(Context, _parentState);
		Expression_logicContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_expression_logic, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 383; Match(PARENopen);
				State = 384; expression_logic(0);
				State = 385; Match(PARENclose);
				}
				break;
			case 2:
				{
				State = 387; operator_logic_unary();
				State = 388; Match(SP);
				State = 389; expression_logic(2);
				}
				break;
			case 3:
				{
				State = 391; logic_operand();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 402;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_logicContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_logic);
					State = 394;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 395; Match(SP);
					State = 396; operator_logic();
					State = 397; Match(SP);
					State = 398; expression_logic(5);
					}
					} 
				}
				State = 404;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logic_operandContext : ParserRuleContext {
		public Expression_boolContext expression_bool() {
			return GetRuleContext<Expression_boolContext>(0);
		}
		public Expression_comparisonContext expression_comparison() {
			return GetRuleContext<Expression_comparisonContext>(0);
		}
		public Logic_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic_operand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic_operand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logic_operandContext logic_operand() {
		Logic_operandContext _localctx = new Logic_operandContext(Context, State);
		EnterRule(_localctx, 52, RULE_logic_operand);
		try {
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; expression_bool();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; expression_comparison(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_comparisonContext : ParserRuleContext {
		public ITerminalNode PARENopen() { return GetToken(ZsharpParser.PARENopen, 0); }
		public Expression_comparisonContext[] expression_comparison() {
			return GetRuleContexts<Expression_comparisonContext>();
		}
		public Expression_comparisonContext expression_comparison(int i) {
			return GetRuleContext<Expression_comparisonContext>(i);
		}
		public ITerminalNode PARENclose() { return GetToken(ZsharpParser.PARENclose, 0); }
		public Comparison_operandContext comparison_operand() {
			return GetRuleContext<Comparison_operandContext>(0);
		}
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Operator_comparisonContext operator_comparison() {
			return GetRuleContext<Operator_comparisonContext>(0);
		}
		public Expression_comparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_comparison; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_comparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_comparisonContext expression_comparison() {
		return expression_comparison(0);
	}

	private Expression_comparisonContext expression_comparison(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_comparisonContext _localctx = new Expression_comparisonContext(Context, _parentState);
		Expression_comparisonContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_expression_comparison, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 410; Match(PARENopen);
				State = 411; expression_comparison(0);
				State = 412; Match(PARENclose);
				}
				break;
			case 2:
				{
				State = 414; comparison_operand();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 425;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_comparisonContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_comparison);
					State = 417;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 418; Match(SP);
					State = 419; operator_comparison();
					State = 420; Match(SP);
					State = 421; expression_comparison(4);
					}
					} 
				}
				State = 427;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_operandContext : ParserRuleContext {
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Variable_refContext variable_ref() {
			return GetRuleContext<Variable_refContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Expression_arithmeticContext expression_arithmetic() {
			return GetRuleContext<Expression_arithmeticContext>(0);
		}
		public Comparison_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operandContext comparison_operand() {
		Comparison_operandContext _localctx = new Comparison_operandContext(Context, State);
		EnterRule(_localctx, 56, RULE_comparison_operand);
		try {
			State = 432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428; function_call();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429; variable_ref();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 430; literal();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 431; expression_arithmetic(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_boolContext : ParserRuleContext {
		public Literal_boolContext literal_bool() {
			return GetRuleContext<Literal_boolContext>(0);
		}
		public Variable_refContext variable_ref() {
			return GetRuleContext<Variable_refContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Expression_boolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_bool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_boolContext expression_bool() {
		Expression_boolContext _localctx = new Expression_boolContext(Context, State);
		EnterRule(_localctx, 58, RULE_expression_bool);
		try {
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434; literal_bool();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435; variable_ref();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 436; function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_defContext : ParserRuleContext {
		public Identifier_funcContext identifier_func() {
			return GetRuleContext<Identifier_funcContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(ZsharpParser.COLON, 0); }
		public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		public ITerminalNode PARENopen() { return GetToken(ZsharpParser.PARENopen, 0); }
		public ITerminalNode PARENclose() { return GetToken(ZsharpParser.PARENclose, 0); }
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public Function_parameter_listContext function_parameter_list() {
			return GetRuleContext<Function_parameter_listContext>(0);
		}
		public Function_return_typeContext function_return_type() {
			return GetRuleContext<Function_return_typeContext>(0);
		}
		public Function_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_defContext function_def() {
		Function_defContext _localctx = new Function_defContext(Context, State);
		EnterRule(_localctx, 60, RULE_function_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; identifier_func();
			State = 440; Match(COLON);
			State = 441; Match(SP);
			State = 442; Match(PARENopen);
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SELF || _la==IDENTIFIERlower) {
				{
				State = 443; function_parameter_list();
				}
			}

			State = 446; Match(PARENclose);
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 447; function_return_type();
				}
			}

			State = 450; newline();
			State = 451; codeblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_def_exportContext : ParserRuleContext {
		public ITerminalNode EXPORT() { return GetToken(ZsharpParser.EXPORT, 0); }
		public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		public Function_def_exportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def_export; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def_export(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_def_exportContext function_def_export() {
		Function_def_exportContext _localctx = new Function_def_exportContext(Context, State);
		EnterRule(_localctx, 62, RULE_function_def_export);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453; Match(EXPORT);
			State = 454; Match(SP);
			State = 455; function_def();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameter_listContext : ParserRuleContext {
		public Function_parameterContext[] function_parameter() {
			return GetRuleContexts<Function_parameterContext>();
		}
		public Function_parameterContext function_parameter(int i) {
			return GetRuleContext<Function_parameterContext>(i);
		}
		public Function_parameter_selfContext function_parameter_self() {
			return GetRuleContext<Function_parameter_selfContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ZsharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ZsharpParser.COMMA, i);
		}
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameter_listContext function_parameter_list() {
		Function_parameter_listContext _localctx = new Function_parameter_listContext(Context, State);
		EnterRule(_localctx, 64, RULE_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIERlower:
				{
				State = 457; function_parameter();
				}
				break;
			case SELF:
				{
				State = 458; function_parameter_self();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 461; Match(COMMA);
				State = 462; Match(SP);
				State = 463; function_parameter();
				}
				}
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameterContext : ParserRuleContext {
		public Identifier_paramContext identifier_param() {
			return GetRuleContext<Identifier_paramContext>(0);
		}
		public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameterContext function_parameter() {
		Function_parameterContext _localctx = new Function_parameterContext(Context, State);
		EnterRule(_localctx, 66, RULE_function_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; identifier_param();
			State = 470; type_ref_use();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameter_selfContext : ParserRuleContext {
		public ITerminalNode SELF() { return GetToken(ZsharpParser.SELF, 0); }
		public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Function_parameter_selfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter_self; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter_self(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameter_selfContext function_parameter_self() {
		Function_parameter_selfContext _localctx = new Function_parameter_selfContext(Context, State);
		EnterRule(_localctx, 68, RULE_function_parameter_self);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472; Match(SELF);
			State = 473; type_ref_use();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_return_typeContext : ParserRuleContext {
		public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Function_return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_return_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_return_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_return_typeContext function_return_type() {
		Function_return_typeContext _localctx = new Function_return_typeContext(Context, State);
		EnterRule(_localctx, 70, RULE_function_return_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475; type_ref_use();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Identifier_funcContext identifier_func() {
			return GetRuleContext<Identifier_funcContext>(0);
		}
		public ITerminalNode PARENopen() { return GetToken(ZsharpParser.PARENopen, 0); }
		public ITerminalNode PARENclose() { return GetToken(ZsharpParser.PARENclose, 0); }
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public Function_parameter_uselistContext function_parameter_uselist() {
			return GetRuleContext<Function_parameter_uselistContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 72, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 477; indent();
				}
			}

			State = 480; identifier_func();
			State = 481; Match(PARENopen);
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (TRUE - 29)) | (1L << (FALSE - 29)) | (1L << (NUMBERbin - 29)) | (1L << (NUMBERoct - 29)) | (1L << (NUMBERdec - 29)) | (1L << (NUMBERdec_prefix - 29)) | (1L << (NUMBERhex - 29)) | (1L << (CHARACTER - 29)) | (1L << (STRING - 29)) | (1L << (NOT - 29)) | (1L << (MINUS_NEG - 29)) | (1L << (BIT_NOT - 29)) | (1L << (PARENopen - 29)) | (1L << (IDENTIFIERupper - 29)) | (1L << (IDENTIFIERlower - 29)) | (1L << (INDENT - 29)))) != 0)) {
				{
				State = 482; function_parameter_uselist();
				}
			}

			State = 485; Match(PARENclose);
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 486; newline();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameter_uselistContext : ParserRuleContext {
		public Function_param_useContext[] function_param_use() {
			return GetRuleContexts<Function_param_useContext>();
		}
		public Function_param_useContext function_param_use(int i) {
			return GetRuleContext<Function_param_useContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ZsharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ZsharpParser.COMMA, i);
		}
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Function_parameter_uselistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter_uselist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter_uselist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameter_uselistContext function_parameter_uselist() {
		Function_parameter_uselistContext _localctx = new Function_parameter_uselistContext(Context, State);
		EnterRule(_localctx, 74, RULE_function_parameter_uselist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489; function_param_use();
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 490; Match(COMMA);
				State = 491; Match(SP);
				State = 492; function_param_use();
				}
				}
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_param_useContext : ParserRuleContext {
		public Expression_valueContext expression_value() {
			return GetRuleContext<Expression_valueContext>(0);
		}
		public Function_param_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_param_use; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_param_use(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_param_useContext function_param_use() {
		Function_param_useContext _localctx = new Function_param_useContext(Context, State);
		EnterRule(_localctx, 76, RULE_function_param_use);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498; expression_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_def_topContext : ParserRuleContext {
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Variable_def_typedContext variable_def_typed() {
			return GetRuleContext<Variable_def_typedContext>(0);
		}
		public Variable_def_typed_initContext variable_def_typed_init() {
			return GetRuleContext<Variable_def_typed_initContext>(0);
		}
		public Variable_assign_autoContext variable_assign_auto() {
			return GetRuleContext<Variable_assign_autoContext>(0);
		}
		public Variable_def_topContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_def_top; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_def_top(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_def_topContext variable_def_top() {
		Variable_def_topContext _localctx = new Variable_def_topContext(Context, State);
		EnterRule(_localctx, 78, RULE_variable_def_top);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 500; variable_def_typed();
				}
				break;
			case 2:
				{
				State = 501; variable_def_typed_init();
				}
				break;
			case 3:
				{
				State = 502; variable_assign_auto();
				}
				break;
			}
			State = 505; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_defContext : ParserRuleContext {
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Variable_def_typedContext variable_def_typed() {
			return GetRuleContext<Variable_def_typedContext>(0);
		}
		public Variable_def_typed_initContext variable_def_typed_init() {
			return GetRuleContext<Variable_def_typed_initContext>(0);
		}
		public Variable_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_defContext variable_def() {
		Variable_defContext _localctx = new Variable_defContext(Context, State);
		EnterRule(_localctx, 80, RULE_variable_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; indent();
			State = 510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 508; variable_def_typed();
				}
				break;
			case 2:
				{
				State = 509; variable_def_typed_init();
				}
				break;
			}
			State = 512; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_def_typedContext : ParserRuleContext {
		public Identifier_varContext identifier_var() {
			return GetRuleContext<Identifier_varContext>(0);
		}
		public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Variable_def_typedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_def_typed; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_def_typed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_def_typedContext variable_def_typed() {
		Variable_def_typedContext _localctx = new Variable_def_typedContext(Context, State);
		EnterRule(_localctx, 82, RULE_variable_def_typed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514; identifier_var();
			State = 515; type_ref_use();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_def_typed_initContext : ParserRuleContext {
		public Identifier_varContext identifier_var() {
			return GetRuleContext<Identifier_varContext>(0);
		}
		public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		public Expression_valueContext expression_value() {
			return GetRuleContext<Expression_valueContext>(0);
		}
		public Variable_def_typed_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_def_typed_init; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_def_typed_init(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_def_typed_initContext variable_def_typed_init() {
		Variable_def_typed_initContext _localctx = new Variable_def_typed_initContext(Context, State);
		EnterRule(_localctx, 84, RULE_variable_def_typed_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517; identifier_var();
			State = 518; type_ref_use();
			State = 519; Match(SP);
			State = 520; Match(EQ_ASSIGN);
			State = 521; Match(SP);
			State = 522; expression_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_assign_autoContext : ParserRuleContext {
		public Identifier_varContext identifier_var() {
			return GetRuleContext<Identifier_varContext>(0);
		}
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		public Expression_valueContext expression_value() {
			return GetRuleContext<Expression_valueContext>(0);
		}
		public Variable_assign_autoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_assign_auto; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_assign_auto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_assign_autoContext variable_assign_auto() {
		Variable_assign_autoContext _localctx = new Variable_assign_autoContext(Context, State);
		EnterRule(_localctx, 86, RULE_variable_assign_auto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524; identifier_var();
			State = 525; Match(SP);
			State = 526; Match(EQ_ASSIGN);
			State = 527; Match(SP);
			State = 528; expression_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_assignContext : ParserRuleContext {
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public Variable_assign_autoContext variable_assign_auto() {
			return GetRuleContext<Variable_assign_autoContext>(0);
		}
		public Variable_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_assign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_assignContext variable_assign() {
		Variable_assignContext _localctx = new Variable_assignContext(Context, State);
		EnterRule(_localctx, 88, RULE_variable_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530; indent();
			State = 531; variable_assign_auto();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_refContext : ParserRuleContext {
		public Identifier_varContext identifier_var() {
			return GetRuleContext<Identifier_varContext>(0);
		}
		public Variable_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_ref; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_refContext variable_ref() {
		Variable_refContext _localctx = new Variable_refContext(Context, State);
		EnterRule(_localctx, 90, RULE_variable_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533; identifier_var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_defContext : ParserRuleContext {
		public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Struct_field_def_listContext struct_field_def_list() {
			return GetRuleContext<Struct_field_def_listContext>(0);
		}
		public Template_param_listContext template_param_list() {
			return GetRuleContext<Template_param_listContext>(0);
		}
		public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Struct_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_defContext struct_def() {
		Struct_defContext _localctx = new Struct_defContext(Context, State);
		EnterRule(_localctx, 92, RULE_struct_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535; identifier_type();
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SMALL_ANGLEopen) {
				{
				State = 536; template_param_list();
				}
			}

			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 539; type_ref_use();
				}
			}

			{
			State = 542; newline();
			State = 543; struct_field_def_list();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_field_def_listContext : ParserRuleContext {
		public Struct_field_defContext[] struct_field_def() {
			return GetRuleContexts<Struct_field_defContext>();
		}
		public Struct_field_defContext struct_field_def(int i) {
			return GetRuleContext<Struct_field_defContext>(i);
		}
		public Struct_field_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_field_def_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_field_def_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_field_def_listContext struct_field_def_list() {
		Struct_field_def_listContext _localctx = new Struct_field_def_listContext(Context, State);
		EnterRule(_localctx, 94, RULE_struct_field_def_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 545; struct_field_def();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 548;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_field_defContext : ParserRuleContext {
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public Identifier_fieldContext identifier_field() {
			return GetRuleContext<Identifier_fieldContext>(0);
		}
		public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Struct_field_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_field_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_field_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_field_defContext struct_field_def() {
		Struct_field_defContext _localctx = new Struct_field_defContext(Context, State);
		EnterRule(_localctx, 96, RULE_struct_field_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550; indent();
			State = 551; identifier_field();
			State = 552; type_ref_use();
			State = 553; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_defContext : ParserRuleContext {
		public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Enum_option_def_listContext enum_option_def_list() {
			return GetRuleContext<Enum_option_def_listContext>(0);
		}
		public Enum_option_def_listlineContext enum_option_def_listline() {
			return GetRuleContext<Enum_option_def_listlineContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(ZsharpParser.COLON, 0); }
		public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		public Enum_base_typeContext enum_base_type() {
			return GetRuleContext<Enum_base_typeContext>(0);
		}
		public Enum_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_defContext enum_def() {
		Enum_defContext _localctx = new Enum_defContext(Context, State);
		EnterRule(_localctx, 98, RULE_enum_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555; identifier_type();
			State = 559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 556; Match(COLON);
				State = 557; Match(SP);
				State = 558; enum_base_type();
				}
			}

			State = 561; newline();
			State = 564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 562; enum_option_def_list();
				}
				break;
			case 2:
				{
				State = 563; enum_option_def_listline();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_option_def_listlineContext : ParserRuleContext {
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public Identifier_enumoptionContext[] identifier_enumoption() {
			return GetRuleContexts<Identifier_enumoptionContext>();
		}
		public Identifier_enumoptionContext identifier_enumoption(int i) {
			return GetRuleContext<Identifier_enumoptionContext>(i);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ZsharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ZsharpParser.COMMA, i);
		}
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Enum_option_def_listlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_option_def_listline; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_option_def_listline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_option_def_listlineContext enum_option_def_listline() {
		Enum_option_def_listlineContext _localctx = new Enum_option_def_listlineContext(Context, State);
		EnterRule(_localctx, 100, RULE_enum_option_def_listline);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; indent();
			State = 573;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 567; identifier_enumoption();
					State = 568; Match(COMMA);
					State = 569; Match(SP);
					}
					} 
				}
				State = 575;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			State = 576; identifier_enumoption();
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 577; Match(COMMA);
				}
			}

			State = 580; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_option_def_listContext : ParserRuleContext {
		public Enum_option_defContext[] enum_option_def() {
			return GetRuleContexts<Enum_option_defContext>();
		}
		public Enum_option_defContext enum_option_def(int i) {
			return GetRuleContext<Enum_option_defContext>(i);
		}
		public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public Enum_option_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_option_def_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_option_def_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_option_def_listContext enum_option_def_list() {
		Enum_option_def_listContext _localctx = new Enum_option_def_listContext(Context, State);
		EnterRule(_localctx, 102, RULE_enum_option_def_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 582; enum_option_def();
					State = 583; newline();
					}
					} 
				}
				State = 589;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			State = 590; enum_option_def();
			State = 591; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_option_defContext : ParserRuleContext {
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public Identifier_enumoptionContext identifier_enumoption() {
			return GetRuleContext<Identifier_enumoptionContext>(0);
		}
		public Enum_option_valueContext enum_option_value() {
			return GetRuleContext<Enum_option_valueContext>(0);
		}
		public Enum_option_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_option_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_option_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_option_defContext enum_option_def() {
		Enum_option_defContext _localctx = new Enum_option_defContext(Context, State);
		EnterRule(_localctx, 104, RULE_enum_option_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593; indent();
			State = 594; identifier_enumoption();
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 595; enum_option_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_option_valueContext : ParserRuleContext {
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		public Comptime_expression_valueContext comptime_expression_value() {
			return GetRuleContext<Comptime_expression_valueContext>(0);
		}
		public Enum_option_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_option_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_option_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_option_valueContext enum_option_value() {
		Enum_option_valueContext _localctx = new Enum_option_valueContext(Context, State);
		EnterRule(_localctx, 106, RULE_enum_option_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598; Match(SP);
			State = 599; Match(EQ_ASSIGN);
			State = 600; Match(SP);
			State = 601; comptime_expression_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_base_typeContext : ParserRuleContext {
		public Type_BitContext type_Bit() {
			return GetRuleContext<Type_BitContext>(0);
		}
		public ITerminalNode STR() { return GetToken(ZsharpParser.STR, 0); }
		public ITerminalNode F64() { return GetToken(ZsharpParser.F64, 0); }
		public ITerminalNode F32() { return GetToken(ZsharpParser.F32, 0); }
		public ITerminalNode I16() { return GetToken(ZsharpParser.I16, 0); }
		public ITerminalNode I64() { return GetToken(ZsharpParser.I64, 0); }
		public ITerminalNode I32() { return GetToken(ZsharpParser.I32, 0); }
		public ITerminalNode I8() { return GetToken(ZsharpParser.I8, 0); }
		public ITerminalNode U16() { return GetToken(ZsharpParser.U16, 0); }
		public ITerminalNode U64() { return GetToken(ZsharpParser.U64, 0); }
		public ITerminalNode U32() { return GetToken(ZsharpParser.U32, 0); }
		public ITerminalNode U8() { return GetToken(ZsharpParser.U8, 0); }
		public Enum_base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_base_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_base_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_base_typeContext enum_base_type() {
		Enum_base_typeContext _localctx = new Enum_base_typeContext(Context, State);
		EnterRule(_localctx, 108, RULE_enum_base_type);
		try {
			State = 615;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 603; type_Bit();
				}
				break;
			case STR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 604; Match(STR);
				}
				break;
			case F64:
				EnterOuterAlt(_localctx, 3);
				{
				State = 605; Match(F64);
				}
				break;
			case F32:
				EnterOuterAlt(_localctx, 4);
				{
				State = 606; Match(F32);
				}
				break;
			case I16:
				EnterOuterAlt(_localctx, 5);
				{
				State = 607; Match(I16);
				}
				break;
			case I64:
				EnterOuterAlt(_localctx, 6);
				{
				State = 608; Match(I64);
				}
				break;
			case I32:
				EnterOuterAlt(_localctx, 7);
				{
				State = 609; Match(I32);
				}
				break;
			case I8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 610; Match(I8);
				}
				break;
			case U16:
				EnterOuterAlt(_localctx, 9);
				{
				State = 611; Match(U16);
				}
				break;
			case U64:
				EnterOuterAlt(_localctx, 10);
				{
				State = 612; Match(U64);
				}
				break;
			case U32:
				EnterOuterAlt(_localctx, 11);
				{
				State = 613; Match(U32);
				}
				break;
			case U8:
				EnterOuterAlt(_localctx, 12);
				{
				State = 614; Match(U8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_defContext : ParserRuleContext {
		public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		public ITerminalNode UNUSED() { return GetToken(ZsharpParser.UNUSED, 0); }
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Template_param_listContext template_param_list() {
			return GetRuleContext<Template_param_listContext>(0);
		}
		public Type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_defContext type_def() {
		Type_defContext _localctx = new Type_defContext(Context, State);
		EnterRule(_localctx, 110, RULE_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617; identifier_type();
			State = 619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SMALL_ANGLEopen) {
				{
				State = 618; template_param_list();
				}
			}

			State = 621; type_ref_use();
			State = 622; Match(SP);
			State = 623; Match(UNUSED);
			State = 624; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_aliasContext : ParserRuleContext {
		public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		public Type_refContext type_ref() {
			return GetRuleContext<Type_refContext>(0);
		}
		public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Template_param_listContext template_param_list() {
			return GetRuleContext<Template_param_listContext>(0);
		}
		public Type_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_aliasContext type_alias() {
		Type_aliasContext _localctx = new Type_aliasContext(Context, State);
		EnterRule(_localctx, 112, RULE_type_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626; identifier_type();
			State = 628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SMALL_ANGLEopen) {
				{
				State = 627; template_param_list();
				}
			}

			State = 630; Match(SP);
			State = 631; Match(EQ_ASSIGN);
			State = 632; Match(SP);
			State = 633; type_ref();
			State = 634; newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_ref_useContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(ZsharpParser.COLON, 0); }
		public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		public Type_refContext type_ref() {
			return GetRuleContext<Type_refContext>(0);
		}
		public Type_ref_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_ref_use; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_ref_use(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_ref_useContext type_ref_use() {
		Type_ref_useContext _localctx = new Type_ref_useContext(Context, State);
		EnterRule(_localctx, 114, RULE_type_ref_use);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636; Match(COLON);
			State = 637; Match(SP);
			State = 638; type_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_refContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode ERROR() { return GetToken(ZsharpParser.ERROR, 0); }
		public ITerminalNode QUESTION() { return GetToken(ZsharpParser.QUESTION, 0); }
		public Type_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_ref; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_refContext type_ref() {
		Type_refContext _localctx = new Type_refContext(Context, State);
		EnterRule(_localctx, 116, RULE_type_ref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; type_name();
			State = 642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ERROR) {
				{
				State = 641; Match(ERROR);
				}
			}

			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION) {
				{
				State = 644; Match(QUESTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public Known_typesContext known_types() {
			return GetRuleContext<Known_typesContext>(0);
		}
		public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		public Template_param_list_useContext template_param_list_use() {
			return GetRuleContext<Template_param_list_useContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 118, RULE_type_name);
		int _la;
		try {
			State = 652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case U8:
			case U16:
			case U32:
			case U64:
			case I8:
			case I16:
			case I32:
			case I64:
			case F32:
			case F64:
			case STR:
			case BOOL:
			case BIT:
			case PTR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 647; known_types();
				}
				break;
			case IDENTIFIERupper:
				EnterOuterAlt(_localctx, 2);
				{
				State = 648; identifier_type();
				State = 650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SMALL_ANGLEopen) {
					{
					State = 649; template_param_list_use();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Known_typesContext : ParserRuleContext {
		public Type_BitContext type_Bit() {
			return GetRuleContext<Type_BitContext>(0);
		}
		public Type_PtrContext type_Ptr() {
			return GetRuleContext<Type_PtrContext>(0);
		}
		public ITerminalNode BOOL() { return GetToken(ZsharpParser.BOOL, 0); }
		public ITerminalNode STR() { return GetToken(ZsharpParser.STR, 0); }
		public ITerminalNode F64() { return GetToken(ZsharpParser.F64, 0); }
		public ITerminalNode F32() { return GetToken(ZsharpParser.F32, 0); }
		public ITerminalNode I16() { return GetToken(ZsharpParser.I16, 0); }
		public ITerminalNode I64() { return GetToken(ZsharpParser.I64, 0); }
		public ITerminalNode I32() { return GetToken(ZsharpParser.I32, 0); }
		public ITerminalNode I8() { return GetToken(ZsharpParser.I8, 0); }
		public ITerminalNode U16() { return GetToken(ZsharpParser.U16, 0); }
		public ITerminalNode U64() { return GetToken(ZsharpParser.U64, 0); }
		public ITerminalNode U32() { return GetToken(ZsharpParser.U32, 0); }
		public ITerminalNode U8() { return GetToken(ZsharpParser.U8, 0); }
		public Known_typesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_known_types; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKnown_types(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Known_typesContext known_types() {
		Known_typesContext _localctx = new Known_typesContext(Context, State);
		EnterRule(_localctx, 120, RULE_known_types);
		try {
			State = 668;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 654; type_Bit();
				}
				break;
			case PTR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 655; type_Ptr();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 656; Match(BOOL);
				}
				break;
			case STR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 657; Match(STR);
				}
				break;
			case F64:
				EnterOuterAlt(_localctx, 5);
				{
				State = 658; Match(F64);
				}
				break;
			case F32:
				EnterOuterAlt(_localctx, 6);
				{
				State = 659; Match(F32);
				}
				break;
			case I16:
				EnterOuterAlt(_localctx, 7);
				{
				State = 660; Match(I16);
				}
				break;
			case I64:
				EnterOuterAlt(_localctx, 8);
				{
				State = 661; Match(I64);
				}
				break;
			case I32:
				EnterOuterAlt(_localctx, 9);
				{
				State = 662; Match(I32);
				}
				break;
			case I8:
				EnterOuterAlt(_localctx, 10);
				{
				State = 663; Match(I8);
				}
				break;
			case U16:
				EnterOuterAlt(_localctx, 11);
				{
				State = 664; Match(U16);
				}
				break;
			case U64:
				EnterOuterAlt(_localctx, 12);
				{
				State = 665; Match(U64);
				}
				break;
			case U32:
				EnterOuterAlt(_localctx, 13);
				{
				State = 666; Match(U32);
				}
				break;
			case U8:
				EnterOuterAlt(_localctx, 14);
				{
				State = 667; Match(U8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_BitContext : ParserRuleContext {
		public ITerminalNode BIT() { return GetToken(ZsharpParser.BIT, 0); }
		public Template_param_list_use_numberContext template_param_list_use_number() {
			return GetRuleContext<Template_param_list_use_numberContext>(0);
		}
		public Type_BitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_Bit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_Bit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_BitContext type_Bit() {
		Type_BitContext _localctx = new Type_BitContext(Context, State);
		EnterRule(_localctx, 122, RULE_type_Bit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670; Match(BIT);
			State = 671; template_param_list_use_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_PtrContext : ParserRuleContext {
		public ITerminalNode PTR() { return GetToken(ZsharpParser.PTR, 0); }
		public Template_param_list_use_typeContext template_param_list_use_type() {
			return GetRuleContext<Template_param_list_use_typeContext>(0);
		}
		public Type_PtrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_Ptr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_Ptr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_PtrContext type_Ptr() {
		Type_PtrContext _localctx = new Type_PtrContext(Context, State);
		EnterRule(_localctx, 124, RULE_type_Ptr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673; Match(PTR);
			State = 674; template_param_list_use_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_OptContext : ParserRuleContext {
		public ITerminalNode OPT() { return GetToken(ZsharpParser.OPT, 0); }
		public Template_param_list_use_typeContext template_param_list_use_type() {
			return GetRuleContext<Template_param_list_use_typeContext>(0);
		}
		public Type_OptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_Opt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_Opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_OptContext type_Opt() {
		Type_OptContext _localctx = new Type_OptContext(Context, State);
		EnterRule(_localctx, 126, RULE_type_Opt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676; Match(OPT);
			State = 677; template_param_list_use_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_ErrContext : ParserRuleContext {
		public ITerminalNode ERR() { return GetToken(ZsharpParser.ERR, 0); }
		public Template_param_list_use_typeContext template_param_list_use_type() {
			return GetRuleContext<Template_param_list_use_typeContext>(0);
		}
		public Type_ErrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_Err; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_Err(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_ErrContext type_Err() {
		Type_ErrContext _localctx = new Type_ErrContext(Context, State);
		EnterRule(_localctx, 128, RULE_type_Err);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679; Match(ERR);
			State = 680; template_param_list_use_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_ImmContext : ParserRuleContext {
		public ITerminalNode IMM() { return GetToken(ZsharpParser.IMM, 0); }
		public Template_param_list_use_typeContext template_param_list_use_type() {
			return GetRuleContext<Template_param_list_use_typeContext>(0);
		}
		public Type_ImmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_Imm; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_Imm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_ImmContext type_Imm() {
		Type_ImmContext _localctx = new Type_ImmContext(Context, State);
		EnterRule(_localctx, 130, RULE_type_Imm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682; Match(IMM);
			State = 683; template_param_list_use_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_list_useContext : ParserRuleContext {
		public ITerminalNode SMALL_ANGLEopen() { return GetToken(ZsharpParser.SMALL_ANGLEopen, 0); }
		public Template_param_useContext[] template_param_use() {
			return GetRuleContexts<Template_param_useContext>();
		}
		public Template_param_useContext template_param_use(int i) {
			return GetRuleContext<Template_param_useContext>(i);
		}
		public ITerminalNode GREAT_ANGLEclose() { return GetToken(ZsharpParser.GREAT_ANGLEclose, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ZsharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ZsharpParser.COMMA, i);
		}
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Template_param_list_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_param_list_use; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_list_use(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_list_useContext template_param_list_use() {
		Template_param_list_useContext _localctx = new Template_param_list_useContext(Context, State);
		EnterRule(_localctx, 132, RULE_template_param_list_use);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685; Match(SMALL_ANGLEopen);
			State = 686; template_param_use();
			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 687; Match(COMMA);
				State = 688; Match(SP);
				State = 689; template_param_use();
				}
				}
				State = 694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 695; Match(GREAT_ANGLEclose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_useContext : ParserRuleContext {
		public Type_refContext type_ref() {
			return GetRuleContext<Type_refContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Literal_boolContext literal_bool() {
			return GetRuleContext<Literal_boolContext>(0);
		}
		public Template_param_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_param_use; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_use(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_useContext template_param_use() {
		Template_param_useContext _localctx = new Template_param_useContext(Context, State);
		EnterRule(_localctx, 134, RULE_template_param_use);
		try {
			State = 700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case U8:
			case U16:
			case U32:
			case U64:
			case I8:
			case I16:
			case I32:
			case I64:
			case F32:
			case F64:
			case STR:
			case BOOL:
			case BIT:
			case PTR:
			case IDENTIFIERupper:
				EnterOuterAlt(_localctx, 1);
				{
				State = 697; type_ref();
				}
				break;
			case NUMBERbin:
			case NUMBERoct:
			case NUMBERdec:
			case NUMBERdec_prefix:
			case NUMBERhex:
			case CHARACTER:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 698; literal();
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 699; literal_bool();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_list_use_numberContext : ParserRuleContext {
		public ITerminalNode SMALL_ANGLEopen() { return GetToken(ZsharpParser.SMALL_ANGLEopen, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode GREAT_ANGLEclose() { return GetToken(ZsharpParser.GREAT_ANGLEclose, 0); }
		public Template_param_list_use_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_param_list_use_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_list_use_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_list_use_numberContext template_param_list_use_number() {
		Template_param_list_use_numberContext _localctx = new Template_param_list_use_numberContext(Context, State);
		EnterRule(_localctx, 136, RULE_template_param_list_use_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702; Match(SMALL_ANGLEopen);
			State = 703; number();
			State = 704; Match(GREAT_ANGLEclose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_list_use_typeContext : ParserRuleContext {
		public ITerminalNode SMALL_ANGLEopen() { return GetToken(ZsharpParser.SMALL_ANGLEopen, 0); }
		public Type_refContext type_ref() {
			return GetRuleContext<Type_refContext>(0);
		}
		public ITerminalNode GREAT_ANGLEclose() { return GetToken(ZsharpParser.GREAT_ANGLEclose, 0); }
		public Template_param_list_use_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_param_list_use_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_list_use_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_list_use_typeContext template_param_list_use_type() {
		Template_param_list_use_typeContext _localctx = new Template_param_list_use_typeContext(Context, State);
		EnterRule(_localctx, 138, RULE_template_param_list_use_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706; Match(SMALL_ANGLEopen);
			State = 707; type_ref();
			State = 708; Match(GREAT_ANGLEclose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_listContext : ParserRuleContext {
		public ITerminalNode SMALL_ANGLEopen() { return GetToken(ZsharpParser.SMALL_ANGLEopen, 0); }
		public Template_param_anyContext[] template_param_any() {
			return GetRuleContexts<Template_param_anyContext>();
		}
		public Template_param_anyContext template_param_any(int i) {
			return GetRuleContext<Template_param_anyContext>(i);
		}
		public ITerminalNode GREAT_ANGLEclose() { return GetToken(ZsharpParser.GREAT_ANGLEclose, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ZsharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ZsharpParser.COMMA, i);
		}
		public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Template_param_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_param_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_listContext template_param_list() {
		Template_param_listContext _localctx = new Template_param_listContext(Context, State);
		EnterRule(_localctx, 140, RULE_template_param_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710; Match(SMALL_ANGLEopen);
			State = 711; template_param_any();
			State = 717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 712; Match(COMMA);
				State = 713; Match(SP);
				State = 714; template_param_any();
				}
				}
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 720; Match(GREAT_ANGLEclose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_varContext : ParserRuleContext {
		public Identifier_paramContext identifier_param() {
			return GetRuleContext<Identifier_paramContext>(0);
		}
		public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Template_param_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_param_var; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_varContext template_param_var() {
		Template_param_varContext _localctx = new Template_param_varContext(Context, State);
		EnterRule(_localctx, 142, RULE_template_param_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722; identifier_param();
			State = 723; type_ref_use();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_anyContext : ParserRuleContext {
		public Template_param_varContext template_param_var() {
			return GetRuleContext<Template_param_varContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Template_param_anyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_param_any; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_any(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_anyContext template_param_any() {
		Template_param_anyContext _localctx = new Template_param_anyContext(Context, State);
		EnterRule(_localctx, 144, RULE_template_param_any);
		try {
			State = 727;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIERlower:
				EnterOuterAlt(_localctx, 1);
				{
				State = 725; template_param_var();
				}
				break;
			case U8:
			case U16:
			case U32:
			case U64:
			case I8:
			case I16:
			case I32:
			case I64:
			case F32:
			case F64:
			case STR:
			case BOOL:
			case BIT:
			case PTR:
			case IDENTIFIERupper:
				EnterOuterAlt(_localctx, 2);
				{
				State = 726; type_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_typeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIERupper() { return GetToken(ZsharpParser.IDENTIFIERupper, 0); }
		public Identifier_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_typeContext identifier_type() {
		Identifier_typeContext _localctx = new Identifier_typeContext(Context, State);
		EnterRule(_localctx, 146, RULE_identifier_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; Match(IDENTIFIERupper);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_varContext : ParserRuleContext {
		public ITerminalNode IDENTIFIERlower() { return GetToken(ZsharpParser.IDENTIFIERlower, 0); }
		public Identifier_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_var; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_varContext identifier_var() {
		Identifier_varContext _localctx = new Identifier_varContext(Context, State);
		EnterRule(_localctx, 148, RULE_identifier_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731; Match(IDENTIFIERlower);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_paramContext : ParserRuleContext {
		public ITerminalNode IDENTIFIERlower() { return GetToken(ZsharpParser.IDENTIFIERlower, 0); }
		public Identifier_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_param; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_paramContext identifier_param() {
		Identifier_paramContext _localctx = new Identifier_paramContext(Context, State);
		EnterRule(_localctx, 150, RULE_identifier_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733; Match(IDENTIFIERlower);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_funcContext : ParserRuleContext {
		public ITerminalNode IDENTIFIERupper() { return GetToken(ZsharpParser.IDENTIFIERupper, 0); }
		public ITerminalNode IDENTIFIERlower() { return GetToken(ZsharpParser.IDENTIFIERlower, 0); }
		public Identifier_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_func; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_funcContext identifier_func() {
		Identifier_funcContext _localctx = new Identifier_funcContext(Context, State);
		EnterRule(_localctx, 152, RULE_identifier_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIERupper || _la==IDENTIFIERlower) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_fieldContext : ParserRuleContext {
		public ITerminalNode IDENTIFIERupper() { return GetToken(ZsharpParser.IDENTIFIERupper, 0); }
		public ITerminalNode IDENTIFIERlower() { return GetToken(ZsharpParser.IDENTIFIERlower, 0); }
		public Identifier_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_field; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_fieldContext identifier_field() {
		Identifier_fieldContext _localctx = new Identifier_fieldContext(Context, State);
		EnterRule(_localctx, 154, RULE_identifier_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIERupper || _la==IDENTIFIERlower) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_enumoptionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIERupper() { return GetToken(ZsharpParser.IDENTIFIERupper, 0); }
		public ITerminalNode IDENTIFIERlower() { return GetToken(ZsharpParser.IDENTIFIERlower, 0); }
		public Identifier_enumoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_enumoption; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_enumoption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_enumoptionContext identifier_enumoption() {
		Identifier_enumoptionContext _localctx = new Identifier_enumoptionContext(Context, State);
		EnterRule(_localctx, 156, RULE_identifier_enumoption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIERupper || _la==IDENTIFIERlower) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_moduleContext : ParserRuleContext {
		public ITerminalNode IDENTIFIERupper() { return GetToken(ZsharpParser.IDENTIFIERupper, 0); }
		public ITerminalNode IDENTIFIERlower() { return GetToken(ZsharpParser.IDENTIFIERlower, 0); }
		public Identifier_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_module; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_module(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_moduleContext identifier_module() {
		Identifier_moduleContext _localctx = new Identifier_moduleContext(Context, State);
		EnterRule(_localctx, 158, RULE_identifier_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIERupper || _la==IDENTIFIERlower) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_unusedContext : ParserRuleContext {
		public ITerminalNode UNUSED() { return GetToken(ZsharpParser.UNUSED, 0); }
		public Identifier_unusedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_unused; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_unused(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_unusedContext identifier_unused() {
		Identifier_unusedContext _localctx = new Identifier_unusedContext(Context, State);
		EnterRule(_localctx, 160, RULE_identifier_unused);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743; Match(UNUSED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_boolContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(ZsharpParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(ZsharpParser.FALSE, 0); }
		public Literal_boolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_bool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_boolContext literal_bool() {
		Literal_boolContext _localctx = new Literal_boolContext(Context, State);
		EnterRule(_localctx, 162, RULE_literal_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 164, RULE_literal);
		try {
			State = 749;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBERbin:
			case NUMBERoct:
			case NUMBERdec:
			case NUMBERdec_prefix:
			case NUMBERhex:
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 747; number();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 748; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode NUMBERbin() { return GetToken(ZsharpParser.NUMBERbin, 0); }
		public ITerminalNode NUMBERoct() { return GetToken(ZsharpParser.NUMBERoct, 0); }
		public ITerminalNode NUMBERdec() { return GetToken(ZsharpParser.NUMBERdec, 0); }
		public ITerminalNode NUMBERdec_prefix() { return GetToken(ZsharpParser.NUMBERdec_prefix, 0); }
		public ITerminalNode NUMBERhex() { return GetToken(ZsharpParser.NUMBERhex, 0); }
		public ITerminalNode CHARACTER() { return GetToken(ZsharpParser.CHARACTER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 166, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBERbin) | (1L << NUMBERoct) | (1L << NUMBERdec) | (1L << NUMBERdec_prefix) | (1L << NUMBERhex) | (1L << CHARACTER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_arithmeticContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(ZsharpParser.PLUS, 0); }
		public ITerminalNode MINUS_NEG() { return GetToken(ZsharpParser.MINUS_NEG, 0); }
		public ITerminalNode DIV() { return GetToken(ZsharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(ZsharpParser.MOD, 0); }
		public ITerminalNode MULT_PTR() { return GetToken(ZsharpParser.MULT_PTR, 0); }
		public ITerminalNode POW() { return GetToken(ZsharpParser.POW, 0); }
		public Operator_arithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_arithmetic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_arithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_arithmeticContext operator_arithmetic() {
		Operator_arithmeticContext _localctx = new Operator_arithmeticContext(Context, State);
		EnterRule(_localctx, 168, RULE_operator_arithmetic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS_NEG) | (1L << MULT_PTR) | (1L << DIV) | (1L << MOD) | (1L << POW))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_arithmetic_unaryContext : ParserRuleContext {
		public ITerminalNode MINUS_NEG() { return GetToken(ZsharpParser.MINUS_NEG, 0); }
		public Operator_arithmetic_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_arithmetic_unary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_arithmetic_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_arithmetic_unaryContext operator_arithmetic_unary() {
		Operator_arithmetic_unaryContext _localctx = new Operator_arithmetic_unaryContext(Context, State);
		EnterRule(_localctx, 170, RULE_operator_arithmetic_unary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 755; Match(MINUS_NEG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_logicContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(ZsharpParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(ZsharpParser.OR, 0); }
		public Operator_logicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_logic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_logic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_logicContext operator_logic() {
		Operator_logicContext _localctx = new Operator_logicContext(Context, State);
		EnterRule(_localctx, 172, RULE_operator_logic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_logic_unaryContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(ZsharpParser.NOT, 0); }
		public Operator_logic_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_logic_unary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_logic_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_logic_unaryContext operator_logic_unary() {
		Operator_logic_unaryContext _localctx = new Operator_logic_unaryContext(Context, State);
		EnterRule(_localctx, 174, RULE_operator_logic_unary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759; Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_comparisonContext : ParserRuleContext {
		public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		public ITerminalNode NEQ() { return GetToken(ZsharpParser.NEQ, 0); }
		public ITerminalNode GREAT_ANGLEclose() { return GetToken(ZsharpParser.GREAT_ANGLEclose, 0); }
		public ITerminalNode SMALL_ANGLEopen() { return GetToken(ZsharpParser.SMALL_ANGLEopen, 0); }
		public ITerminalNode GREQ() { return GetToken(ZsharpParser.GREQ, 0); }
		public ITerminalNode SMEQ() { return GetToken(ZsharpParser.SMEQ, 0); }
		public Operator_comparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_comparison; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_comparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_comparisonContext operator_comparison() {
		Operator_comparisonContext _localctx = new Operator_comparisonContext(Context, State);
		EnterRule(_localctx, 176, RULE_operator_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ_ASSIGN) | (1L << NEQ) | (1L << GREAT_ANGLEclose) | (1L << SMALL_ANGLEopen) | (1L << GREQ) | (1L << SMEQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_bitsContext : ParserRuleContext {
		public ITerminalNode BIT_AND() { return GetToken(ZsharpParser.BIT_AND, 0); }
		public ITerminalNode BIT_OR() { return GetToken(ZsharpParser.BIT_OR, 0); }
		public ITerminalNode BIT_XOR_IMM() { return GetToken(ZsharpParser.BIT_XOR_IMM, 0); }
		public ITerminalNode BIT_SHL() { return GetToken(ZsharpParser.BIT_SHL, 0); }
		public ITerminalNode BIT_SHR() { return GetToken(ZsharpParser.BIT_SHR, 0); }
		public ITerminalNode BIT_ROLL() { return GetToken(ZsharpParser.BIT_ROLL, 0); }
		public ITerminalNode BIT_ROLR() { return GetToken(ZsharpParser.BIT_ROLR, 0); }
		public Operator_bitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_bits; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_bits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_bitsContext operator_bits() {
		Operator_bitsContext _localctx = new Operator_bitsContext(Context, State);
		EnterRule(_localctx, 178, RULE_operator_bits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIT_AND) | (1L << BIT_OR) | (1L << BIT_XOR_IMM) | (1L << BIT_SHL) | (1L << BIT_SHR) | (1L << BIT_ROLL) | (1L << BIT_ROLR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_bits_unaryContext : ParserRuleContext {
		public ITerminalNode BIT_NOT() { return GetToken(ZsharpParser.BIT_NOT, 0); }
		public Operator_bits_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_bits_unary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_bits_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_bits_unaryContext operator_bits_unary() {
		Operator_bits_unaryContext _localctx = new Operator_bits_unaryContext(Context, State);
		EnterRule(_localctx, 180, RULE_operator_bits_unary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765; Match(BIT_NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_assignmentContext : ParserRuleContext {
		public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		public Operator_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_assignmentContext operator_assignment() {
		Operator_assignmentContext _localctx = new Operator_assignmentContext(Context, State);
		EnterRule(_localctx, 182, RULE_operator_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767; Match(EQ_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_lineContext : ParserRuleContext {
		public ITerminalNode INDENT() { return GetToken(ZsharpParser.INDENT, 0); }
		public ITerminalNode[] EOL() { return GetTokens(ZsharpParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(ZsharpParser.EOL, i);
		}
		public Empty_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_lineContext empty_line() {
		Empty_lineContext _localctx = new Empty_lineContext(Context, State);
		EnterRule(_localctx, 184, RULE_empty_line);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 769; Match(INDENT);
				}
			}

			State = 773;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 772; Match(EOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 775;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		public ITerminalNode EOL() { return GetToken(ZsharpParser.EOL, 0); }
		public ITerminalNode INDENT() { return GetToken(ZsharpParser.INDENT, 0); }
		public ITerminalNode COMMENT() { return GetToken(ZsharpParser.COMMENT, 0); }
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 186, RULE_newline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 777; Match(INDENT);
				}
			}

			State = 781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 780; Match(COMMENT);
				}
			}

			State = 783; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(ZsharpParser.COMMENT, 0); }
		public ITerminalNode EOL() { return GetToken(ZsharpParser.EOL, 0); }
		public ITerminalNode INDENT() { return GetToken(ZsharpParser.INDENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 188, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 785; Match(INDENT);
				}
			}

			State = 788; Match(COMMENT);
			State = 789; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(ZsharpParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 190, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentContext : ParserRuleContext {
		public ITerminalNode INDENT() { return GetToken(ZsharpParser.INDENT, 0); }
		public IndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentContext indent() {
		IndentContext _localctx = new IndentContext(Context, State);
		EnterRule(_localctx, 192, RULE_indent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793; Match(INDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return module_name_sempred((Module_nameContext)_localctx, predIndex);
		case 23: return expression_arithmetic_sempred((Expression_arithmeticContext)_localctx, predIndex);
		case 25: return expression_logic_sempred((Expression_logicContext)_localctx, predIndex);
		case 27: return expression_comparison_sempred((Expression_comparisonContext)_localctx, predIndex);
		}
		return true;
	}
	private bool module_name_sempred(Module_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_arithmetic_sempred(Expression_arithmeticContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		}
		return true;
	}
	private bool expression_logic_sempred(Expression_logicContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 4);
		}
		return true;
	}
	private bool expression_comparison_sempred(Expression_comparisonContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'W', '\x31E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x3', '\x2', '\a', '\x2', '\xC6', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\xC9', '\v', '\x2', '\x3', '\x2', '\a', 
		'\x2', '\xCC', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xCF', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\xD6', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\xDB', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', 
		'\xE3', '\n', '\x5', '\r', '\x5', '\xE', '\x5', '\xE4', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xEA', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '\xF2', '\n', '\a', '\f', '\a', '\xE', '\a', '\xF5', '\v', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x105', '\n', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x110', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\x116', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x138', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x14A', '\n', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x14E', '\n', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x156', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x15B', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x169', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\x177', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x17A', '\v', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x17F', '\n', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x18B', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', 
		'\x193', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x196', '\v', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x19A', '\n', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x1A2', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', 
		'\x1AA', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x1AD', '\v', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x1B3', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x1B8', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x1BF', '\n', ' ', '\x3', ' ', '\x3', ' ', 
		'\x5', ' ', '\x1C3', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x5', 
		'\"', '\x1CE', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', 
		'\"', '\x1D3', '\n', '\"', '\f', '\"', '\xE', '\"', '\x1D6', '\v', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '&', '\x5', '&', '\x1E1', '\n', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1E6', '\n', '&', '\x3', '&', 
		'\x3', '&', '\x5', '&', '\x1EA', '\n', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\a', '\'', '\x1F0', '\n', '\'', '\f', '\'', 
		'\xE', '\'', '\x1F3', '\v', '\'', '\x3', '(', '\x3', '(', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x5', ')', '\x1FA', '\n', ')', '\x3', ')', '\x3', 
		')', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x201', '\n', '*', 
		'\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x21C', '\n', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x21F', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x31', '\x6', '\x31', '\x225', '\n', '\x31', '\r', '\x31', '\xE', 
		'\x31', '\x226', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x5', '\x33', '\x232', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x5', '\x33', '\x237', '\n', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x23E', '\n', 
		'\x34', '\f', '\x34', '\xE', '\x34', '\x241', '\v', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x5', '\x34', '\x245', '\n', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x24C', 
		'\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x24F', '\v', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x5', '\x36', '\x257', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x5', '\x38', '\x26A', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x5', 
		'\x39', '\x26E', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x5', ':', '\x277', 
		'\n', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', 
		'\x3', '<', '\x5', '<', '\x285', '\n', '<', '\x3', '<', '\x5', '<', '\x288', 
		'\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x28D', '\n', 
		'=', '\x5', '=', '\x28F', '\n', '=', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', 
		'\x29F', '\n', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\a', '\x44', '\x2B5', '\n', '\x44', '\f', '\x44', '\xE', '\x44', '\x2B8', 
		'\v', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x5', '\x45', '\x2BF', '\n', '\x45', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\a', 'H', '\x2CE', '\n', 'H', '\f', 'H', '\xE', 'H', '\x2D1', '\v', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', 
		'\x3', 'J', '\x5', 'J', '\x2DA', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 
		'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 
		'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', '\x5', 
		'T', '\x2F0', '\n', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', 
		'\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Z', '\x3', 'Z', '\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', 
		'\x3', ']', '\x3', ']', '\x3', '^', '\x5', '^', '\x305', '\n', '^', '\x3', 
		'^', '\x6', '^', '\x308', '\n', '^', '\r', '^', '\xE', '^', '\x309', '\x3', 
		'_', '\x5', '_', '\x30D', '\n', '_', '\x3', '_', '\x5', '_', '\x310', 
		'\n', '_', '\x3', '_', '\x3', '_', '\x3', '`', '\x5', '`', '\x315', '\n', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x2', '\x6', '\f', '\x30', 
		'\x34', '\x38', '\x63', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 
		'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', 
		'\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', 
		'\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', 
		'\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', 
		'\xBC', '\xBE', '\xC0', '\xC2', '\x2', '\t', '\x3', '\x2', 'R', 'S', '\x3', 
		'\x2', '\x1F', ' ', '\x3', '\x2', '\"', '\'', '\x3', '\x2', '-', '\x32', 
		'\x3', '\x2', ')', '*', '\x3', '\x2', '\x33', '\x38', '\x4', '\x2', '\x39', 
		';', '=', '@', '\x2', '\x331', '\x2', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x6', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\xE2', '\x3', '\x2', '\x2', '\x2', '\n', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xF6', '\x3', '\x2', '\x2', '\x2', '\x10', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x100', '\x3', '\x2', '\x2', '\x2', '\x14', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x119', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x120', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x125', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x134', '\x3', '\x2', '\x2', '\x2', '$', '\x13C', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x13E', '\x3', '\x2', '\x2', '\x2', '(', '\x149', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		',', '\x155', '\x3', '\x2', '\x2', '\x2', '.', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x168', '\x3', '\x2', '\x2', '\x2', '\x32', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x199', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1A1', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x1B2', '\x3', '\x2', '\x2', '\x2', '<', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1CD', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1DA', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x1DD', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x1E0', '\x3', '\x2', '\x2', '\x2', 'L', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x1F4', '\x3', '\x2', '\x2', '\x2', 'P', '\x1F9', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x1FD', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x204', '\x3', '\x2', '\x2', '\x2', 'V', '\x207', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x20E', '\x3', '\x2', '\x2', '\x2', 'Z', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x219', '\x3', '\x2', '\x2', '\x2', '`', '\x224', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x228', '\x3', '\x2', '\x2', '\x2', '\x64', '\x22D', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x238', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x24D', '\x3', '\x2', '\x2', '\x2', 'j', '\x253', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x258', '\x3', '\x2', '\x2', '\x2', 'n', '\x269', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x26B', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x274', '\x3', '\x2', '\x2', '\x2', 't', '\x27E', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x282', '\x3', '\x2', '\x2', '\x2', 'x', '\x28E', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x29E', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x2A0', '\x3', '\x2', '\x2', '\x2', '~', '\x2A3', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x82', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x2AC', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x88', '\x2BE', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x2C4', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x92', '\x2D9', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x96', '\x2DD', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x2DF', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x2E3', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x2E7', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\x2E9', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x2EF', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x2F3', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x2F9', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x2FD', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\x2FF', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\x301', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x304', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\x30C', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x314', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\x319', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\x31B', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC6', '\x5', '\x4', 
		'\x3', '\x2', '\xC5', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', 
		'\x5', '\x6', '\x4', '\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD1', '\a', '\x2', '\x2', '\x3', '\xD1', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD6', '\x5', '\n', '\x6', '\x2', '\xD3', '\xD6', 
		'\x5', '\xBE', '`', '\x2', '\xD4', '\xD6', '\x5', '\xBA', '^', '\x2', 
		'\xD5', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xDB', '\x5', '(', '\x15', '\x2', 
		'\xD8', '\xDB', '\x5', '\xBE', '`', '\x2', '\xD9', '\xDB', '\x5', '\xBA', 
		'^', '\x2', '\xDA', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\a', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xE3', '\x5', '\x14', 
		'\v', '\x2', '\xDD', '\xE3', '\x5', 'Z', '.', '\x2', '\xDE', '\xE3', '\x5', 
		'J', '&', '\x2', '\xDF', '\xE3', '\x5', '*', '\x16', '\x2', '\xE0', '\xE3', 
		'\x5', '\xBE', '`', '\x2', '\xE1', '\xE3', '\x5', '\xBA', '^', '\x2', 
		'\xE2', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\xE5', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\xEA', '\x5', '\xE', '\b', '\x2', '\xE7', '\xEA', '\x5', '\x10', 
		'\t', '\x2', '\xE8', '\xEA', '\x5', '\x12', '\n', '\x2', '\xE9', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEC', '\b', '\a', '\x1', '\x2', '\xEC', '\xED', 
		'\x5', '\xA0', 'Q', '\x2', '\xED', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xEF', '\f', '\x3', '\x2', '\x2', '\xEF', '\xF0', '\a', 'H', 
		'\x2', '\x2', '\xF0', '\xF2', '\x5', '\xA0', 'Q', '\x2', '\xF1', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\r', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x14', '\x2', '\x2', 
		'\xF7', '\xF8', '\a', 'T', '\x2', '\x2', '\xF8', '\xF9', '\x5', '\f', 
		'\a', '\x2', '\xF9', '\xFA', '\x5', '\xBC', '_', '\x2', '\xFA', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', '\x15', '\x2', '\x2', 
		'\xFC', '\xFD', '\a', 'T', '\x2', '\x2', '\xFD', '\xFE', '\x5', '\f', 
		'\a', '\x2', '\xFE', '\xFF', '\x5', '\xBC', '_', '\x2', '\xFF', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\a', '\x16', '\x2', '\x2', 
		'\x101', '\x104', '\a', 'T', '\x2', '\x2', '\x102', '\x105', '\x5', '\x9A', 
		'N', '\x2', '\x103', '\x105', '\x5', '\x94', 'K', '\x2', '\x104', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x5', 
		'\xBC', '_', '\x2', '\x107', '\x13', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x110', '\x5', '\x18', '\r', '\x2', '\x109', '\x110', '\x5', '\x1A', 
		'\xE', '\x2', '\x10A', '\x110', '\x5', '\x1C', '\xF', '\x2', '\x10B', 
		'\x110', '\x5', '\"', '\x12', '\x2', '\x10C', '\x110', '\x5', '\x16', 
		'\f', '\x2', '\x10D', '\x110', '\x5', '\x1E', '\x10', '\x2', '\x10E', 
		'\x110', '\x5', ' ', '\x11', '\x2', '\x10F', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x5', '\xC2', '\x62', 
		'\x2', '\x112', '\x115', '\a', '\x1C', '\x2', '\x2', '\x113', '\x114', 
		'\a', 'T', '\x2', '\x2', '\x114', '\x116', '\x5', ',', '\x17', '\x2', 
		'\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x118', '\x5', '\xBC', '_', '\x2', '\x118', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11A', '\x5', '\xC2', '\x62', '\x2', '\x11A', '\x11B', 
		'\a', '\x1A', '\x2', '\x2', '\x11B', '\x11C', '\a', 'T', '\x2', '\x2', 
		'\x11C', '\x11D', '\x5', '\x34', '\x1B', '\x2', '\x11D', '\x11E', '\x5', 
		'\xBC', '_', '\x2', '\x11E', '\x11F', '\x5', '\b', '\x5', '\x2', '\x11F', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x5', '\xC2', '\x62', 
		'\x2', '\x121', '\x122', '\a', '\x1B', '\x2', '\x2', '\x122', '\x123', 
		'\x5', '\xBC', '_', '\x2', '\x123', '\x124', '\x5', '\b', '\x5', '\x2', 
		'\x124', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x5', 
		'\xC2', '\x62', '\x2', '\x126', '\x127', '\a', '\x1B', '\x2', '\x2', '\x127', 
		'\x128', '\a', 'T', '\x2', '\x2', '\x128', '\x129', '\a', '\x1A', '\x2', 
		'\x2', '\x129', '\x12A', '\a', 'T', '\x2', '\x2', '\x12A', '\x12B', '\x5', 
		'\x34', '\x1B', '\x2', '\x12B', '\x12C', '\x5', '\xBC', '_', '\x2', '\x12C', 
		'\x12D', '\x5', '\b', '\x5', '\x2', '\x12D', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x12F', '\x5', '\xC2', '\x62', '\x2', '\x12F', '\x130', 
		'\a', '\x18', '\x2', '\x2', '\x130', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x132', '\x5', '\xC2', '\x62', '\x2', '\x132', '\x133', '\a', 
		'\x19', '\x2', '\x2', '\x133', '!', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x137', '\x5', '\xC2', '\x62', '\x2', '\x135', '\x138', '\x5', '$', '\x13', 
		'\x2', '\x136', '\x138', '\x5', '&', '\x14', '\x2', '\x137', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x5', 
		'\xBC', '_', '\x2', '\x13A', '\x13B', '\x5', '\b', '\x5', '\x2', '\x13B', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\a', '\x17', '\x2', 
		'\x2', '\x13D', '%', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\a', 
		'\x17', '\x2', '\x2', '\x13F', '\x140', '\a', 'T', '\x2', '\x2', '\x140', 
		'\x141', '\x5', '\x34', '\x1B', '\x2', '\x141', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x14A', '\x5', '@', '!', '\x2', '\x143', '\x14A', '\x5', 
		'>', ' ', '\x2', '\x144', '\x14A', '\x5', '\x64', '\x33', '\x2', '\x145', 
		'\x14A', '\x5', '^', '\x30', '\x2', '\x146', '\x14A', '\x5', 'p', '\x39', 
		'\x2', '\x147', '\x14A', '\x5', 'r', ':', '\x2', '\x148', '\x14A', '\x5', 
		'P', ')', '\x2', '\x149', '\x142', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x149', '\x144', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '\x145', '\x3', '\x2', '\x2', '\x2', '\x149', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14A', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x14B', '\x14E', '\x5', '>', ' ', '\x2', '\x14C', '\x14E', 
		'\x5', 'R', '*', '\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x14F', '\x156', '\x5', '\xA8', 'U', '\x2', '\x150', '\x156', 
		'\x5', '\xC0', '\x61', '\x2', '\x151', '\x156', '\x5', '<', '\x1F', '\x2', 
		'\x152', '\x156', '\x5', 'J', '&', '\x2', '\x153', '\x156', '\x5', '\x30', 
		'\x19', '\x2', '\x154', '\x156', '\x5', '\x34', '\x1B', '\x2', '\x155', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x155', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x151', '\x3', '\x2', '\x2', '\x2', '\x155', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x154', '\x3', '\x2', '\x2', '\x2', '\x156', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x157', '\x15B', '\x5', '\xA8', 'U', '\x2', '\x158', '\x15B', 
		'\x5', '\xC0', '\x61', '\x2', '\x159', '\x15B', '\x5', '<', '\x1F', '\x2', 
		'\x15A', '\x157', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x158', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15B', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\b', '\x19', '\x1', 
		'\x2', '\x15D', '\x15E', '\a', '\x44', '\x2', '\x2', '\x15E', '\x15F', 
		'\x5', '\x30', '\x19', '\x2', '\x15F', '\x160', '\a', '\x45', '\x2', '\x2', 
		'\x160', '\x169', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\x5', 
		'\xAC', 'W', '\x2', '\x162', '\x163', '\x5', '\x30', '\x19', '\x5', '\x163', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', '\x5', '\xB6', 
		'\\', '\x2', '\x165', '\x166', '\x5', '\x30', '\x19', '\x4', '\x166', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x167', '\x169', '\x5', '\x32', 
		'\x1A', '\x2', '\x168', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x168', '\x164', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\f', '\b', '\x2', '\x2', 
		'\x16B', '\x16C', '\a', 'T', '\x2', '\x2', '\x16C', '\x16D', '\x5', '\xAA', 
		'V', '\x2', '\x16D', '\x16E', '\a', 'T', '\x2', '\x2', '\x16E', '\x16F', 
		'\x5', '\x30', '\x19', '\t', '\x16F', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x171', '\f', '\a', '\x2', '\x2', '\x171', '\x172', '\a', 'T', 
		'\x2', '\x2', '\x172', '\x173', '\x5', '\xB4', '[', '\x2', '\x173', '\x174', 
		'\a', 'T', '\x2', '\x2', '\x174', '\x175', '\x5', '\x30', '\x19', '\b', 
		'\x175', '\x177', '\x3', '\x2', '\x2', '\x2', '\x176', '\x16A', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x170', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x17A', '\x3', '\x2', '\x2', '\x2', '\x178', '\x176', '\x3', '\x2', '\x2', 
		'\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', '\x179', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x17A', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17F', '\x5', '\xA8', 'U', '\x2', '\x17C', '\x17F', '\x5', 
		'\\', '/', '\x2', '\x17D', '\x17F', '\x5', 'J', '&', '\x2', '\x17E', '\x17B', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x17C', '\x3', '\x2', '\x2', '\x2', 
		'\x17E', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x180', '\x181', '\b', '\x1B', '\x1', '\x2', '\x181', 
		'\x182', '\a', '\x44', '\x2', '\x2', '\x182', '\x183', '\x5', '\x34', 
		'\x1B', '\x2', '\x183', '\x184', '\a', '\x45', '\x2', '\x2', '\x184', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\x5', '\xB0', 
		'Y', '\x2', '\x186', '\x187', '\a', 'T', '\x2', '\x2', '\x187', '\x188', 
		'\x5', '\x34', '\x1B', '\x4', '\x188', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x189', '\x18B', '\x5', '\x36', '\x1C', '\x2', '\x18A', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x185', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x18D', '\f', '\x6', '\x2', '\x2', '\x18D', '\x18E', 
		'\a', 'T', '\x2', '\x2', '\x18E', '\x18F', '\x5', '\xAE', 'X', '\x2', 
		'\x18F', '\x190', '\a', 'T', '\x2', '\x2', '\x190', '\x191', '\x5', '\x34', 
		'\x1B', '\a', '\x191', '\x193', '\x3', '\x2', '\x2', '\x2', '\x192', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x192', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x35', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x197', '\x19A', '\x5', '<', '\x1F', 
		'\x2', '\x198', '\x19A', '\x5', '\x38', '\x1D', '\x2', '\x199', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x198', '\x3', '\x2', '\x2', '\x2', 
		'\x19A', '\x37', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\b', '\x1D', 
		'\x1', '\x2', '\x19C', '\x19D', '\a', '\x44', '\x2', '\x2', '\x19D', '\x19E', 
		'\x5', '\x38', '\x1D', '\x2', '\x19E', '\x19F', '\a', '\x45', '\x2', '\x2', 
		'\x19F', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A2', '\x5', 
		':', '\x1E', '\x2', '\x1A1', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x1A1', 
		'\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1AB', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A4', '\f', '\x5', '\x2', '\x2', '\x1A4', '\x1A5', 
		'\a', 'T', '\x2', '\x2', '\x1A5', '\x1A6', '\x5', '\xB2', 'Z', '\x2', 
		'\x1A6', '\x1A7', '\a', 'T', '\x2', '\x2', '\x1A7', '\x1A8', '\x5', '\x38', 
		'\x1D', '\x6', '\x1A8', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1A9', 
		'\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AD', '\x3', '\x2', '\x2', 
		'\x2', '\x1AB', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1B3', '\x5', 
		'J', '&', '\x2', '\x1AF', '\x1B3', '\x5', '\\', '/', '\x2', '\x1B0', '\x1B3', 
		'\x5', '\xA6', 'T', '\x2', '\x1B1', '\x1B3', '\x5', '\x30', '\x19', '\x2', 
		'\x1B2', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1AF', '\x3', 
		'\x2', '\x2', '\x2', '\x1B2', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B2', 
		'\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B3', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x1B4', '\x1B8', '\x5', '\xA4', 'S', '\x2', '\x1B5', '\x1B8', 
		'\x5', '\\', '/', '\x2', '\x1B6', '\x1B8', '\x5', 'J', '&', '\x2', '\x1B7', 
		'\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B5', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B8', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\x5', '\x9A', 'N', '\x2', '\x1BA', 
		'\x1BB', '\a', 'G', '\x2', '\x2', '\x1BB', '\x1BC', '\a', 'T', '\x2', 
		'\x2', '\x1BC', '\x1BE', '\a', '\x44', '\x2', '\x2', '\x1BD', '\x1BF', 
		'\x5', '\x42', '\"', '\x2', '\x1BE', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C0', '\x3', 
		'\x2', '\x2', '\x2', '\x1C0', '\x1C2', '\a', '\x45', '\x2', '\x2', '\x1C1', 
		'\x1C3', '\x5', 'H', '%', '\x2', '\x1C2', '\x1C1', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\x5', '\xBC', '_', '\x2', 
		'\x1C5', '\x1C6', '\x5', '\b', '\x5', '\x2', '\x1C6', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x1C7', '\x1C8', '\a', '\x16', '\x2', '\x2', '\x1C8', '\x1C9', 
		'\a', 'T', '\x2', '\x2', '\x1C9', '\x1CA', '\x5', '>', ' ', '\x2', '\x1CA', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CE', '\x5', '\x44', '#', 
		'\x2', '\x1CC', '\x1CE', '\x5', '\x46', '$', '\x2', '\x1CD', '\x1CB', 
		'\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'\x1CE', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\a', 
		'K', '\x2', '\x2', '\x1D0', '\x1D1', '\a', 'T', '\x2', '\x2', '\x1D1', 
		'\x1D3', '\x5', '\x44', '#', '\x2', '\x1D2', '\x1CF', '\x3', '\x2', '\x2', 
		'\x2', '\x1D3', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D4', '\x3', 
		'\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\x5', '\x98', 'M', '\x2', '\x1D8', 
		'\x1D9', '\x5', 't', ';', '\x2', '\x1D9', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\x1DB', '\a', '\x1E', '\x2', '\x2', '\x1DB', '\x1DC', 
		'\x5', 't', ';', '\x2', '\x1DC', 'G', '\x3', '\x2', '\x2', '\x2', '\x1DD', 
		'\x1DE', '\x5', 't', ';', '\x2', '\x1DE', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1E1', '\x5', '\xC2', '\x62', '\x2', '\x1E0', '\x1DF', '\x3', 
		'\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E1', 
		'\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\x5', '\x9A', 
		'N', '\x2', '\x1E3', '\x1E5', '\a', '\x44', '\x2', '\x2', '\x1E4', '\x1E6', 
		'\x5', 'L', '\'', '\x2', '\x1E5', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E5', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', 
		'\x2', '\x2', '\x2', '\x1E7', '\x1E9', '\a', '\x45', '\x2', '\x2', '\x1E8', 
		'\x1EA', '\x5', '\xBC', '_', '\x2', '\x1E9', '\x1E8', '\x3', '\x2', '\x2', 
		'\x2', '\x1E9', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EA', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1F1', '\x5', 'N', '(', '\x2', '\x1EC', 
		'\x1ED', '\a', 'K', '\x2', '\x2', '\x1ED', '\x1EE', '\a', 'T', '\x2', 
		'\x2', '\x1EE', '\x1F0', '\x5', 'N', '(', '\x2', '\x1EF', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\x3', '\x2', '\x2', 
		'\x2', '\x1F2', 'M', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F1', '\x3', 
		'\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\x5', ',', '\x17', '\x2', '\x1F5', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1FA', '\x5', 'T', '+', '\x2', 
		'\x1F7', '\x1FA', '\x5', 'V', ',', '\x2', '\x1F8', '\x1FA', '\x5', 'X', 
		'-', '\x2', '\x1F9', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1F7', 
		'\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1F8', '\x3', '\x2', '\x2', '\x2', 
		'\x1FA', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x5', 
		'\xBC', '_', '\x2', '\x1FC', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1FD', 
		'\x200', '\x5', '\xC2', '\x62', '\x2', '\x1FE', '\x201', '\x5', 'T', '+', 
		'\x2', '\x1FF', '\x201', '\x5', 'V', ',', '\x2', '\x200', '\x1FE', '\x3', 
		'\x2', '\x2', '\x2', '\x200', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x201', 
		'\x202', '\x3', '\x2', '\x2', '\x2', '\x202', '\x203', '\x5', '\xBC', 
		'_', '\x2', '\x203', 'S', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', 
		'\x5', '\x96', 'L', '\x2', '\x205', '\x206', '\x5', 't', ';', '\x2', '\x206', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x207', '\x208', '\x5', '\x96', 'L', 
		'\x2', '\x208', '\x209', '\x5', 't', ';', '\x2', '\x209', '\x20A', '\a', 
		'T', '\x2', '\x2', '\x20A', '\x20B', '\a', '\x33', '\x2', '\x2', '\x20B', 
		'\x20C', '\a', 'T', '\x2', '\x2', '\x20C', '\x20D', '\x5', ',', '\x17', 
		'\x2', '\x20D', 'W', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', '\x5', 
		'\x96', 'L', '\x2', '\x20F', '\x210', '\a', 'T', '\x2', '\x2', '\x210', 
		'\x211', '\a', '\x33', '\x2', '\x2', '\x211', '\x212', '\a', 'T', '\x2', 
		'\x2', '\x212', '\x213', '\x5', ',', '\x17', '\x2', '\x213', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x214', '\x215', '\x5', '\xC2', '\x62', '\x2', '\x215', 
		'\x216', '\x5', 'X', '-', '\x2', '\x216', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x217', '\x218', '\x5', '\x96', 'L', '\x2', '\x218', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x219', '\x21B', '\x5', '\x94', 'K', '\x2', '\x21A', '\x21C', 
		'\x5', '\x8E', 'H', '\x2', '\x21B', '\x21A', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21E', '\x3', 
		'\x2', '\x2', '\x2', '\x21D', '\x21F', '\x5', 't', ';', '\x2', '\x21E', 
		'\x21D', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', '\x3', '\x2', '\x2', 
		'\x2', '\x21F', '\x220', '\x3', '\x2', '\x2', '\x2', '\x220', '\x221', 
		'\x5', '\xBC', '_', '\x2', '\x221', '\x222', '\x5', '`', '\x31', '\x2', 
		'\x222', '_', '\x3', '\x2', '\x2', '\x2', '\x223', '\x225', '\x5', '\x62', 
		'\x32', '\x2', '\x224', '\x223', '\x3', '\x2', '\x2', '\x2', '\x225', 
		'\x226', '\x3', '\x2', '\x2', '\x2', '\x226', '\x224', '\x3', '\x2', '\x2', 
		'\x2', '\x226', '\x227', '\x3', '\x2', '\x2', '\x2', '\x227', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x228', '\x229', '\x5', '\xC2', '\x62', '\x2', 
		'\x229', '\x22A', '\x5', '\x9C', 'O', '\x2', '\x22A', '\x22B', '\x5', 
		't', ';', '\x2', '\x22B', '\x22C', '\x5', '\xBC', '_', '\x2', '\x22C', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x231', '\x5', '\x94', 'K', 
		'\x2', '\x22E', '\x22F', '\a', 'G', '\x2', '\x2', '\x22F', '\x230', '\a', 
		'T', '\x2', '\x2', '\x230', '\x232', '\x5', 'n', '\x38', '\x2', '\x231', 
		'\x22E', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', '\x3', '\x2', '\x2', 
		'\x2', '\x232', '\x233', '\x3', '\x2', '\x2', '\x2', '\x233', '\x236', 
		'\x5', '\xBC', '_', '\x2', '\x234', '\x237', '\x5', 'h', '\x35', '\x2', 
		'\x235', '\x237', '\x5', '\x66', '\x34', '\x2', '\x236', '\x234', '\x3', 
		'\x2', '\x2', '\x2', '\x236', '\x235', '\x3', '\x2', '\x2', '\x2', '\x237', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x238', '\x23F', '\x5', '\xC2', '\x62', 
		'\x2', '\x239', '\x23A', '\x5', '\x9E', 'P', '\x2', '\x23A', '\x23B', 
		'\a', 'K', '\x2', '\x2', '\x23B', '\x23C', '\a', 'T', '\x2', '\x2', '\x23C', 
		'\x23E', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x239', '\x3', '\x2', '\x2', 
		'\x2', '\x23E', '\x241', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x23D', 
		'\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', 
		'\x240', '\x242', '\x3', '\x2', '\x2', '\x2', '\x241', '\x23F', '\x3', 
		'\x2', '\x2', '\x2', '\x242', '\x244', '\x5', '\x9E', 'P', '\x2', '\x243', 
		'\x245', '\a', 'K', '\x2', '\x2', '\x244', '\x243', '\x3', '\x2', '\x2', 
		'\x2', '\x244', '\x245', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '\x246', '\x247', '\x5', '\xBC', '_', '\x2', 
		'\x247', 'g', '\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\x5', 'j', 
		'\x36', '\x2', '\x249', '\x24A', '\x5', '\xBC', '_', '\x2', '\x24A', '\x24C', 
		'\x3', '\x2', '\x2', '\x2', '\x24B', '\x248', '\x3', '\x2', '\x2', '\x2', 
		'\x24C', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24B', '\x3', 
		'\x2', '\x2', '\x2', '\x24D', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x250', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x24D', '\x3', '\x2', '\x2', 
		'\x2', '\x250', '\x251', '\x5', 'j', '\x36', '\x2', '\x251', '\x252', 
		'\x5', '\xBC', '_', '\x2', '\x252', 'i', '\x3', '\x2', '\x2', '\x2', '\x253', 
		'\x254', '\x5', '\xC2', '\x62', '\x2', '\x254', '\x256', '\x5', '\x9E', 
		'P', '\x2', '\x255', '\x257', '\x5', 'l', '\x37', '\x2', '\x256', '\x255', 
		'\x3', '\x2', '\x2', '\x2', '\x256', '\x257', '\x3', '\x2', '\x2', '\x2', 
		'\x257', 'k', '\x3', '\x2', '\x2', '\x2', '\x258', '\x259', '\a', 'T', 
		'\x2', '\x2', '\x259', '\x25A', '\a', '\x33', '\x2', '\x2', '\x25A', '\x25B', 
		'\a', 'T', '\x2', '\x2', '\x25B', '\x25C', '\x5', '.', '\x18', '\x2', 
		'\x25C', 'm', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x26A', '\x5', '|', 
		'?', '\x2', '\x25E', '\x26A', '\a', '\r', '\x2', '\x2', '\x25F', '\x26A', 
		'\a', '\f', '\x2', '\x2', '\x260', '\x26A', '\a', '\v', '\x2', '\x2', 
		'\x261', '\x26A', '\a', '\b', '\x2', '\x2', '\x262', '\x26A', '\a', '\n', 
		'\x2', '\x2', '\x263', '\x26A', '\a', '\t', '\x2', '\x2', '\x264', '\x26A', 
		'\a', '\a', '\x2', '\x2', '\x265', '\x26A', '\a', '\x4', '\x2', '\x2', 
		'\x266', '\x26A', '\a', '\x6', '\x2', '\x2', '\x267', '\x26A', '\a', '\x5', 
		'\x2', '\x2', '\x268', '\x26A', '\a', '\x3', '\x2', '\x2', '\x269', '\x25D', 
		'\x3', '\x2', '\x2', '\x2', '\x269', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x269', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x269', '\x260', '\x3', 
		'\x2', '\x2', '\x2', '\x269', '\x261', '\x3', '\x2', '\x2', '\x2', '\x269', 
		'\x262', '\x3', '\x2', '\x2', '\x2', '\x269', '\x263', '\x3', '\x2', '\x2', 
		'\x2', '\x269', '\x264', '\x3', '\x2', '\x2', '\x2', '\x269', '\x265', 
		'\x3', '\x2', '\x2', '\x2', '\x269', '\x266', '\x3', '\x2', '\x2', '\x2', 
		'\x269', '\x267', '\x3', '\x2', '\x2', '\x2', '\x269', '\x268', '\x3', 
		'\x2', '\x2', '\x2', '\x26A', 'o', '\x3', '\x2', '\x2', '\x2', '\x26B', 
		'\x26D', '\x5', '\x94', 'K', '\x2', '\x26C', '\x26E', '\x5', '\x8E', 'H', 
		'\x2', '\x26D', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', 
		'\x3', '\x2', '\x2', '\x2', '\x26E', '\x26F', '\x3', '\x2', '\x2', '\x2', 
		'\x26F', '\x270', '\x5', 't', ';', '\x2', '\x270', '\x271', '\a', 'T', 
		'\x2', '\x2', '\x271', '\x272', '\a', ',', '\x2', '\x2', '\x272', '\x273', 
		'\x5', '\xBC', '_', '\x2', '\x273', 'q', '\x3', '\x2', '\x2', '\x2', '\x274', 
		'\x276', '\x5', '\x94', 'K', '\x2', '\x275', '\x277', '\x5', '\x8E', 'H', 
		'\x2', '\x276', '\x275', '\x3', '\x2', '\x2', '\x2', '\x276', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '\x277', '\x278', '\x3', '\x2', '\x2', '\x2', 
		'\x278', '\x279', '\a', 'T', '\x2', '\x2', '\x279', '\x27A', '\a', '\x33', 
		'\x2', '\x2', '\x27A', '\x27B', '\a', 'T', '\x2', '\x2', '\x27B', '\x27C', 
		'\x5', 'v', '<', '\x2', '\x27C', '\x27D', '\x5', '\xBC', '_', '\x2', '\x27D', 
		's', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\a', 'G', '\x2', '\x2', 
		'\x27F', '\x280', '\a', 'T', '\x2', '\x2', '\x280', '\x281', '\x5', 'v', 
		'<', '\x2', '\x281', 'u', '\x3', '\x2', '\x2', '\x2', '\x282', '\x284', 
		'\x5', 'x', '=', '\x2', '\x283', '\x285', '\a', 'N', '\x2', '\x2', '\x284', 
		'\x283', '\x3', '\x2', '\x2', '\x2', '\x284', '\x285', '\x3', '\x2', '\x2', 
		'\x2', '\x285', '\x287', '\x3', '\x2', '\x2', '\x2', '\x286', '\x288', 
		'\a', '\x46', '\x2', '\x2', '\x287', '\x286', '\x3', '\x2', '\x2', '\x2', 
		'\x287', '\x288', '\x3', '\x2', '\x2', '\x2', '\x288', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x289', '\x28F', '\x5', 'z', '>', '\x2', '\x28A', '\x28C', 
		'\x5', '\x94', 'K', '\x2', '\x28B', '\x28D', '\x5', '\x86', '\x44', '\x2', 
		'\x28C', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28D', '\x3', 
		'\x2', '\x2', '\x2', '\x28D', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x28E', 
		'\x289', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x28A', '\x3', '\x2', '\x2', 
		'\x2', '\x28F', 'y', '\x3', '\x2', '\x2', '\x2', '\x290', '\x29F', '\x5', 
		'|', '?', '\x2', '\x291', '\x29F', '\x5', '~', '@', '\x2', '\x292', '\x29F', 
		'\a', '\xE', '\x2', '\x2', '\x293', '\x29F', '\a', '\r', '\x2', '\x2', 
		'\x294', '\x29F', '\a', '\f', '\x2', '\x2', '\x295', '\x29F', '\a', '\v', 
		'\x2', '\x2', '\x296', '\x29F', '\a', '\b', '\x2', '\x2', '\x297', '\x29F', 
		'\a', '\n', '\x2', '\x2', '\x298', '\x29F', '\a', '\t', '\x2', '\x2', 
		'\x299', '\x29F', '\a', '\a', '\x2', '\x2', '\x29A', '\x29F', '\a', '\x4', 
		'\x2', '\x2', '\x29B', '\x29F', '\a', '\x6', '\x2', '\x2', '\x29C', '\x29F', 
		'\a', '\x5', '\x2', '\x2', '\x29D', '\x29F', '\a', '\x3', '\x2', '\x2', 
		'\x29E', '\x290', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x291', '\x3', 
		'\x2', '\x2', '\x2', '\x29E', '\x292', '\x3', '\x2', '\x2', '\x2', '\x29E', 
		'\x293', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x294', '\x3', '\x2', '\x2', 
		'\x2', '\x29E', '\x295', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x296', 
		'\x3', '\x2', '\x2', '\x2', '\x29E', '\x297', '\x3', '\x2', '\x2', '\x2', 
		'\x29E', '\x298', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x299', '\x3', 
		'\x2', '\x2', '\x2', '\x29E', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29E', 
		'\x29B', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x29C', '\x3', '\x2', '\x2', 
		'\x2', '\x29E', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x29F', '{', '\x3', 
		'\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\a', '\xF', '\x2', '\x2', '\x2A1', 
		'\x2A2', '\x5', '\x8A', '\x46', '\x2', '\x2A2', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x2A3', '\x2A4', '\a', '\x10', '\x2', '\x2', '\x2A4', '\x2A5', 
		'\x5', '\x8C', 'G', '\x2', '\x2A5', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x2A6', '\x2A7', '\a', '\x11', '\x2', '\x2', '\x2A7', '\x2A8', '\x5', 
		'\x8C', 'G', '\x2', '\x2A8', '\x81', '\x3', '\x2', '\x2', '\x2', '\x2A9', 
		'\x2AA', '\a', '\x12', '\x2', '\x2', '\x2AA', '\x2AB', '\x5', '\x8C', 
		'G', '\x2', '\x2AB', '\x83', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AD', 
		'\a', '\x13', '\x2', '\x2', '\x2AD', '\x2AE', '\x5', '\x8C', 'G', '\x2', 
		'\x2AE', '\x85', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B0', '\a', '\x36', 
		'\x2', '\x2', '\x2B0', '\x2B6', '\x5', '\x88', '\x45', '\x2', '\x2B1', 
		'\x2B2', '\a', 'K', '\x2', '\x2', '\x2B2', '\x2B3', '\a', 'T', '\x2', 
		'\x2', '\x2B3', '\x2B5', '\x5', '\x88', '\x45', '\x2', '\x2B4', '\x2B1', 
		'\x3', '\x2', '\x2', '\x2', '\x2B5', '\x2B8', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B7', '\x3', 
		'\x2', '\x2', '\x2', '\x2B7', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2B8', 
		'\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BA', '\a', '\x35', '\x2', 
		'\x2', '\x2BA', '\x87', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BF', 
		'\x5', 'v', '<', '\x2', '\x2BC', '\x2BF', '\x5', '\xA6', 'T', '\x2', '\x2BD', 
		'\x2BF', '\x5', '\xA4', 'S', '\x2', '\x2BE', '\x2BB', '\x3', '\x2', '\x2', 
		'\x2', '\x2BE', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BD', 
		'\x3', '\x2', '\x2', '\x2', '\x2BF', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x2C0', '\x2C1', '\a', '\x36', '\x2', '\x2', '\x2C1', '\x2C2', '\x5', 
		'\xA8', 'U', '\x2', '\x2C2', '\x2C3', '\a', '\x35', '\x2', '\x2', '\x2C3', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C5', '\a', '\x36', '\x2', 
		'\x2', '\x2C5', '\x2C6', '\x5', 'v', '<', '\x2', '\x2C6', '\x2C7', '\a', 
		'\x35', '\x2', '\x2', '\x2C7', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x2C8', 
		'\x2C9', '\a', '\x36', '\x2', '\x2', '\x2C9', '\x2CF', '\x5', '\x92', 
		'J', '\x2', '\x2CA', '\x2CB', '\a', 'K', '\x2', '\x2', '\x2CB', '\x2CC', 
		'\a', 'T', '\x2', '\x2', '\x2CC', '\x2CE', '\x5', '\x92', 'J', '\x2', 
		'\x2CD', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2D1', '\x3', 
		'\x2', '\x2', '\x2', '\x2CF', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CF', 
		'\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D2', '\x3', '\x2', '\x2', 
		'\x2', '\x2D1', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D3', 
		'\a', '\x35', '\x2', '\x2', '\x2D3', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x2D4', '\x2D5', '\x5', '\x98', 'M', '\x2', '\x2D5', '\x2D6', '\x5', 
		't', ';', '\x2', '\x2D6', '\x91', '\x3', '\x2', '\x2', '\x2', '\x2D7', 
		'\x2DA', '\x5', '\x90', 'I', '\x2', '\x2D8', '\x2DA', '\x5', 'x', '=', 
		'\x2', '\x2D9', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2D8', 
		'\x3', '\x2', '\x2', '\x2', '\x2DA', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x2DB', '\x2DC', '\a', 'R', '\x2', '\x2', '\x2DC', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x2DD', '\x2DE', '\a', 'S', '\x2', '\x2', '\x2DE', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E0', '\a', 'S', '\x2', '\x2', 
		'\x2E0', '\x99', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E2', '\t', '\x2', 
		'\x2', '\x2', '\x2E2', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E4', 
		'\t', '\x2', '\x2', '\x2', '\x2E4', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x2E5', '\x2E6', '\t', '\x2', '\x2', '\x2', '\x2E6', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\x2E7', '\x2E8', '\t', '\x2', '\x2', '\x2', '\x2E8', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EA', '\a', ',', '\x2', '\x2', 
		'\x2EA', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2EC', '\t', '\x3', 
		'\x2', '\x2', '\x2EC', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2F0', 
		'\x5', '\xA8', 'U', '\x2', '\x2EE', '\x2F0', '\x5', '\xC0', '\x61', '\x2', 
		'\x2EF', '\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2EE', '\x3', 
		'\x2', '\x2', '\x2', '\x2F0', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x2F1', 
		'\x2F2', '\t', '\x4', '\x2', '\x2', '\x2F2', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x2F3', '\x2F4', '\t', '\x5', '\x2', '\x2', '\x2F4', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\x2F5', '\x2F6', '\a', '.', '\x2', '\x2', '\x2F6', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F8', '\t', '\x6', '\x2', 
		'\x2', '\x2F8', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FA', 
		'\a', '+', '\x2', '\x2', '\x2FA', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\x2FB', '\x2FC', '\t', '\a', '\x2', '\x2', '\x2FC', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\x2FD', '\x2FE', '\t', '\b', '\x2', '\x2', '\x2FE', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\x2FF', '\x300', '\a', '<', '\x2', '\x2', 
		'\x300', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x301', '\x302', '\a', '\x33', 
		'\x2', '\x2', '\x302', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x303', '\x305', 
		'\a', 'V', '\x2', '\x2', '\x304', '\x303', '\x3', '\x2', '\x2', '\x2', 
		'\x304', '\x305', '\x3', '\x2', '\x2', '\x2', '\x305', '\x307', '\x3', 
		'\x2', '\x2', '\x2', '\x306', '\x308', '\a', 'W', '\x2', '\x2', '\x307', 
		'\x306', '\x3', '\x2', '\x2', '\x2', '\x308', '\x309', '\x3', '\x2', '\x2', 
		'\x2', '\x309', '\x307', '\x3', '\x2', '\x2', '\x2', '\x309', '\x30A', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\x30B', '\x30D', '\a', 'V', '\x2', '\x2', '\x30C', '\x30B', '\x3', '\x2', 
		'\x2', '\x2', '\x30C', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x30D', '\x30F', 
		'\x3', '\x2', '\x2', '\x2', '\x30E', '\x310', '\a', '!', '\x2', '\x2', 
		'\x30F', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x30F', '\x310', '\x3', 
		'\x2', '\x2', '\x2', '\x310', '\x311', '\x3', '\x2', '\x2', '\x2', '\x311', 
		'\x312', '\a', 'W', '\x2', '\x2', '\x312', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\x313', '\x315', '\a', 'V', '\x2', '\x2', '\x314', '\x313', '\x3', 
		'\x2', '\x2', '\x2', '\x314', '\x315', '\x3', '\x2', '\x2', '\x2', '\x315', 
		'\x316', '\x3', '\x2', '\x2', '\x2', '\x316', '\x317', '\a', '!', '\x2', 
		'\x2', '\x317', '\x318', '\a', 'W', '\x2', '\x2', '\x318', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\x319', '\x31A', '\a', '(', '\x2', '\x2', '\x31A', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x31C', '\a', 'V', '\x2', 
		'\x2', '\x31C', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x42', '\xC7', '\xCD', 
		'\xD5', '\xDA', '\xE2', '\xE4', '\xE9', '\xF3', '\x104', '\x10F', '\x115', 
		'\x137', '\x149', '\x14D', '\x155', '\x15A', '\x168', '\x176', '\x178', 
		'\x17E', '\x18A', '\x194', '\x199', '\x1A1', '\x1AB', '\x1B2', '\x1B7', 
		'\x1BE', '\x1C2', '\x1CD', '\x1D4', '\x1E0', '\x1E5', '\x1E9', '\x1F1', 
		'\x1F9', '\x200', '\x21B', '\x21E', '\x226', '\x231', '\x236', '\x23F', 
		'\x244', '\x24D', '\x256', '\x269', '\x26D', '\x276', '\x284', '\x287', 
		'\x28C', '\x28E', '\x29E', '\x2B6', '\x2BE', '\x2CF', '\x2D9', '\x2EF', 
		'\x304', '\x309', '\x30C', '\x30F', '\x314',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Zsharp.Parser
