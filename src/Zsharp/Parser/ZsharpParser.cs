//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\My\MyProjects\Zsharp\src\Zsharp\Zsharp.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Maja.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ZsharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MODULE=1, IMPORT=2, EXPORT=3, LOOP=4, BREAK=5, CONTINUE=6, IF=7, ELSE=8, 
		RETURN=9, IN=10, SELF=11, TRUE=12, FALSE=13, COMMENT=14, NUMBERbin=15, 
		NUMBERoct=16, NUMBERdec=17, NUMBERdec_prefix=18, NUMBERhex=19, CHARACTER=20, 
		STRING=21, AND=22, OR=23, NOT=24, UNUSED=25, PLUS=26, MINUS_NEG=27, MULT_PTR=28, 
		DIV=29, MOD=30, POW=31, EQ_ASSIGN=32, NEQ=33, GREAT_ANGLEclose=34, SMALL_ANGLEopen=35, 
		GREQ=36, SMEQ=37, BIT_AND=38, BIT_OR=39, BIT_XOR_IMM=40, BIT_NOT=41, BIT_SHL=42, 
		BIT_ROLL=43, BIT_ROLR=44, CONCAT=45, SUBopen=46, SUBclose=47, PARENopen=48, 
		PARENclose=49, QUESTION=50, COLON=51, DOT=52, RANGE=53, SPREAD=54, COMMA=55, 
		COMPTIME=56, COMPTIME_DEF=57, ERROR=58, STR_QUOTE=59, CHAR_QUOTE=60, COMMENTstart=61, 
		IDENTIFIERupper=62, IDENTIFIERlower=63, SP=64, TAB=65, INDENT=66, EOL=67;
	public const int
		RULE_file = 0, RULE_header = 1, RULE_source = 2, RULE_codeblock = 3, RULE_module_statement = 4, 
		RULE_module_name = 5, RULE_module_namespace = 6, RULE_statement_module = 7, 
		RULE_statement_import = 8, RULE_statement_export = 9, RULE_statement_export_inline = 10, 
		RULE_flow_statement = 11, RULE_statement_return = 12, RULE_statement_if = 13, 
		RULE_statement_else = 14, RULE_statement_elseif = 15, RULE_statement_break = 16, 
		RULE_statement_continue = 17, RULE_statement_loop = 18, RULE_statement_loop_infinite = 19, 
		RULE_statement_loop_iteration = 20, RULE_statement_loop_while = 21, RULE_definition_top = 22, 
		RULE_definition = 23, RULE_expression_value = 24, RULE_comptime_expression_value = 25, 
		RULE_expression_arithmetic = 26, RULE_arithmetic_operand = 27, RULE_expression_logic = 28, 
		RULE_logic_operand = 29, RULE_expression_comparison = 30, RULE_comparison_operand = 31, 
		RULE_expression_bool = 32, RULE_expression_iteration = 33, RULE_function_def = 34, 
		RULE_function_parameter_list = 35, RULE_function_parameter = 36, RULE_function_parameter_self = 37, 
		RULE_function_return_type = 38, RULE_function_use = 39, RULE_function_call = 40, 
		RULE_function_parameter_uselist = 41, RULE_function_param_use = 42, RULE_function_call_retval_unused = 43, 
		RULE_function_call_self = 44, RULE_variable_def_top = 45, RULE_variable_def = 46, 
		RULE_variable_def_typed = 47, RULE_variable_assign_value = 48, RULE_variable_assign_struct = 49, 
		RULE_variable_ref = 50, RULE_variable_field_ref = 51, RULE_struct_def = 52, 
		RULE_struct_field_def_list = 53, RULE_struct_field_def = 54, RULE_struct_field_init = 55, 
		RULE_enum_def = 56, RULE_enum_option_def_listline = 57, RULE_enum_option_def_list = 58, 
		RULE_enum_option_def = 59, RULE_enum_option_value = 60, RULE_enum_option_use = 61, 
		RULE_type_def = 62, RULE_type_alias = 63, RULE_type_ref_use = 64, RULE_type_ref = 65, 
		RULE_type_name = 66, RULE_template_param_list_use = 67, RULE_template_param_use = 68, 
		RULE_template_param_list = 69, RULE_template_param_var = 70, RULE_template_param_any = 71, 
		RULE_range = 72, RULE_range_begin = 73, RULE_range_end = 74, RULE_range_step = 75, 
		RULE_alias_module = 76, RULE_identifier_template_param = 77, RULE_identifier_type = 78, 
		RULE_identifier_var = 79, RULE_identifier_param = 80, RULE_identifier_func = 81, 
		RULE_identifier_field = 82, RULE_identifier_enumoption = 83, RULE_identifier_module = 84, 
		RULE_identifier_unused = 85, RULE_literal_bool = 86, RULE_literal = 87, 
		RULE_number = 88, RULE_operator_arithmetic = 89, RULE_operator_arithmetic_unary = 90, 
		RULE_operator_logic = 91, RULE_operator_logic_unary = 92, RULE_operator_comparison = 93, 
		RULE_operator_bits = 94, RULE_operator_bits_unary = 95, RULE_operator_assignment = 96, 
		RULE_empty_line = 97, RULE_newline = 98, RULE_comment = 99, RULE_string = 100, 
		RULE_indent = 101;
	public static readonly string[] ruleNames = {
		"file", "header", "source", "codeblock", "module_statement", "module_name", 
		"module_namespace", "statement_module", "statement_import", "statement_export", 
		"statement_export_inline", "flow_statement", "statement_return", "statement_if", 
		"statement_else", "statement_elseif", "statement_break", "statement_continue", 
		"statement_loop", "statement_loop_infinite", "statement_loop_iteration", 
		"statement_loop_while", "definition_top", "definition", "expression_value", 
		"comptime_expression_value", "expression_arithmetic", "arithmetic_operand", 
		"expression_logic", "logic_operand", "expression_comparison", "comparison_operand", 
		"expression_bool", "expression_iteration", "function_def", "function_parameter_list", 
		"function_parameter", "function_parameter_self", "function_return_type", 
		"function_use", "function_call", "function_parameter_uselist", "function_param_use", 
		"function_call_retval_unused", "function_call_self", "variable_def_top", 
		"variable_def", "variable_def_typed", "variable_assign_value", "variable_assign_struct", 
		"variable_ref", "variable_field_ref", "struct_def", "struct_field_def_list", 
		"struct_field_def", "struct_field_init", "enum_def", "enum_option_def_listline", 
		"enum_option_def_list", "enum_option_def", "enum_option_value", "enum_option_use", 
		"type_def", "type_alias", "type_ref_use", "type_ref", "type_name", "template_param_list_use", 
		"template_param_use", "template_param_list", "template_param_var", "template_param_any", 
		"range", "range_begin", "range_end", "range_step", "alias_module", "identifier_template_param", 
		"identifier_type", "identifier_var", "identifier_param", "identifier_func", 
		"identifier_field", "identifier_enumoption", "identifier_module", "identifier_unused", 
		"literal_bool", "literal", "number", "operator_arithmetic", "operator_arithmetic_unary", 
		"operator_logic", "operator_logic_unary", "operator_comparison", "operator_bits", 
		"operator_bits_unary", "operator_assignment", "empty_line", "newline", 
		"comment", "string", "indent"
	};

	private static readonly string[] _LiteralNames = {
		null, "'module'", "'import'", "'export'", "'loop'", "'break'", "'continue'", 
		"'if'", "'else'", "'return'", "'in'", "'self'", "'true'", "'false'", null, 
		null, null, null, null, null, null, null, "'and'", "'or'", "'not'", "'_'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'**'", "'='", "'<>'", "'>'", "'<'", 
		"'>='", "'<='", "'&'", "'|'", "'^'", "'~'", "'<<'", "'|<'", "'>|'", "'&&'", 
		"'['", "']'", "'('", "')'", "'?'", "':'", "'.'", "'..'", "'...'", "','", 
		"'#'", "'#!'", "'!'", "'\"'", "'''", "'//'", null, null, "' '", "'\t'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MODULE", "IMPORT", "EXPORT", "LOOP", "BREAK", "CONTINUE", "IF", 
		"ELSE", "RETURN", "IN", "SELF", "TRUE", "FALSE", "COMMENT", "NUMBERbin", 
		"NUMBERoct", "NUMBERdec", "NUMBERdec_prefix", "NUMBERhex", "CHARACTER", 
		"STRING", "AND", "OR", "NOT", "UNUSED", "PLUS", "MINUS_NEG", "MULT_PTR", 
		"DIV", "MOD", "POW", "EQ_ASSIGN", "NEQ", "GREAT_ANGLEclose", "SMALL_ANGLEopen", 
		"GREQ", "SMEQ", "BIT_AND", "BIT_OR", "BIT_XOR_IMM", "BIT_NOT", "BIT_SHL", 
		"BIT_ROLL", "BIT_ROLR", "CONCAT", "SUBopen", "SUBclose", "PARENopen", 
		"PARENclose", "QUESTION", "COLON", "DOT", "RANGE", "SPREAD", "COMMA", 
		"COMPTIME", "COMPTIME_DEF", "ERROR", "STR_QUOTE", "CHAR_QUOTE", "COMMENTstart", 
		"IDENTIFIERupper", "IDENTIFIERlower", "SP", "TAB", "INDENT", "EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Zsharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ZsharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ZsharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ZsharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ZsharpParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HeaderContext[] header() {
			return GetRuleContexts<HeaderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeaderContext header(int i) {
			return GetRuleContext<HeaderContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceContext[] source() {
			return GetRuleContexts<SourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceContext source(int i) {
			return GetRuleContext<SourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(ZsharpParser.INDENT, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 204;
					header();
					}
					} 
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 213;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 210;
					source();
					}
					} 
				}
				State = 215;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 216;
				Match(INDENT);
				}
			}

			State = 219;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Module_statementContext module_statement() {
			return GetRuleContext<Module_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_lineContext empty_line() {
			return GetRuleContext<Empty_lineContext>(0);
		}
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 2, RULE_header);
		try {
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 221;
				module_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222;
				comment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 223;
				empty_line();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Definition_topContext definition_top() {
			return GetRuleContext<Definition_topContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_useContext function_use() {
			return GetRuleContext<Function_useContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_lineContext empty_line() {
			return GetRuleContext<Empty_lineContext>(0);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(Context, State);
		EnterRule(_localctx, 4, RULE_source);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226;
				definition_top();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				function_use();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 228;
				comment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 229;
				empty_line();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Flow_statementContext[] flow_statement() {
			return GetRuleContexts<Flow_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Flow_statementContext flow_statement(int i) {
			return GetRuleContext<Flow_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_useContext[] function_use() {
			return GetRuleContexts<Function_useContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_useContext function_use(int i) {
			return GetRuleContext<Function_useContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_lineContext[] empty_line() {
			return GetRuleContexts<Empty_lineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_lineContext empty_line(int i) {
			return GetRuleContext<Empty_lineContext>(i);
		}
		public CodeblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockContext codeblock() {
		CodeblockContext _localctx = new CodeblockContext(Context, State);
		EnterRule(_localctx, 6, RULE_codeblock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 237;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						State = 232;
						flow_statement();
						}
						break;
					case 2:
						{
						State = 233;
						function_use();
						}
						break;
					case 3:
						{
						State = 234;
						definition();
						}
						break;
					case 4:
						{
						State = 235;
						comment();
						}
						break;
					case 5:
						{
						State = 236;
						empty_line();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_moduleContext statement_module() {
			return GetRuleContext<Statement_moduleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_importContext statement_import() {
			return GetRuleContext<Statement_importContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_exportContext statement_export() {
			return GetRuleContext<Statement_exportContext>(0);
		}
		public Module_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_statementContext module_statement() {
		Module_statementContext _localctx = new Module_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_module_statement);
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241;
				statement_module();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242;
				statement_import();
				}
				break;
			case EXPORT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 243;
				statement_export();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_moduleContext identifier_module() {
			return GetRuleContext<Identifier_moduleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ZsharpParser.DOT, 0); }
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		return module_name(0);
	}

	private Module_nameContext module_name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Module_nameContext _localctx = new Module_nameContext(Context, _parentState);
		Module_nameContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_module_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 247;
			identifier_module();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 254;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Module_nameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_module_name);
					State = 249;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 250;
					Match(DOT);
					State = 251;
					identifier_module();
					}
					} 
				}
				State = 256;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Module_namespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ZsharpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_PTR() { return GetToken(ZsharpParser.MULT_PTR, 0); }
		public Module_namespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_namespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_namespaceContext module_namespace() {
		Module_namespaceContext _localctx = new Module_namespaceContext(Context, State);
		EnterRule(_localctx, 12, RULE_module_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			module_name(0);
			State = 258;
			Match(DOT);
			State = 259;
			Match(MULT_PTR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_moduleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(ZsharpParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Statement_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_module(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_moduleContext statement_module() {
		Statement_moduleContext _localctx = new Statement_moduleContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(MODULE);
			State = 262;
			Match(SP);
			State = 263;
			module_name(0);
			State = 264;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_importContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(ZsharpParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_namespaceContext module_namespace() {
			return GetRuleContext<Module_namespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_moduleContext alias_module() {
			return GetRuleContext<Alias_moduleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		public Statement_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_import; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_importContext statement_import() {
		Statement_importContext _localctx = new Statement_importContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement_import);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(IMPORT);
			State = 267;
			Match(SP);
			State = 277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				{
				State = 273;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 268;
					alias_module();
					State = 269;
					Match(SP);
					State = 270;
					Match(EQ_ASSIGN);
					State = 271;
					Match(SP);
					}
					break;
				}
				State = 275;
				module_name(0);
				}
				}
				break;
			case 2:
				{
				State = 276;
				module_namespace();
				}
				break;
			}
			State = 279;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_exportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(ZsharpParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_funcContext identifier_func() {
			return GetRuleContext<Identifier_funcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		public Statement_exportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_export; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_export(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_exportContext statement_export() {
		Statement_exportContext _localctx = new Statement_exportContext(Context, State);
		EnterRule(_localctx, 18, RULE_statement_export);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(EXPORT);
			State = 282;
			Match(SP);
			State = 285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 283;
				identifier_func();
				}
				break;
			case 2:
				{
				State = 284;
				identifier_type();
				}
				break;
			}
			State = 287;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_export_inlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(ZsharpParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_defContext type_def() {
			return GetRuleContext<Type_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_defContext struct_def() {
			return GetRuleContext<Struct_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_defContext enum_def() {
			return GetRuleContext<Enum_defContext>(0);
		}
		public Statement_export_inlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_export_inline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_export_inline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_export_inlineContext statement_export_inline() {
		Statement_export_inlineContext _localctx = new Statement_export_inlineContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement_export_inline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(EXPORT);
			State = 290;
			Match(SP);
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 291;
				function_def();
				}
				break;
			case 2:
				{
				State = 292;
				type_def();
				}
				break;
			case 3:
				{
				State = 293;
				struct_def();
				}
				break;
			case 4:
				{
				State = 294;
				enum_def();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flow_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_ifContext statement_if() {
			return GetRuleContext<Statement_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_elseContext statement_else() {
			return GetRuleContext<Statement_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_elseifContext statement_elseif() {
			return GetRuleContext<Statement_elseifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_loopContext statement_loop() {
			return GetRuleContext<Statement_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_returnContext statement_return() {
			return GetRuleContext<Statement_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_breakContext statement_break() {
			return GetRuleContext<Statement_breakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_continueContext statement_continue() {
			return GetRuleContext<Statement_continueContext>(0);
		}
		public Flow_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flow_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlow_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flow_statementContext flow_statement() {
		Flow_statementContext _localctx = new Flow_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_flow_statement);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 297;
				statement_if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 298;
				statement_else();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 299;
				statement_elseif();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 300;
				statement_loop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 301;
				statement_return();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 302;
				statement_break();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 303;
				statement_continue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ZsharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_valueContext expression_value() {
			return GetRuleContext<Expression_valueContext>(0);
		}
		public Statement_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_returnContext statement_return() {
		Statement_returnContext _localctx = new Statement_returnContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			indent();
			State = 307;
			Match(RETURN);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 308;
				Match(SP);
				State = 309;
				expression_value();
				}
			}

			State = 312;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ZsharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_logicContext expression_logic() {
			return GetRuleContext<Expression_logicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public Statement_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_ifContext statement_if() {
		Statement_ifContext _localctx = new Statement_ifContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			indent();
			State = 315;
			Match(IF);
			State = 316;
			Match(SP);
			State = 317;
			expression_logic(0);
			State = 318;
			newline();
			State = 319;
			codeblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ZsharpParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public Statement_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_elseContext statement_else() {
		Statement_elseContext _localctx = new Statement_elseContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			indent();
			State = 322;
			Match(ELSE);
			State = 323;
			newline();
			State = 324;
			codeblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_elseifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ZsharpParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ZsharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_logicContext expression_logic() {
			return GetRuleContext<Expression_logicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public Statement_elseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_elseif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_elseif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_elseifContext statement_elseif() {
		Statement_elseifContext _localctx = new Statement_elseifContext(Context, State);
		EnterRule(_localctx, 30, RULE_statement_elseif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			indent();
			State = 327;
			Match(ELSE);
			State = 328;
			Match(SP);
			State = 329;
			Match(IF);
			State = 330;
			Match(SP);
			State = 331;
			expression_logic(0);
			State = 332;
			newline();
			State = 333;
			codeblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_breakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(ZsharpParser.BREAK, 0); }
		public Statement_breakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_break; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_break(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_breakContext statement_break() {
		Statement_breakContext _localctx = new Statement_breakContext(Context, State);
		EnterRule(_localctx, 32, RULE_statement_break);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			indent();
			State = 336;
			Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_continueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(ZsharpParser.CONTINUE, 0); }
		public Statement_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_continue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_continue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_continueContext statement_continue() {
		Statement_continueContext _localctx = new Statement_continueContext(Context, State);
		EnterRule(_localctx, 34, RULE_statement_continue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			indent();
			State = 339;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_loop_infiniteContext statement_loop_infinite() {
			return GetRuleContext<Statement_loop_infiniteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_loop_iterationContext statement_loop_iteration() {
			return GetRuleContext<Statement_loop_iterationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_loop_whileContext statement_loop_while() {
			return GetRuleContext<Statement_loop_whileContext>(0);
		}
		public Statement_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_loopContext statement_loop() {
		Statement_loopContext _localctx = new Statement_loopContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			indent();
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 342;
				statement_loop_infinite();
				}
				break;
			case 2:
				{
				State = 343;
				statement_loop_iteration();
				}
				break;
			case 3:
				{
				State = 344;
				statement_loop_while();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_loop_infiniteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(ZsharpParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public Statement_loop_infiniteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_loop_infinite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_loop_infinite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_loop_infiniteContext statement_loop_infinite() {
		Statement_loop_infiniteContext _localctx = new Statement_loop_infiniteContext(Context, State);
		EnterRule(_localctx, 38, RULE_statement_loop_infinite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(LOOP);
			State = 348;
			newline();
			State = 349;
			codeblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_loop_iterationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(ZsharpParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_iterationContext expression_iteration() {
			return GetRuleContext<Expression_iterationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public Statement_loop_iterationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_loop_iteration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_loop_iteration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_loop_iterationContext statement_loop_iteration() {
		Statement_loop_iterationContext _localctx = new Statement_loop_iterationContext(Context, State);
		EnterRule(_localctx, 40, RULE_statement_loop_iteration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(LOOP);
			State = 352;
			Match(SP);
			State = 353;
			expression_iteration();
			State = 354;
			newline();
			State = 355;
			codeblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_loop_whileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(ZsharpParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_logicContext expression_logic() {
			return GetRuleContext<Expression_logicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public Statement_loop_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_loop_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_loop_while(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_loop_whileContext statement_loop_while() {
		Statement_loop_whileContext _localctx = new Statement_loop_whileContext(Context, State);
		EnterRule(_localctx, 42, RULE_statement_loop_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(LOOP);
			State = 358;
			Match(SP);
			State = 359;
			expression_logic(0);
			State = 360;
			newline();
			State = 361;
			codeblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definition_topContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_defContext enum_def() {
			return GetRuleContext<Enum_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_defContext struct_def() {
			return GetRuleContext<Struct_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_defContext type_def() {
			return GetRuleContext<Type_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_aliasContext type_alias() {
			return GetRuleContext<Type_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_def_topContext variable_def_top() {
			return GetRuleContext<Variable_def_topContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_export_inlineContext statement_export_inline() {
			return GetRuleContext<Statement_export_inlineContext>(0);
		}
		public Definition_topContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition_top; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition_top(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Definition_topContext definition_top() {
		Definition_topContext _localctx = new Definition_topContext(Context, State);
		EnterRule(_localctx, 44, RULE_definition_top);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 363;
				function_def();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364;
				enum_def();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 365;
				struct_def();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 366;
				type_def();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 367;
				type_alias();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 368;
				variable_def_top();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 369;
				statement_export_inline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_defContext variable_def() {
			return GetRuleContext<Variable_defContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 46, RULE_definition);
		try {
			State = 374;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIERupper:
			case IDENTIFIERlower:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				function_def();
				}
				break;
			case INDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				variable_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_useContext function_use() {
			return GetRuleContext<Function_useContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_refContext variable_ref() {
			return GetRuleContext<Variable_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_field_refContext variable_field_ref() {
			return GetRuleContext<Variable_field_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_option_useContext enum_option_use() {
			return GetRuleContext<Enum_option_useContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_boolContext expression_bool() {
			return GetRuleContext<Expression_boolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_arithmeticContext expression_arithmetic() {
			return GetRuleContext<Expression_arithmeticContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_logicContext expression_logic() {
			return GetRuleContext<Expression_logicContext>(0);
		}
		public Expression_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_valueContext expression_value() {
		Expression_valueContext _localctx = new Expression_valueContext(Context, State);
		EnterRule(_localctx, 48, RULE_expression_value);
		try {
			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376;
				number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377;
				@string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 378;
				function_use();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 379;
				variable_ref();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 380;
				variable_field_ref();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 381;
				enum_option_use();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 382;
				expression_bool();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 383;
				expression_arithmetic(0);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 384;
				expression_logic(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comptime_expression_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_boolContext expression_bool() {
			return GetRuleContext<Expression_boolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_option_useContext enum_option_use() {
			return GetRuleContext<Enum_option_useContext>(0);
		}
		public Comptime_expression_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comptime_expression_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComptime_expression_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comptime_expression_valueContext comptime_expression_value() {
		Comptime_expression_valueContext _localctx = new Comptime_expression_valueContext(Context, State);
		EnterRule(_localctx, 50, RULE_comptime_expression_value);
		try {
			State = 391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387;
				number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				@string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389;
				expression_bool();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 390;
				enum_option_use();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_arithmeticContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENopen() { return GetToken(ZsharpParser.PARENopen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_arithmeticContext[] expression_arithmetic() {
			return GetRuleContexts<Expression_arithmeticContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_arithmeticContext expression_arithmetic(int i) {
			return GetRuleContext<Expression_arithmeticContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENclose() { return GetToken(ZsharpParser.PARENclose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_arithmetic_unaryContext operator_arithmetic_unary() {
			return GetRuleContext<Operator_arithmetic_unaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_bits_unaryContext operator_bits_unary() {
			return GetRuleContext<Operator_bits_unaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_operandContext arithmetic_operand() {
			return GetRuleContext<Arithmetic_operandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_arithmeticContext operator_arithmetic() {
			return GetRuleContext<Operator_arithmeticContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_bitsContext operator_bits() {
			return GetRuleContext<Operator_bitsContext>(0);
		}
		public Expression_arithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_arithmetic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_arithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_arithmeticContext expression_arithmetic() {
		return expression_arithmetic(0);
	}

	private Expression_arithmeticContext expression_arithmetic(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_arithmeticContext _localctx = new Expression_arithmeticContext(Context, _parentState);
		Expression_arithmeticContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_expression_arithmetic, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARENopen:
				{
				State = 394;
				Match(PARENopen);
				State = 395;
				expression_arithmetic(0);
				State = 396;
				Match(PARENclose);
				}
				break;
			case MINUS_NEG:
				{
				State = 398;
				operator_arithmetic_unary();
				State = 399;
				expression_arithmetic(3);
				}
				break;
			case BIT_NOT:
				{
				State = 401;
				operator_bits_unary();
				State = 402;
				expression_arithmetic(2);
				}
				break;
			case SELF:
			case NUMBERbin:
			case NUMBERoct:
			case NUMBERdec:
			case NUMBERdec_prefix:
			case NUMBERhex:
			case CHARACTER:
			case UNUSED:
			case IDENTIFIERupper:
			case IDENTIFIERlower:
			case INDENT:
				{
				State = 404;
				arithmetic_operand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 421;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 419;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new Expression_arithmeticContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression_arithmetic);
						State = 407;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 408;
						Match(SP);
						State = 409;
						operator_arithmetic();
						State = 410;
						Match(SP);
						State = 411;
						expression_arithmetic(7);
						}
						break;
					case 2:
						{
						_localctx = new Expression_arithmeticContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression_arithmetic);
						State = 413;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 414;
						Match(SP);
						State = 415;
						operator_bits();
						State = 416;
						Match(SP);
						State = 417;
						expression_arithmetic(6);
						}
						break;
					}
					} 
				}
				State = 423;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Arithmetic_operandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_refContext variable_ref() {
			return GetRuleContext<Variable_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_useContext function_use() {
			return GetRuleContext<Function_useContext>(0);
		}
		public Arithmetic_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic_operand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_operandContext arithmetic_operand() {
		Arithmetic_operandContext _localctx = new Arithmetic_operandContext(Context, State);
		EnterRule(_localctx, 54, RULE_arithmetic_operand);
		try {
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 424;
				number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 425;
				variable_ref();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 426;
				function_use();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_logicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENopen() { return GetToken(ZsharpParser.PARENopen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_logicContext[] expression_logic() {
			return GetRuleContexts<Expression_logicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_logicContext expression_logic(int i) {
			return GetRuleContext<Expression_logicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENclose() { return GetToken(ZsharpParser.PARENclose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_logic_unaryContext operator_logic_unary() {
			return GetRuleContext<Operator_logic_unaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logic_operandContext logic_operand() {
			return GetRuleContext<Logic_operandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_logicContext operator_logic() {
			return GetRuleContext<Operator_logicContext>(0);
		}
		public Expression_logicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_logic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_logic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_logicContext expression_logic() {
		return expression_logic(0);
	}

	private Expression_logicContext expression_logic(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_logicContext _localctx = new Expression_logicContext(Context, _parentState);
		Expression_logicContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_expression_logic, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 430;
				Match(PARENopen);
				State = 431;
				expression_logic(0);
				State = 432;
				Match(PARENclose);
				}
				break;
			case 2:
				{
				State = 434;
				operator_logic_unary();
				State = 435;
				Match(SP);
				State = 436;
				expression_logic(2);
				}
				break;
			case 3:
				{
				State = 438;
				logic_operand();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 449;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_logicContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_logic);
					State = 441;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 442;
					Match(SP);
					State = 443;
					operator_logic();
					State = 444;
					Match(SP);
					State = 445;
					expression_logic(5);
					}
					} 
				}
				State = 451;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logic_operandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_boolContext expression_bool() {
			return GetRuleContext<Expression_boolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_comparisonContext expression_comparison() {
			return GetRuleContext<Expression_comparisonContext>(0);
		}
		public Logic_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic_operand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logic_operandContext logic_operand() {
		Logic_operandContext _localctx = new Logic_operandContext(Context, State);
		EnterRule(_localctx, 58, RULE_logic_operand);
		try {
			State = 454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 452;
				expression_bool();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 453;
				expression_comparison(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_comparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENopen() { return GetToken(ZsharpParser.PARENopen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_comparisonContext[] expression_comparison() {
			return GetRuleContexts<Expression_comparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_comparisonContext expression_comparison(int i) {
			return GetRuleContext<Expression_comparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENclose() { return GetToken(ZsharpParser.PARENclose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operandContext comparison_operand() {
			return GetRuleContext<Comparison_operandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_comparisonContext operator_comparison() {
			return GetRuleContext<Operator_comparisonContext>(0);
		}
		public Expression_comparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_comparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_comparisonContext expression_comparison() {
		return expression_comparison(0);
	}

	private Expression_comparisonContext expression_comparison(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_comparisonContext _localctx = new Expression_comparisonContext(Context, _parentState);
		Expression_comparisonContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expression_comparison, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 457;
				Match(PARENopen);
				State = 458;
				expression_comparison(0);
				State = 459;
				Match(PARENclose);
				}
				break;
			case 2:
				{
				State = 461;
				comparison_operand();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 472;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_comparisonContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_comparison);
					State = 464;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 465;
					Match(SP);
					State = 466;
					operator_comparison();
					State = 467;
					Match(SP);
					State = 468;
					expression_comparison(4);
					}
					} 
				}
				State = 474;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_operandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_useContext function_use() {
			return GetRuleContext<Function_useContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_refContext variable_ref() {
			return GetRuleContext<Variable_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_arithmeticContext expression_arithmetic() {
			return GetRuleContext<Expression_arithmeticContext>(0);
		}
		public Comparison_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operandContext comparison_operand() {
		Comparison_operandContext _localctx = new Comparison_operandContext(Context, State);
		EnterRule(_localctx, 62, RULE_comparison_operand);
		try {
			State = 479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				function_use();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				variable_ref();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 477;
				literal();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 478;
				expression_arithmetic(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_boolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_boolContext literal_bool() {
			return GetRuleContext<Literal_boolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_refContext variable_ref() {
			return GetRuleContext<Variable_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_useContext function_use() {
			return GetRuleContext<Function_useContext>(0);
		}
		public Expression_boolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_bool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_boolContext expression_bool() {
		Expression_boolContext _localctx = new Expression_boolContext(Context, State);
		EnterRule(_localctx, 64, RULE_expression_bool);
		try {
			State = 484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 481;
				literal_bool();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 482;
				variable_ref();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 483;
				function_use();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_iterationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_refContext variable_ref() {
			return GetRuleContext<Variable_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ZsharpParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_NEG() { return GetToken(ZsharpParser.MINUS_NEG, 0); }
		public Expression_iterationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_iteration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_iteration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_iterationContext expression_iteration() {
		Expression_iterationContext _localctx = new Expression_iterationContext(Context, State);
		EnterRule(_localctx, 66, RULE_expression_iteration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			variable_ref();
			State = 487;
			Match(SP);
			State = 488;
			Match(IN);
			State = 489;
			Match(SP);
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS_NEG) {
				{
				State = 490;
				Match(MINUS_NEG);
				}
			}

			State = 493;
			range();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_funcContext identifier_func() {
			return GetRuleContext<Identifier_funcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ZsharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENopen() { return GetToken(ZsharpParser.PARENopen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENclose() { return GetToken(ZsharpParser.PARENclose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_param_listContext template_param_list() {
			return GetRuleContext<Template_param_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameter_listContext function_parameter_list() {
			return GetRuleContext<Function_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_return_typeContext function_return_type() {
			return GetRuleContext<Function_return_typeContext>(0);
		}
		public Function_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_defContext function_def() {
		Function_defContext _localctx = new Function_defContext(Context, State);
		EnterRule(_localctx, 68, RULE_function_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			identifier_func();
			State = 496;
			Match(COLON);
			State = 497;
			Match(SP);
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SMALL_ANGLEopen) {
				{
				State = 498;
				template_param_list();
				}
			}

			State = 501;
			Match(PARENopen);
			State = 503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SELF || _la==IDENTIFIERlower) {
				{
				State = 502;
				function_parameter_list();
				}
			}

			State = 505;
			Match(PARENclose);
			State = 507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 506;
				function_return_type();
				}
			}

			State = 509;
			newline();
			State = 510;
			codeblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameterContext[] function_parameter() {
			return GetRuleContexts<Function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameterContext function_parameter(int i) {
			return GetRuleContext<Function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameter_selfContext function_parameter_self() {
			return GetRuleContext<Function_parameter_selfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZsharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZsharpParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameter_listContext function_parameter_list() {
		Function_parameter_listContext _localctx = new Function_parameter_listContext(Context, State);
		EnterRule(_localctx, 70, RULE_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIERlower:
				{
				State = 512;
				function_parameter();
				}
				break;
			case SELF:
				{
				State = 513;
				function_parameter_self();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 516;
				Match(COMMA);
				State = 517;
				Match(SP);
				State = 518;
				function_parameter();
				}
				}
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_paramContext identifier_param() {
			return GetRuleContext<Identifier_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameterContext function_parameter() {
		Function_parameterContext _localctx = new Function_parameterContext(Context, State);
		EnterRule(_localctx, 72, RULE_function_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			identifier_param();
			State = 525;
			type_ref_use();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameter_selfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ZsharpParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Function_parameter_selfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter_self; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter_self(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameter_selfContext function_parameter_self() {
		Function_parameter_selfContext _localctx = new Function_parameter_selfContext(Context, State);
		EnterRule(_localctx, 74, RULE_function_parameter_self);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			Match(SELF);
			State = 528;
			type_ref_use();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Function_return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_return_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_return_typeContext function_return_type() {
		Function_return_typeContext _localctx = new Function_return_typeContext(Context, State);
		EnterRule(_localctx, 76, RULE_function_return_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			type_ref_use();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_useContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_selfContext function_call_self() {
			return GetRuleContext<Function_call_selfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_retval_unusedContext function_call_retval_unused() {
			return GetRuleContext<Function_call_retval_unusedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public Function_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_use(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_useContext function_use() {
		Function_useContext _localctx = new Function_useContext(Context, State);
		EnterRule(_localctx, 78, RULE_function_use);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 532;
				indent();
				}
			}

			State = 538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 535;
				function_call();
				}
				break;
			case 2:
				{
				State = 536;
				function_call_self();
				}
				break;
			case 3:
				{
				State = 537;
				function_call_retval_unused();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_funcContext identifier_func() {
			return GetRuleContext<Identifier_funcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENopen() { return GetToken(ZsharpParser.PARENopen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENclose() { return GetToken(ZsharpParser.PARENclose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Template_param_list_useContext template_param_list_use() {
			return GetRuleContext<Template_param_list_useContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameter_uselistContext function_parameter_uselist() {
			return GetRuleContext<Function_parameter_uselistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 80, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			identifier_func();
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SMALL_ANGLEopen) {
				{
				State = 541;
				template_param_list_use();
				}
			}

			State = 544;
			Match(PARENopen);
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & ((1L << (SELF - 11)) | (1L << (TRUE - 11)) | (1L << (FALSE - 11)) | (1L << (NUMBERbin - 11)) | (1L << (NUMBERoct - 11)) | (1L << (NUMBERdec - 11)) | (1L << (NUMBERdec_prefix - 11)) | (1L << (NUMBERhex - 11)) | (1L << (CHARACTER - 11)) | (1L << (STRING - 11)) | (1L << (NOT - 11)) | (1L << (UNUSED - 11)) | (1L << (MINUS_NEG - 11)) | (1L << (BIT_NOT - 11)) | (1L << (PARENopen - 11)) | (1L << (IDENTIFIERupper - 11)) | (1L << (IDENTIFIERlower - 11)) | (1L << (INDENT - 11)))) != 0)) {
				{
				State = 545;
				function_parameter_uselist();
				}
			}

			State = 548;
			Match(PARENclose);
			State = 550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 549;
				newline();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameter_uselistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_param_useContext[] function_param_use() {
			return GetRuleContexts<Function_param_useContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_param_useContext function_param_use(int i) {
			return GetRuleContext<Function_param_useContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZsharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZsharpParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Function_parameter_uselistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter_uselist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter_uselist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameter_uselistContext function_parameter_uselist() {
		Function_parameter_uselistContext _localctx = new Function_parameter_uselistContext(Context, State);
		EnterRule(_localctx, 82, RULE_function_parameter_uselist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			function_param_use();
			State = 558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 553;
				Match(COMMA);
				State = 554;
				Match(SP);
				State = 555;
				function_param_use();
				}
				}
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_param_useContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_valueContext expression_value() {
			return GetRuleContext<Expression_valueContext>(0);
		}
		public Function_param_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_param_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_param_use(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_param_useContext function_param_use() {
		Function_param_useContext _localctx = new Function_param_useContext(Context, State);
		EnterRule(_localctx, 84, RULE_function_param_use);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			expression_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_retval_unusedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNUSED() { return GetToken(ZsharpParser.UNUSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_selfContext function_call_self() {
			return GetRuleContext<Function_call_selfContext>(0);
		}
		public Function_call_retval_unusedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_retval_unused; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_retval_unused(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_retval_unusedContext function_call_retval_unused() {
		Function_call_retval_unusedContext _localctx = new Function_call_retval_unusedContext(Context, State);
		EnterRule(_localctx, 86, RULE_function_call_retval_unused);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			Match(UNUSED);
			State = 564;
			Match(SP);
			State = 565;
			Match(EQ_ASSIGN);
			State = 566;
			Match(SP);
			State = 569;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 567;
				function_call();
				}
				break;
			case 2:
				{
				State = 568;
				function_call_self();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_selfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_refContext variable_ref() {
			return GetRuleContext<Variable_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ZsharpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Function_call_selfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_self; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_self(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_selfContext function_call_self() {
		Function_call_selfContext _localctx = new Function_call_selfContext(Context, State);
		EnterRule(_localctx, 88, RULE_function_call_self);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			variable_ref();
			State = 572;
			Match(DOT);
			State = 573;
			function_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_def_topContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_def_typedContext variable_def_typed() {
			return GetRuleContext<Variable_def_typedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_assign_valueContext variable_assign_value() {
			return GetRuleContext<Variable_assign_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_assign_structContext variable_assign_struct() {
			return GetRuleContext<Variable_assign_structContext>(0);
		}
		public Variable_def_topContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_def_top; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_def_top(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_def_topContext variable_def_top() {
		Variable_def_topContext _localctx = new Variable_def_topContext(Context, State);
		EnterRule(_localctx, 90, RULE_variable_def_top);
		try {
			State = 578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 575;
				variable_def_typed();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 576;
				variable_assign_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 577;
				variable_assign_struct();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_def_typedContext variable_def_typed() {
			return GetRuleContext<Variable_def_typedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_assign_valueContext variable_assign_value() {
			return GetRuleContext<Variable_assign_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_assign_structContext variable_assign_struct() {
			return GetRuleContext<Variable_assign_structContext>(0);
		}
		public Variable_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_defContext variable_def() {
		Variable_defContext _localctx = new Variable_defContext(Context, State);
		EnterRule(_localctx, 92, RULE_variable_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			indent();
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 581;
				variable_def_typed();
				}
				break;
			case 2:
				{
				State = 582;
				variable_assign_value();
				}
				break;
			case 3:
				{
				State = 583;
				variable_assign_struct();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_def_typedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_varContext identifier_var() {
			return GetRuleContext<Identifier_varContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Variable_def_typedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_def_typed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_def_typed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_def_typedContext variable_def_typed() {
		Variable_def_typedContext _localctx = new Variable_def_typedContext(Context, State);
		EnterRule(_localctx, 94, RULE_variable_def_typed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			identifier_var();
			State = 587;
			type_ref_use();
			State = 588;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_assign_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_varContext identifier_var() {
			return GetRuleContext<Identifier_varContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_valueContext expression_value() {
			return GetRuleContext<Expression_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Variable_assign_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_assign_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_assign_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_assign_valueContext variable_assign_value() {
		Variable_assign_valueContext _localctx = new Variable_assign_valueContext(Context, State);
		EnterRule(_localctx, 96, RULE_variable_assign_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			identifier_var();
			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 591;
				type_ref_use();
				}
			}

			State = 594;
			Match(SP);
			State = 595;
			Match(EQ_ASSIGN);
			State = 596;
			Match(SP);
			State = 597;
			expression_value();
			State = 598;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_assign_structContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_varContext identifier_var() {
			return GetRuleContext<Identifier_varContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_refContext type_ref() {
			return GetRuleContext<Type_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_field_initContext[] struct_field_init() {
			return GetRuleContexts<Struct_field_initContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_field_initContext struct_field_init(int i) {
			return GetRuleContext<Struct_field_initContext>(i);
		}
		public Variable_assign_structContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_assign_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_assign_struct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_assign_structContext variable_assign_struct() {
		Variable_assign_structContext _localctx = new Variable_assign_structContext(Context, State);
		EnterRule(_localctx, 98, RULE_variable_assign_struct);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			identifier_var();
			State = 601;
			Match(SP);
			State = 602;
			Match(EQ_ASSIGN);
			State = 603;
			Match(SP);
			State = 604;
			type_ref();
			State = 605;
			newline();
			State = 609;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 606;
					struct_field_init();
					}
					} 
				}
				State = 611;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(ZsharpParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_varContext identifier_var() {
			return GetRuleContext<Identifier_varContext>(0);
		}
		public Variable_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_refContext variable_ref() {
		Variable_refContext _localctx = new Variable_refContext(Context, State);
		EnterRule(_localctx, 100, RULE_variable_ref);
		try {
			State = 614;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 612;
				Match(SELF);
				}
				break;
			case IDENTIFIERlower:
				EnterOuterAlt(_localctx, 2);
				{
				State = 613;
				identifier_var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_field_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_refContext variable_ref() {
			return GetRuleContext<Variable_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ZsharpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_fieldContext identifier_field() {
			return GetRuleContext<Identifier_fieldContext>(0);
		}
		public Variable_field_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_field_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_field_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_field_refContext variable_field_ref() {
		Variable_field_refContext _localctx = new Variable_field_refContext(Context, State);
		EnterRule(_localctx, 102, RULE_variable_field_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			variable_ref();
			State = 617;
			Match(DOT);
			State = 618;
			identifier_field();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_field_def_listContext struct_field_def_list() {
			return GetRuleContext<Struct_field_def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_param_listContext template_param_list() {
			return GetRuleContext<Template_param_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Struct_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_defContext struct_def() {
		Struct_defContext _localctx = new Struct_defContext(Context, State);
		EnterRule(_localctx, 104, RULE_struct_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			identifier_type();
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SMALL_ANGLEopen) {
				{
				State = 621;
				template_param_list();
				}
			}

			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 624;
				type_ref_use();
				}
			}

			State = 627;
			newline();
			State = 628;
			struct_field_def_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_field_def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_field_defContext[] struct_field_def() {
			return GetRuleContexts<Struct_field_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_field_defContext struct_field_def(int i) {
			return GetRuleContext<Struct_field_defContext>(i);
		}
		public Struct_field_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_field_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_field_def_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_field_def_listContext struct_field_def_list() {
		Struct_field_def_listContext _localctx = new Struct_field_def_listContext(Context, State);
		EnterRule(_localctx, 106, RULE_struct_field_def_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 630;
					struct_field_def();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 633;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_field_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_fieldContext identifier_field() {
			return GetRuleContext<Identifier_fieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Struct_field_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_field_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_field_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_field_defContext struct_field_def() {
		Struct_field_defContext _localctx = new Struct_field_defContext(Context, State);
		EnterRule(_localctx, 108, RULE_struct_field_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			indent();
			State = 636;
			identifier_field();
			State = 637;
			type_ref_use();
			State = 638;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_field_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_fieldContext identifier_field() {
			return GetRuleContext<Identifier_fieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_valueContext expression_value() {
			return GetRuleContext<Expression_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public Struct_field_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_field_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_field_init(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_field_initContext struct_field_init() {
		Struct_field_initContext _localctx = new Struct_field_initContext(Context, State);
		EnterRule(_localctx, 110, RULE_struct_field_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			indent();
			State = 641;
			identifier_field();
			State = 642;
			Match(SP);
			State = 643;
			Match(EQ_ASSIGN);
			State = 644;
			Match(SP);
			State = 645;
			expression_value();
			State = 646;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_option_def_listContext enum_option_def_list() {
			return GetRuleContext<Enum_option_def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_option_def_listlineContext enum_option_def_listline() {
			return GetRuleContext<Enum_option_def_listlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Enum_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_defContext enum_def() {
		Enum_defContext _localctx = new Enum_defContext(Context, State);
		EnterRule(_localctx, 112, RULE_enum_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			identifier_type();
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 649;
				type_ref_use();
				}
			}

			State = 652;
			newline();
			State = 655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 653;
				enum_option_def_list();
				}
				break;
			case 2:
				{
				State = 654;
				enum_option_def_listline();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_option_def_listlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_enumoptionContext[] identifier_enumoption() {
			return GetRuleContexts<Identifier_enumoptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_enumoptionContext identifier_enumoption(int i) {
			return GetRuleContext<Identifier_enumoptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZsharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZsharpParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Enum_option_def_listlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_option_def_listline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_option_def_listline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_option_def_listlineContext enum_option_def_listline() {
		Enum_option_def_listlineContext _localctx = new Enum_option_def_listlineContext(Context, State);
		EnterRule(_localctx, 114, RULE_enum_option_def_listline);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			indent();
			State = 664;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 658;
					identifier_enumoption();
					State = 659;
					Match(COMMA);
					State = 660;
					Match(SP);
					}
					} 
				}
				State = 666;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			State = 667;
			identifier_enumoption();
			State = 669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 668;
				Match(COMMA);
				}
			}

			State = 671;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_option_def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_option_defContext[] enum_option_def() {
			return GetRuleContexts<Enum_option_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_option_defContext enum_option_def(int i) {
			return GetRuleContext<Enum_option_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public Enum_option_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_option_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_option_def_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_option_def_listContext enum_option_def_list() {
		Enum_option_def_listContext _localctx = new Enum_option_def_listContext(Context, State);
		EnterRule(_localctx, 116, RULE_enum_option_def_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 673;
					enum_option_def();
					State = 674;
					newline();
					}
					} 
				}
				State = 680;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			State = 681;
			enum_option_def();
			State = 682;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_option_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_enumoptionContext identifier_enumoption() {
			return GetRuleContext<Identifier_enumoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_option_valueContext enum_option_value() {
			return GetRuleContext<Enum_option_valueContext>(0);
		}
		public Enum_option_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_option_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_option_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_option_defContext enum_option_def() {
		Enum_option_defContext _localctx = new Enum_option_defContext(Context, State);
		EnterRule(_localctx, 118, RULE_enum_option_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			indent();
			State = 685;
			identifier_enumoption();
			State = 687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 686;
				enum_option_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_option_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comptime_expression_valueContext comptime_expression_value() {
			return GetRuleContext<Comptime_expression_valueContext>(0);
		}
		public Enum_option_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_option_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_option_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_option_valueContext enum_option_value() {
		Enum_option_valueContext _localctx = new Enum_option_valueContext(Context, State);
		EnterRule(_localctx, 120, RULE_enum_option_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			Match(SP);
			State = 690;
			Match(EQ_ASSIGN);
			State = 691;
			Match(SP);
			State = 692;
			comptime_expression_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_option_useContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ZsharpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_enumoptionContext identifier_enumoption() {
			return GetRuleContext<Identifier_enumoptionContext>(0);
		}
		public Enum_option_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_option_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_option_use(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_option_useContext enum_option_use() {
		Enum_option_useContext _localctx = new Enum_option_useContext(Context, State);
		EnterRule(_localctx, 122, RULE_enum_option_use);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			identifier_type();
			State = 695;
			Match(DOT);
			State = 696;
			identifier_enumoption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNUSED() { return GetToken(ZsharpParser.UNUSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_param_listContext template_param_list() {
			return GetRuleContext<Template_param_listContext>(0);
		}
		public Type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_defContext type_def() {
		Type_defContext _localctx = new Type_defContext(Context, State);
		EnterRule(_localctx, 124, RULE_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			identifier_type();
			State = 700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SMALL_ANGLEopen) {
				{
				State = 699;
				template_param_list();
				}
			}

			State = 702;
			type_ref_use();
			State = 703;
			Match(SP);
			State = 704;
			Match(UNUSED);
			State = 705;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_refContext type_ref() {
			return GetRuleContext<Type_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_param_listContext template_param_list() {
			return GetRuleContext<Template_param_listContext>(0);
		}
		public Type_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_aliasContext type_alias() {
		Type_aliasContext _localctx = new Type_aliasContext(Context, State);
		EnterRule(_localctx, 126, RULE_type_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707;
			identifier_type();
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SMALL_ANGLEopen) {
				{
				State = 708;
				template_param_list();
				}
			}

			State = 711;
			Match(SP);
			State = 712;
			Match(EQ_ASSIGN);
			State = 713;
			Match(SP);
			State = 714;
			type_ref();
			State = 715;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_ref_useContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ZsharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ZsharpParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_refContext type_ref() {
			return GetRuleContext<Type_refContext>(0);
		}
		public Type_ref_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_ref_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_ref_use(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_ref_useContext type_ref_use() {
		Type_ref_useContext _localctx = new Type_ref_useContext(Context, State);
		EnterRule(_localctx, 128, RULE_type_ref_use);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			Match(COLON);
			State = 718;
			Match(SP);
			State = 719;
			type_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(ZsharpParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(ZsharpParser.QUESTION, 0); }
		public Type_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_refContext type_ref() {
		Type_refContext _localctx = new Type_refContext(Context, State);
		EnterRule(_localctx, 130, RULE_type_ref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			type_name();
			State = 723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ERROR) {
				{
				State = 722;
				Match(ERROR);
				}
			}

			State = 726;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION) {
				{
				State = 725;
				Match(QUESTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_typeContext identifier_type() {
			return GetRuleContext<Identifier_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_param_list_useContext template_param_list_use() {
			return GetRuleContext<Template_param_list_useContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 132, RULE_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			identifier_type();
			State = 730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SMALL_ANGLEopen) {
				{
				State = 729;
				template_param_list_use();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_list_useContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_ANGLEopen() { return GetToken(ZsharpParser.SMALL_ANGLEopen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Template_param_useContext[] template_param_use() {
			return GetRuleContexts<Template_param_useContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_param_useContext template_param_use(int i) {
			return GetRuleContext<Template_param_useContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREAT_ANGLEclose() { return GetToken(ZsharpParser.GREAT_ANGLEclose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZsharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZsharpParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Template_param_list_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_param_list_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_list_use(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_list_useContext template_param_list_use() {
		Template_param_list_useContext _localctx = new Template_param_list_useContext(Context, State);
		EnterRule(_localctx, 134, RULE_template_param_list_use);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732;
			Match(SMALL_ANGLEopen);
			State = 733;
			template_param_use();
			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 734;
				Match(COMMA);
				State = 735;
				Match(SP);
				State = 736;
				template_param_use();
				}
				}
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 743;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 742;
				Match(SP);
				}
			}

			State = 745;
			Match(GREAT_ANGLEclose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_useContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_refContext type_ref() {
			return GetRuleContext<Type_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comptime_expression_valueContext comptime_expression_value() {
			return GetRuleContext<Comptime_expression_valueContext>(0);
		}
		public Template_param_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_param_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_use(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_useContext template_param_use() {
		Template_param_useContext _localctx = new Template_param_useContext(Context, State);
		EnterRule(_localctx, 136, RULE_template_param_use);
		try {
			State = 749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 747;
				type_ref();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 748;
				comptime_expression_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_ANGLEopen() { return GetToken(ZsharpParser.SMALL_ANGLEopen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Template_param_anyContext[] template_param_any() {
			return GetRuleContexts<Template_param_anyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_param_anyContext template_param_any(int i) {
			return GetRuleContext<Template_param_anyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREAT_ANGLEclose() { return GetToken(ZsharpParser.GREAT_ANGLEclose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ZsharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ZsharpParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ZsharpParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ZsharpParser.SP, i);
		}
		public Template_param_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_param_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_listContext template_param_list() {
		Template_param_listContext _localctx = new Template_param_listContext(Context, State);
		EnterRule(_localctx, 138, RULE_template_param_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			Match(SMALL_ANGLEopen);
			State = 752;
			template_param_any();
			State = 758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 753;
				Match(COMMA);
				State = 754;
				Match(SP);
				State = 755;
				template_param_any();
				}
				}
				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 761;
			Match(GREAT_ANGLEclose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_paramContext identifier_param() {
			return GetRuleContext<Identifier_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_ref_useContext type_ref_use() {
			return GetRuleContext<Type_ref_useContext>(0);
		}
		public Template_param_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_param_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_varContext template_param_var() {
		Template_param_varContext _localctx = new Template_param_varContext(Context, State);
		EnterRule(_localctx, 140, RULE_template_param_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			identifier_param();
			State = 764;
			type_ref_use();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_param_anyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Template_param_varContext template_param_var() {
			return GetRuleContext<Template_param_varContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_template_paramContext identifier_template_param() {
			return GetRuleContext<Identifier_template_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPTIME() { return GetToken(ZsharpParser.COMPTIME, 0); }
		public Template_param_anyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_param_any; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_param_any(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_param_anyContext template_param_any() {
		Template_param_anyContext _localctx = new Template_param_anyContext(Context, State);
		EnterRule(_localctx, 142, RULE_template_param_any);
		int _la;
		try {
			State = 771;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIERlower:
				EnterOuterAlt(_localctx, 1);
				{
				State = 766;
				template_param_var();
				}
				break;
			case COMPTIME:
			case IDENTIFIERupper:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMPTIME) {
					{
					State = 767;
					Match(COMPTIME);
					}
				}

				State = 770;
				identifier_template_param();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBopen() { return GetToken(ZsharpParser.SUBopen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(ZsharpParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBclose() { return GetToken(ZsharpParser.SUBclose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Range_beginContext range_begin() {
			return GetRuleContext<Range_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_endContext range_end() {
			return GetRuleContext<Range_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ZsharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Range_stepContext range_step() {
			return GetRuleContext<Range_stepContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 144, RULE_range);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			Match(SUBopen);
			State = 775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & ((1L << (SELF - 11)) | (1L << (TRUE - 11)) | (1L << (FALSE - 11)) | (1L << (NUMBERbin - 11)) | (1L << (NUMBERoct - 11)) | (1L << (NUMBERdec - 11)) | (1L << (NUMBERdec_prefix - 11)) | (1L << (NUMBERhex - 11)) | (1L << (CHARACTER - 11)) | (1L << (STRING - 11)) | (1L << (NOT - 11)) | (1L << (UNUSED - 11)) | (1L << (MINUS_NEG - 11)) | (1L << (BIT_NOT - 11)) | (1L << (PARENopen - 11)) | (1L << (IDENTIFIERupper - 11)) | (1L << (IDENTIFIERlower - 11)) | (1L << (INDENT - 11)))) != 0)) {
				{
				State = 774;
				range_begin();
				}
			}

			State = 777;
			Match(RANGE);
			State = 779;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & ((1L << (SELF - 11)) | (1L << (TRUE - 11)) | (1L << (FALSE - 11)) | (1L << (NUMBERbin - 11)) | (1L << (NUMBERoct - 11)) | (1L << (NUMBERdec - 11)) | (1L << (NUMBERdec_prefix - 11)) | (1L << (NUMBERhex - 11)) | (1L << (CHARACTER - 11)) | (1L << (STRING - 11)) | (1L << (NOT - 11)) | (1L << (UNUSED - 11)) | (1L << (MINUS_NEG - 11)) | (1L << (BIT_NOT - 11)) | (1L << (PARENopen - 11)) | (1L << (IDENTIFIERupper - 11)) | (1L << (IDENTIFIERlower - 11)) | (1L << (INDENT - 11)))) != 0)) {
				{
				State = 778;
				range_end();
				}
			}

			State = 783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 781;
				Match(COLON);
				State = 782;
				range_step();
				}
			}

			State = 785;
			Match(SUBclose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_beginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_valueContext expression_value() {
			return GetRuleContext<Expression_valueContext>(0);
		}
		public Range_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_begin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_begin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_beginContext range_begin() {
		Range_beginContext _localctx = new Range_beginContext(Context, State);
		EnterRule(_localctx, 146, RULE_range_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			expression_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_endContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_valueContext expression_value() {
			return GetRuleContext<Expression_valueContext>(0);
		}
		public Range_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_end(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_endContext range_end() {
		Range_endContext _localctx = new Range_endContext(Context, State);
		EnterRule(_localctx, 148, RULE_range_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			expression_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_stepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_valueContext expression_value() {
			return GetRuleContext<Expression_valueContext>(0);
		}
		public Range_stepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_step; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_step(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_stepContext range_step() {
		Range_stepContext _localctx = new Range_stepContext(Context, State);
		EnterRule(_localctx, 150, RULE_range_step);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			expression_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_moduleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_moduleContext identifier_module() {
			return GetRuleContext<Identifier_moduleContext>(0);
		}
		public Alias_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias_module(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alias_moduleContext alias_module() {
		Alias_moduleContext _localctx = new Alias_moduleContext(Context, State);
		EnterRule(_localctx, 152, RULE_alias_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793;
			identifier_module();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_template_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIERupper() { return GetToken(ZsharpParser.IDENTIFIERupper, 0); }
		public Identifier_template_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_template_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_template_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_template_paramContext identifier_template_param() {
		Identifier_template_paramContext _localctx = new Identifier_template_paramContext(Context, State);
		EnterRule(_localctx, 154, RULE_identifier_template_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			Match(IDENTIFIERupper);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIERupper() { return GetToken(ZsharpParser.IDENTIFIERupper, 0); }
		public Identifier_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_typeContext identifier_type() {
		Identifier_typeContext _localctx = new Identifier_typeContext(Context, State);
		EnterRule(_localctx, 156, RULE_identifier_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			Match(IDENTIFIERupper);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIERlower() { return GetToken(ZsharpParser.IDENTIFIERlower, 0); }
		public Identifier_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_varContext identifier_var() {
		Identifier_varContext _localctx = new Identifier_varContext(Context, State);
		EnterRule(_localctx, 158, RULE_identifier_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			Match(IDENTIFIERlower);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIERlower() { return GetToken(ZsharpParser.IDENTIFIERlower, 0); }
		public Identifier_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_paramContext identifier_param() {
		Identifier_paramContext _localctx = new Identifier_paramContext(Context, State);
		EnterRule(_localctx, 160, RULE_identifier_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			Match(IDENTIFIERlower);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_funcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIERupper() { return GetToken(ZsharpParser.IDENTIFIERupper, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIERlower() { return GetToken(ZsharpParser.IDENTIFIERlower, 0); }
		public Identifier_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_funcContext identifier_func() {
		Identifier_funcContext _localctx = new Identifier_funcContext(Context, State);
		EnterRule(_localctx, 162, RULE_identifier_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIERupper || _la==IDENTIFIERlower) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_fieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIERupper() { return GetToken(ZsharpParser.IDENTIFIERupper, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIERlower() { return GetToken(ZsharpParser.IDENTIFIERlower, 0); }
		public Identifier_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_fieldContext identifier_field() {
		Identifier_fieldContext _localctx = new Identifier_fieldContext(Context, State);
		EnterRule(_localctx, 164, RULE_identifier_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIERupper || _la==IDENTIFIERlower) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_enumoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIERupper() { return GetToken(ZsharpParser.IDENTIFIERupper, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIERlower() { return GetToken(ZsharpParser.IDENTIFIERlower, 0); }
		public Identifier_enumoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_enumoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_enumoption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_enumoptionContext identifier_enumoption() {
		Identifier_enumoptionContext _localctx = new Identifier_enumoptionContext(Context, State);
		EnterRule(_localctx, 166, RULE_identifier_enumoption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIERupper || _la==IDENTIFIERlower) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_moduleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIERupper() { return GetToken(ZsharpParser.IDENTIFIERupper, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIERlower() { return GetToken(ZsharpParser.IDENTIFIERlower, 0); }
		public Identifier_moduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_module(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_moduleContext identifier_module() {
		Identifier_moduleContext _localctx = new Identifier_moduleContext(Context, State);
		EnterRule(_localctx, 168, RULE_identifier_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIERupper || _la==IDENTIFIERlower) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_unusedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNUSED() { return GetToken(ZsharpParser.UNUSED, 0); }
		public Identifier_unusedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_unused; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_unused(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_unusedContext identifier_unused() {
		Identifier_unusedContext _localctx = new Identifier_unusedContext(Context, State);
		EnterRule(_localctx, 170, RULE_identifier_unused);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			Match(UNUSED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_boolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(ZsharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(ZsharpParser.FALSE, 0); }
		public Literal_boolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_bool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_boolContext literal_bool() {
		Literal_boolContext _localctx = new Literal_boolContext(Context, State);
		EnterRule(_localctx, 172, RULE_literal_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 174, RULE_literal);
		try {
			State = 817;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBERbin:
			case NUMBERoct:
			case NUMBERdec:
			case NUMBERdec_prefix:
			case NUMBERhex:
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 815;
				number();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 816;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERbin() { return GetToken(ZsharpParser.NUMBERbin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERoct() { return GetToken(ZsharpParser.NUMBERoct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERdec() { return GetToken(ZsharpParser.NUMBERdec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERdec_prefix() { return GetToken(ZsharpParser.NUMBERdec_prefix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERhex() { return GetToken(ZsharpParser.NUMBERhex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(ZsharpParser.CHARACTER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 176, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBERbin) | (1L << NUMBERoct) | (1L << NUMBERdec) | (1L << NUMBERdec_prefix) | (1L << NUMBERhex) | (1L << CHARACTER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_arithmeticContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ZsharpParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_NEG() { return GetToken(ZsharpParser.MINUS_NEG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ZsharpParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ZsharpParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_PTR() { return GetToken(ZsharpParser.MULT_PTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(ZsharpParser.POW, 0); }
		public Operator_arithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_arithmetic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_arithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_arithmeticContext operator_arithmetic() {
		Operator_arithmeticContext _localctx = new Operator_arithmeticContext(Context, State);
		EnterRule(_localctx, 178, RULE_operator_arithmetic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS_NEG) | (1L << MULT_PTR) | (1L << DIV) | (1L << MOD) | (1L << POW))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_arithmetic_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_NEG() { return GetToken(ZsharpParser.MINUS_NEG, 0); }
		public Operator_arithmetic_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_arithmetic_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_arithmetic_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_arithmetic_unaryContext operator_arithmetic_unary() {
		Operator_arithmetic_unaryContext _localctx = new Operator_arithmetic_unaryContext(Context, State);
		EnterRule(_localctx, 180, RULE_operator_arithmetic_unary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			Match(MINUS_NEG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_logicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ZsharpParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ZsharpParser.OR, 0); }
		public Operator_logicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_logic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_logic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_logicContext operator_logic() {
		Operator_logicContext _localctx = new Operator_logicContext(Context, State);
		EnterRule(_localctx, 182, RULE_operator_logic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_logic_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ZsharpParser.NOT, 0); }
		public Operator_logic_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_logic_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_logic_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_logic_unaryContext operator_logic_unary() {
		Operator_logic_unaryContext _localctx = new Operator_logic_unaryContext(Context, State);
		EnterRule(_localctx, 184, RULE_operator_logic_unary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_comparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(ZsharpParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREAT_ANGLEclose() { return GetToken(ZsharpParser.GREAT_ANGLEclose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_ANGLEopen() { return GetToken(ZsharpParser.SMALL_ANGLEopen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREQ() { return GetToken(ZsharpParser.GREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMEQ() { return GetToken(ZsharpParser.SMEQ, 0); }
		public Operator_comparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_comparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_comparisonContext operator_comparison() {
		Operator_comparisonContext _localctx = new Operator_comparisonContext(Context, State);
		EnterRule(_localctx, 186, RULE_operator_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ_ASSIGN) | (1L << NEQ) | (1L << GREAT_ANGLEclose) | (1L << SMALL_ANGLEopen) | (1L << GREQ) | (1L << SMEQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_bitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(ZsharpParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(ZsharpParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR_IMM() { return GetToken(ZsharpParser.BIT_XOR_IMM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_SHL() { return GetToken(ZsharpParser.BIT_SHL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREAT_ANGLEclose() { return GetTokens(ZsharpParser.GREAT_ANGLEclose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREAT_ANGLEclose(int i) {
			return GetToken(ZsharpParser.GREAT_ANGLEclose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_NEG() { return GetToken(ZsharpParser.MINUS_NEG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_ROLL() { return GetToken(ZsharpParser.BIT_ROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_ROLR() { return GetToken(ZsharpParser.BIT_ROLR, 0); }
		public Operator_bitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_bits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_bits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_bitsContext operator_bits() {
		Operator_bitsContext _localctx = new Operator_bitsContext(Context, State);
		EnterRule(_localctx, 188, RULE_operator_bits);
		int _la;
		try {
			State = 842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIT_AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 831;
				Match(BIT_AND);
				}
				break;
			case BIT_OR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 832;
				Match(BIT_OR);
				}
				break;
			case BIT_XOR_IMM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 833;
				Match(BIT_XOR_IMM);
				}
				break;
			case BIT_SHL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 834;
				Match(BIT_SHL);
				}
				break;
			case MINUS_NEG:
			case GREAT_ANGLEclose:
				EnterOuterAlt(_localctx, 5);
				{
				State = 836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS_NEG) {
					{
					State = 835;
					Match(MINUS_NEG);
					}
				}

				State = 838;
				Match(GREAT_ANGLEclose);
				State = 839;
				Match(GREAT_ANGLEclose);
				}
				break;
			case BIT_ROLL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 840;
				Match(BIT_ROLL);
				}
				break;
			case BIT_ROLR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 841;
				Match(BIT_ROLR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_bits_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT() { return GetToken(ZsharpParser.BIT_NOT, 0); }
		public Operator_bits_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_bits_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_bits_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_bits_unaryContext operator_bits_unary() {
		Operator_bits_unaryContext _localctx = new Operator_bits_unaryContext(Context, State);
		EnterRule(_localctx, 190, RULE_operator_bits_unary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			Match(BIT_NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_ASSIGN() { return GetToken(ZsharpParser.EQ_ASSIGN, 0); }
		public Operator_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_assignmentContext operator_assignment() {
		Operator_assignmentContext _localctx = new Operator_assignmentContext(Context, State);
		EnterRule(_localctx, 192, RULE_operator_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(EQ_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(ZsharpParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(ZsharpParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(ZsharpParser.EOL, i);
		}
		public Empty_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_lineContext empty_line() {
		Empty_lineContext _localctx = new Empty_lineContext(Context, State);
		EnterRule(_localctx, 194, RULE_empty_line);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 848;
				Match(INDENT);
				}
			}

			State = 852;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 851;
					Match(EOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 854;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(ZsharpParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(ZsharpParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(ZsharpParser.COMMENT, 0); }
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 196, RULE_newline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 856;
				Match(INDENT);
				}
			}

			State = 860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 859;
				Match(COMMENT);
				}
			}

			State = 862;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(ZsharpParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(ZsharpParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(ZsharpParser.INDENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 198, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 864;
				Match(INDENT);
				}
			}

			State = 867;
			Match(COMMENT);
			State = 868;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ZsharpParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 200, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(ZsharpParser.INDENT, 0); }
		public IndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZsharpVisitor<TResult> typedVisitor = visitor as IZsharpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentContext indent() {
		IndentContext _localctx = new IndentContext(Context, State);
		EnterRule(_localctx, 202, RULE_indent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			Match(INDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return module_name_sempred((Module_nameContext)_localctx, predIndex);
		case 26: return expression_arithmetic_sempred((Expression_arithmeticContext)_localctx, predIndex);
		case 28: return expression_logic_sempred((Expression_logicContext)_localctx, predIndex);
		case 30: return expression_comparison_sempred((Expression_comparisonContext)_localctx, predIndex);
		}
		return true;
	}
	private bool module_name_sempred(Module_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_arithmetic_sempred(Expression_arithmeticContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		}
		return true;
	}
	private bool expression_logic_sempred(Expression_logicContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 4);
		}
		return true;
	}
	private bool expression_comparison_sempred(Expression_comparisonContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x45', '\x36D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x3', '\x2', '\a', '\x2', '\xD0', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\xD3', '\v', '\x2', '\x3', '\x2', '\a', '\x2', 
		'\xD6', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xD9', '\v', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\xDC', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\xE3', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\xE9', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '\xF0', '\n', '\x5', '\r', '\x5', 
		'\xE', '\x5', '\xF1', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\xF7', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\xFF', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x102', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x114', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x118', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\x120', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x12A', 
		'\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x133', '\n', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x139', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x15C', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\x175', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x179', 
		'\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x184', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x18A', '\n', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x198', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\a', '\x1C', '\x1A6', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', 
		'\x1A9', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x1AE', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1BA', '\n', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\a', '\x1E', '\x1C2', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', 
		'\x1C5', '\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1C9', 
		'\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x5', ' ', '\x1D1', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x1D9', '\n', ' ', 
		'\f', ' ', '\xE', ' ', '\x1DC', '\v', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x1E2', '\n', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x1E7', '\n', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x1EE', '\n', '#', '\x3', 
		'#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', 
		'$', '\x1F6', '\n', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x1FA', 
		'\n', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x1FE', '\n', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x5', '%', '\x205', 
		'\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\a', '%', '\x20A', '\n', 
		'%', '\f', '%', '\xE', '%', '\x20D', '\v', '%', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', 
		'(', '\x3', ')', '\x5', ')', '\x218', '\n', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x5', ')', '\x21D', '\n', ')', '\x3', '*', '\x3', '*', '\x5', 
		'*', '\x221', '\n', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x225', 
		'\n', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x229', '\n', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x22F', '\n', '+', 
		'\f', '+', '\xE', '+', '\x232', '\v', '+', '\x3', ',', '\x3', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', 
		'-', '\x23C', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x245', '\n', '/', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x24B', 
		'\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x253', '\n', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\a', '\x33', '\x262', '\n', '\x33', 
		'\f', '\x33', '\xE', '\x33', '\x265', '\v', '\x33', '\x3', '\x34', '\x3', 
		'\x34', '\x5', '\x34', '\x269', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', 
		'\x271', '\n', '\x36', '\x3', '\x36', '\x5', '\x36', '\x274', '\n', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x6', '\x37', 
		'\x27A', '\n', '\x37', '\r', '\x37', '\xE', '\x37', '\x27B', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x5', ':', '\x28D', 
		'\n', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x292', '\n', 
		':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\a', 
		';', '\x299', '\n', ';', '\f', ';', '\xE', ';', '\x29C', '\v', ';', '\x3', 
		';', '\x3', ';', '\x5', ';', '\x2A0', '\n', ';', '\x3', ';', '\x3', ';', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\a', '<', '\x2A7', '\n', '<', '\f', 
		'<', '\xE', '<', '\x2AA', '\v', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x2B2', '\n', '=', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x5', '@', '\x2BF', 
		'\n', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x2C8', '\n', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x43', '\x3', '\x43', '\x5', '\x43', '\x2D6', '\n', '\x43', '\x3', '\x43', 
		'\x5', '\x43', '\x2D9', '\n', '\x43', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x2DD', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\a', '\x45', '\x2E4', '\n', '\x45', '\f', 
		'\x45', '\xE', '\x45', '\x2E7', '\v', '\x45', '\x3', '\x45', '\x5', '\x45', 
		'\x2EA', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', 
		'\x46', '\x5', '\x46', '\x2F0', '\n', '\x46', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\a', 'G', '\x2F7', '\n', 'G', '\f', 
		'G', '\xE', 'G', '\x2FA', '\v', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x303', '\n', 
		'I', '\x3', 'I', '\x5', 'I', '\x306', '\n', 'I', '\x3', 'J', '\x3', 'J', 
		'\x5', 'J', '\x30A', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x30E', 
		'\n', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x312', '\n', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', '\x3', 
		'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 
		'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 
		'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 
		'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 
		'Y', '\x3', 'Y', '\x5', 'Y', '\x334', '\n', 'Y', '\x3', 'Z', '\x3', 'Z', 
		'\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', 
		'\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', 
		'\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x347', '\n', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x34D', '\n', '`', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', 
		'\x5', '\x63', '\x354', '\n', '\x63', '\x3', '\x63', '\x6', '\x63', '\x357', 
		'\n', '\x63', '\r', '\x63', '\xE', '\x63', '\x358', '\x3', '\x64', '\x5', 
		'\x64', '\x35C', '\n', '\x64', '\x3', '\x64', '\x5', '\x64', '\x35F', 
		'\n', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x65', '\x5', '\x65', 
		'\x364', '\n', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', 
		'\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x2', '\x6', 
		'\f', '\x36', ':', '>', 'h', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 
		'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', 
		'\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', 
		'\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', 
		'\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', 
		'\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', '\xCC', 
		'\x2', '\b', '\x3', '\x2', '@', '\x41', '\x3', '\x2', '\xE', '\xF', '\x3', 
		'\x2', '\x11', '\x16', '\x3', '\x2', '\x1C', '!', '\x3', '\x2', '\x18', 
		'\x19', '\x3', '\x2', '\"', '\'', '\x2', '\x382', '\x2', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\xE2', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\b', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\xF6', '\x3', '\x2', '\x2', '\x2', '\f', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x103', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x12', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x16', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x132', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x143', '\x3', '\x2', '\x2', '\x2', ' ', '\x148', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x151', '\x3', '\x2', '\x2', '\x2', '$', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x15D', '\x3', '\x2', '\x2', '\x2', '*', '\x161', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x167', '\x3', '\x2', '\x2', '\x2', '.', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x183', '\x3', '\x2', '\x2', '\x2', '\x34', '\x189', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x197', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1AD', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x1C8', '\x3', '\x2', '\x2', '\x2', '>', '\x1D0', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1E6', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x1E8', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x1F1', '\x3', '\x2', '\x2', '\x2', 'H', '\x204', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x20E', '\x3', '\x2', '\x2', '\x2', 'L', '\x211', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x214', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x217', '\x3', '\x2', '\x2', '\x2', 'R', '\x21E', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x22A', '\x3', '\x2', '\x2', '\x2', 'V', '\x233', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x235', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x23D', '\x3', '\x2', '\x2', '\x2', '\\', '\x244', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x246', '\x3', '\x2', '\x2', '\x2', '`', '\x24C', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x250', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x66', '\x268', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x26A', '\x3', '\x2', '\x2', '\x2', 'j', '\x26E', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x279', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x27D', '\x3', '\x2', '\x2', '\x2', 'p', '\x282', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x28A', '\x3', '\x2', '\x2', '\x2', 't', '\x293', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x2A8', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x2AE', '\x3', '\x2', '\x2', '\x2', 'z', '\x2B3', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x2B8', '\x3', '\x2', '\x2', '\x2', '~', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x2C5', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x84', '\x2D3', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x88', '\x2DE', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x2EF', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x2FD', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x305', '\x3', '\x2', '\x2', '\x2', '\x92', '\x307', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x315', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x317', '\x3', '\x2', '\x2', '\x2', '\x98', '\x319', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x31D', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x31F', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x321', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x323', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x325', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x327', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\x329', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\x32B', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x32D', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x32F', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x333', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\x335', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\x337', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x339', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x33B', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x33D', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\x33F', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\x34C', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x34E', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x350', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x353', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\x35B', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\x363', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x368', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\x36A', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD0', 
		'\x5', '\x4', '\x3', '\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD6', '\x5', '\x6', '\x4', '\x2', '\xD5', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDC', '\a', '\x44', '\x2', '\x2', '\xDB', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', '\x2', 
		'\x2', '\x3', '\xDE', '\x3', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE3', 
		'\x5', '\n', '\x6', '\x2', '\xE0', '\xE3', '\x5', '\xC8', '\x65', '\x2', 
		'\xE1', '\xE3', '\x5', '\xC4', '\x63', '\x2', '\xE2', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE9', '\x5', '.', '\x18', '\x2', '\xE5', '\xE9', '\x5', 'P', 
		')', '\x2', '\xE6', '\xE9', '\x5', '\xC8', '\x65', '\x2', '\xE7', '\xE9', 
		'\x5', '\xC4', '\x63', '\x2', '\xE8', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xF0', '\x5', '\x18', '\r', '\x2', 
		'\xEB', '\xF0', '\x5', 'P', ')', '\x2', '\xEC', '\xF0', '\x5', '\x30', 
		'\x19', '\x2', '\xED', '\xF0', '\x5', '\xC8', '\x65', '\x2', '\xEE', '\xF0', 
		'\x5', '\xC4', '\x63', '\x2', '\xEF', '\xEA', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\t', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF7', 
		'\x5', '\x10', '\t', '\x2', '\xF4', '\xF7', '\x5', '\x12', '\n', '\x2', 
		'\xF5', '\xF7', '\x5', '\x14', '\v', '\x2', '\xF6', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xF9', '\b', '\a', '\x1', '\x2', '\xF9', '\xFA', '\x5', '\xAA', 
		'V', '\x2', '\xFA', '\x100', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', 
		'\f', '\x3', '\x2', '\x2', '\xFC', '\xFD', '\a', '\x36', '\x2', '\x2', 
		'\xFD', '\xFF', '\x5', '\xAA', 'V', '\x2', '\xFE', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\x102', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\r', '\x3', '\x2', '\x2', '\x2', '\x102', '\x100', '\x3', '\x2', 
		'\x2', '\x2', '\x103', '\x104', '\x5', '\f', '\a', '\x2', '\x104', '\x105', 
		'\a', '\x36', '\x2', '\x2', '\x105', '\x106', '\a', '\x1E', '\x2', '\x2', 
		'\x106', '\xF', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\a', '\x3', 
		'\x2', '\x2', '\x108', '\x109', '\a', '\x42', '\x2', '\x2', '\x109', '\x10A', 
		'\x5', '\f', '\a', '\x2', '\x10A', '\x10B', '\x5', '\xC6', '\x64', '\x2', 
		'\x10B', '\x11', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\a', '\x4', 
		'\x2', '\x2', '\x10D', '\x117', '\a', '\x42', '\x2', '\x2', '\x10E', '\x10F', 
		'\x5', '\x9A', 'N', '\x2', '\x10F', '\x110', '\a', '\x42', '\x2', '\x2', 
		'\x110', '\x111', '\a', '\"', '\x2', '\x2', '\x111', '\x112', '\a', '\x42', 
		'\x2', '\x2', '\x112', '\x114', '\x3', '\x2', '\x2', '\x2', '\x113', '\x10E', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\x3', '\x2', '\x2', '\x2', '\x115', '\x118', '\x5', 
		'\f', '\a', '\x2', '\x116', '\x118', '\x5', '\xE', '\b', '\x2', '\x117', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x117', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x119', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', 
		'\x5', '\xC6', '\x64', '\x2', '\x11A', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11C', '\a', '\x5', '\x2', '\x2', '\x11C', '\x11F', '\a', '\x42', 
		'\x2', '\x2', '\x11D', '\x120', '\x5', '\xA4', 'S', '\x2', '\x11E', '\x120', 
		'\x5', '\x9E', 'P', '\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x122', '\x5', '\xC6', '\x64', '\x2', '\x122', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\a', '\x5', '\x2', 
		'\x2', '\x124', '\x129', '\a', '\x42', '\x2', '\x2', '\x125', '\x12A', 
		'\x5', '\x46', '$', '\x2', '\x126', '\x12A', '\x5', '~', '@', '\x2', '\x127', 
		'\x12A', '\x5', 'j', '\x36', '\x2', '\x128', '\x12A', '\x5', 'r', ':', 
		'\x2', '\x129', '\x125', '\x3', '\x2', '\x2', '\x2', '\x129', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x133', '\x5', '\x1C', '\xF', '\x2', '\x12C', 
		'\x133', '\x5', '\x1E', '\x10', '\x2', '\x12D', '\x133', '\x5', ' ', '\x11', 
		'\x2', '\x12E', '\x133', '\x5', '&', '\x14', '\x2', '\x12F', '\x133', 
		'\x5', '\x1A', '\xE', '\x2', '\x130', '\x133', '\x5', '\"', '\x12', '\x2', 
		'\x131', '\x133', '\x5', '$', '\x13', '\x2', '\x132', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x132', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x19', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\x5', 
		'\xCC', 'g', '\x2', '\x135', '\x138', '\a', '\v', '\x2', '\x2', '\x136', 
		'\x137', '\a', '\x42', '\x2', '\x2', '\x137', '\x139', '\x5', '\x32', 
		'\x1A', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x13B', '\x5', '\xC6', '\x64', '\x2', '\x13B', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x5', '\xCC', 'g', '\x2', 
		'\x13D', '\x13E', '\a', '\t', '\x2', '\x2', '\x13E', '\x13F', '\a', '\x42', 
		'\x2', '\x2', '\x13F', '\x140', '\x5', ':', '\x1E', '\x2', '\x140', '\x141', 
		'\x5', '\xC6', '\x64', '\x2', '\x141', '\x142', '\x5', '\b', '\x5', '\x2', 
		'\x142', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x5', 
		'\xCC', 'g', '\x2', '\x144', '\x145', '\a', '\n', '\x2', '\x2', '\x145', 
		'\x146', '\x5', '\xC6', '\x64', '\x2', '\x146', '\x147', '\x5', '\b', 
		'\x5', '\x2', '\x147', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', 
		'\x5', '\xCC', 'g', '\x2', '\x149', '\x14A', '\a', '\n', '\x2', '\x2', 
		'\x14A', '\x14B', '\a', '\x42', '\x2', '\x2', '\x14B', '\x14C', '\a', 
		'\t', '\x2', '\x2', '\x14C', '\x14D', '\a', '\x42', '\x2', '\x2', '\x14D', 
		'\x14E', '\x5', ':', '\x1E', '\x2', '\x14E', '\x14F', '\x5', '\xC6', '\x64', 
		'\x2', '\x14F', '\x150', '\x5', '\b', '\x5', '\x2', '\x150', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x152', '\x5', '\xCC', 'g', '\x2', '\x152', 
		'\x153', '\a', '\a', '\x2', '\x2', '\x153', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x154', '\x155', '\x5', '\xCC', 'g', '\x2', '\x155', '\x156', 
		'\a', '\b', '\x2', '\x2', '\x156', '%', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x15B', '\x5', '\xCC', 'g', '\x2', '\x158', '\x15C', '\x5', '(', '\x15', 
		'\x2', '\x159', '\x15C', '\x5', '*', '\x16', '\x2', '\x15A', '\x15C', 
		'\x5', ',', '\x17', '\x2', '\x15B', '\x158', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x15C', '\'', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15E', '\a', '\x6', '\x2', '\x2', '\x15E', '\x15F', '\x5', '\xC6', '\x64', 
		'\x2', '\x15F', '\x160', '\x5', '\b', '\x5', '\x2', '\x160', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x162', '\a', '\x6', '\x2', '\x2', '\x162', 
		'\x163', '\a', '\x42', '\x2', '\x2', '\x163', '\x164', '\x5', '\x44', 
		'#', '\x2', '\x164', '\x165', '\x5', '\xC6', '\x64', '\x2', '\x165', '\x166', 
		'\x5', '\b', '\x5', '\x2', '\x166', '+', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x168', '\a', '\x6', '\x2', '\x2', '\x168', '\x169', '\a', '\x42', '\x2', 
		'\x2', '\x169', '\x16A', '\x5', ':', '\x1E', '\x2', '\x16A', '\x16B', 
		'\x5', '\xC6', '\x64', '\x2', '\x16B', '\x16C', '\x5', '\b', '\x5', '\x2', 
		'\x16C', '-', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x175', '\x5', '\x46', 
		'$', '\x2', '\x16E', '\x175', '\x5', 'r', ':', '\x2', '\x16F', '\x175', 
		'\x5', 'j', '\x36', '\x2', '\x170', '\x175', '\x5', '~', '@', '\x2', '\x171', 
		'\x175', '\x5', '\x80', '\x41', '\x2', '\x172', '\x175', '\x5', '\\', 
		'/', '\x2', '\x173', '\x175', '\x5', '\x16', '\f', '\x2', '\x174', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x174', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x174', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x171', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x172', '\x3', '\x2', '\x2', '\x2', '\x174', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x175', '/', '\x3', '\x2', '\x2', '\x2', '\x176', '\x179', '\x5', 
		'\x46', '$', '\x2', '\x177', '\x179', '\x5', '^', '\x30', '\x2', '\x178', 
		'\x176', '\x3', '\x2', '\x2', '\x2', '\x178', '\x177', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x31', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x184', 
		'\x5', '\xB2', 'Z', '\x2', '\x17B', '\x184', '\x5', '\xCA', '\x66', '\x2', 
		'\x17C', '\x184', '\x5', 'P', ')', '\x2', '\x17D', '\x184', '\x5', '\x66', 
		'\x34', '\x2', '\x17E', '\x184', '\x5', 'h', '\x35', '\x2', '\x17F', '\x184', 
		'\x5', '|', '?', '\x2', '\x180', '\x184', '\x5', '\x42', '\"', '\x2', 
		'\x181', '\x184', '\x5', '\x36', '\x1C', '\x2', '\x182', '\x184', '\x5', 
		':', '\x1E', '\x2', '\x183', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x183', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x183', '\x17C', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x183', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x180', '\x3', '\x2', '\x2', '\x2', '\x183', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x182', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x185', '\x18A', '\x5', '\xB2', 'Z', 
		'\x2', '\x186', '\x18A', '\x5', '\xCA', '\x66', '\x2', '\x187', '\x18A', 
		'\x5', '\x42', '\"', '\x2', '\x188', '\x18A', '\x5', '|', '?', '\x2', 
		'\x189', '\x185', '\x3', '\x2', '\x2', '\x2', '\x189', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x187', '\x3', '\x2', '\x2', '\x2', '\x189', 
		'\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x18B', '\x18C', '\b', '\x1C', '\x1', '\x2', '\x18C', '\x18D', 
		'\a', '\x32', '\x2', '\x2', '\x18D', '\x18E', '\x5', '\x36', '\x1C', '\x2', 
		'\x18E', '\x18F', '\a', '\x33', '\x2', '\x2', '\x18F', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x190', '\x191', '\x5', '\xB6', '\\', '\x2', '\x191', 
		'\x192', '\x5', '\x36', '\x1C', '\x5', '\x192', '\x198', '\x3', '\x2', 
		'\x2', '\x2', '\x193', '\x194', '\x5', '\xC0', '\x61', '\x2', '\x194', 
		'\x195', '\x5', '\x36', '\x1C', '\x4', '\x195', '\x198', '\x3', '\x2', 
		'\x2', '\x2', '\x196', '\x198', '\x5', '\x38', '\x1D', '\x2', '\x197', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x197', '\x190', '\x3', '\x2', '\x2', 
		'\x2', '\x197', '\x193', '\x3', '\x2', '\x2', '\x2', '\x197', '\x196', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x19A', '\f', '\b', '\x2', '\x2', '\x19A', '\x19B', '\a', '\x42', 
		'\x2', '\x2', '\x19B', '\x19C', '\x5', '\xB4', '[', '\x2', '\x19C', '\x19D', 
		'\a', '\x42', '\x2', '\x2', '\x19D', '\x19E', '\x5', '\x36', '\x1C', '\t', 
		'\x19E', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\f', 
		'\a', '\x2', '\x2', '\x1A0', '\x1A1', '\a', '\x42', '\x2', '\x2', '\x1A1', 
		'\x1A2', '\x5', '\xBE', '`', '\x2', '\x1A2', '\x1A3', '\a', '\x42', '\x2', 
		'\x2', '\x1A3', '\x1A4', '\x5', '\x36', '\x1C', '\b', '\x1A4', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A9', '\x3', 
		'\x2', '\x2', '\x2', '\x1A7', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x1A9', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AE', 
		'\x5', '\xB2', 'Z', '\x2', '\x1AB', '\x1AE', '\x5', '\x66', '\x34', '\x2', 
		'\x1AC', '\x1AE', '\x5', 'P', ')', '\x2', '\x1AD', '\x1AA', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AC', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x1B0', '\b', '\x1E', '\x1', '\x2', '\x1B0', '\x1B1', '\a', 
		'\x32', '\x2', '\x2', '\x1B1', '\x1B2', '\x5', ':', '\x1E', '\x2', '\x1B2', 
		'\x1B3', '\a', '\x33', '\x2', '\x2', '\x1B3', '\x1BA', '\x3', '\x2', '\x2', 
		'\x2', '\x1B4', '\x1B5', '\x5', '\xBA', '^', '\x2', '\x1B5', '\x1B6', 
		'\a', '\x42', '\x2', '\x2', '\x1B6', '\x1B7', '\x5', ':', '\x1E', '\x4', 
		'\x1B7', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1BA', '\x5', 
		'<', '\x1F', '\x2', '\x1B9', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B8', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', 
		'\f', '\x6', '\x2', '\x2', '\x1BC', '\x1BD', '\a', '\x42', '\x2', '\x2', 
		'\x1BD', '\x1BE', '\x5', '\xB8', ']', '\x2', '\x1BE', '\x1BF', '\a', '\x42', 
		'\x2', '\x2', '\x1BF', '\x1C0', '\x5', ':', '\x1E', '\a', '\x1C0', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C1', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		';', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C3', '\x3', '\x2', '\x2', 
		'\x2', '\x1C6', '\x1C9', '\x5', '\x42', '\"', '\x2', '\x1C7', '\x1C9', 
		'\x5', '>', ' ', '\x2', '\x1C8', '\x1C6', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C9', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA', '\x1CB', '\b', ' ', '\x1', '\x2', '\x1CB', '\x1CC', 
		'\a', '\x32', '\x2', '\x2', '\x1CC', '\x1CD', '\x5', '>', ' ', '\x2', 
		'\x1CD', '\x1CE', '\a', '\x33', '\x2', '\x2', '\x1CE', '\x1D1', '\x3', 
		'\x2', '\x2', '\x2', '\x1CF', '\x1D1', '\x5', '@', '!', '\x2', '\x1D0', 
		'\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CF', '\x3', '\x2', '\x2', 
		'\x2', '\x1D1', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', 
		'\f', '\x5', '\x2', '\x2', '\x1D3', '\x1D4', '\a', '\x42', '\x2', '\x2', 
		'\x1D4', '\x1D5', '\x5', '\xBC', '_', '\x2', '\x1D5', '\x1D6', '\a', '\x42', 
		'\x2', '\x2', '\x1D6', '\x1D7', '\x5', '>', ' ', '\x6', '\x1D7', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D2', '\x3', '\x2', '\x2', '\x2', 
		'\x1D9', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1D8', '\x3', 
		'\x2', '\x2', '\x2', '\x1DA', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DB', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x1E2', '\x5', 'P', ')', '\x2', '\x1DE', '\x1E2', '\x5', 
		'\x66', '\x34', '\x2', '\x1DF', '\x1E2', '\x5', '\xB0', 'Y', '\x2', '\x1E0', 
		'\x1E2', '\x5', '\x36', '\x1C', '\x2', '\x1E1', '\x1DD', '\x3', '\x2', 
		'\x2', '\x2', '\x1E1', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E0', '\x3', '\x2', '\x2', '\x2', 
		'\x1E2', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E7', '\x5', 
		'\xAE', 'X', '\x2', '\x1E4', '\x1E7', '\x5', '\x66', '\x34', '\x2', '\x1E5', 
		'\x1E7', '\x5', 'P', ')', '\x2', '\x1E6', '\x1E3', '\x3', '\x2', '\x2', 
		'\x2', '\x1E6', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\x1E7', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8', '\x1E9', '\x5', '\x66', '\x34', '\x2', '\x1E9', '\x1EA', '\a', 
		'\x42', '\x2', '\x2', '\x1EA', '\x1EB', '\a', '\f', '\x2', '\x2', '\x1EB', 
		'\x1ED', '\a', '\x42', '\x2', '\x2', '\x1EC', '\x1EE', '\a', '\x1D', '\x2', 
		'\x2', '\x1ED', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', 
		'\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'\x1EF', '\x1F0', '\x5', '\x92', 'J', '\x2', '\x1F0', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x1F1', '\x1F2', '\x5', '\xA4', 'S', '\x2', '\x1F2', '\x1F3', 
		'\a', '\x35', '\x2', '\x2', '\x1F3', '\x1F5', '\a', '\x42', '\x2', '\x2', 
		'\x1F4', '\x1F6', '\x5', '\x8C', 'G', '\x2', '\x1F5', '\x1F4', '\x3', 
		'\x2', '\x2', '\x2', '\x1F5', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F9', '\a', '\x32', '\x2', 
		'\x2', '\x1F8', '\x1FA', '\x5', 'H', '%', '\x2', '\x1F9', '\x1F8', '\x3', 
		'\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FD', '\a', '\x33', '\x2', 
		'\x2', '\x1FC', '\x1FE', '\x5', 'N', '(', '\x2', '\x1FD', '\x1FC', '\x3', 
		'\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1FE', 
		'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', '\x5', '\xC6', 
		'\x64', '\x2', '\x200', '\x201', '\x5', '\b', '\x5', '\x2', '\x201', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\x205', '\x5', 'J', '&', '\x2', 
		'\x203', '\x205', '\x5', 'L', '\'', '\x2', '\x204', '\x202', '\x3', '\x2', 
		'\x2', '\x2', '\x204', '\x203', '\x3', '\x2', '\x2', '\x2', '\x205', '\x20B', 
		'\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\a', '\x39', '\x2', '\x2', 
		'\x207', '\x208', '\a', '\x42', '\x2', '\x2', '\x208', '\x20A', '\x5', 
		'J', '&', '\x2', '\x209', '\x206', '\x3', '\x2', '\x2', '\x2', '\x20A', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x209', '\x3', '\x2', '\x2', 
		'\x2', '\x20B', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20C', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x20D', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x20E', 
		'\x20F', '\x5', '\xA2', 'R', '\x2', '\x20F', '\x210', '\x5', '\x82', '\x42', 
		'\x2', '\x210', 'K', '\x3', '\x2', '\x2', '\x2', '\x211', '\x212', '\a', 
		'\r', '\x2', '\x2', '\x212', '\x213', '\x5', '\x82', '\x42', '\x2', '\x213', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x214', '\x215', '\x5', '\x82', '\x42', 
		'\x2', '\x215', 'O', '\x3', '\x2', '\x2', '\x2', '\x216', '\x218', '\x5', 
		'\xCC', 'g', '\x2', '\x217', '\x216', '\x3', '\x2', '\x2', '\x2', '\x217', 
		'\x218', '\x3', '\x2', '\x2', '\x2', '\x218', '\x21C', '\x3', '\x2', '\x2', 
		'\x2', '\x219', '\x21D', '\x5', 'R', '*', '\x2', '\x21A', '\x21D', '\x5', 
		'Z', '.', '\x2', '\x21B', '\x21D', '\x5', 'X', '-', '\x2', '\x21C', '\x219', 
		'\x3', '\x2', '\x2', '\x2', '\x21C', '\x21A', '\x3', '\x2', '\x2', '\x2', 
		'\x21C', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21D', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x21E', '\x220', '\x5', '\xA4', 'S', '\x2', '\x21F', '\x221', 
		'\x5', '\x88', '\x45', '\x2', '\x220', '\x21F', '\x3', '\x2', '\x2', '\x2', 
		'\x220', '\x221', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\x3', 
		'\x2', '\x2', '\x2', '\x222', '\x224', '\a', '\x32', '\x2', '\x2', '\x223', 
		'\x225', '\x5', 'T', '+', '\x2', '\x224', '\x223', '\x3', '\x2', '\x2', 
		'\x2', '\x224', '\x225', '\x3', '\x2', '\x2', '\x2', '\x225', '\x226', 
		'\x3', '\x2', '\x2', '\x2', '\x226', '\x228', '\a', '\x33', '\x2', '\x2', 
		'\x227', '\x229', '\x5', '\xC6', '\x64', '\x2', '\x228', '\x227', '\x3', 
		'\x2', '\x2', '\x2', '\x228', '\x229', '\x3', '\x2', '\x2', '\x2', '\x229', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x230', '\x5', 'V', ',', '\x2', 
		'\x22B', '\x22C', '\a', '\x39', '\x2', '\x2', '\x22C', '\x22D', '\a', 
		'\x42', '\x2', '\x2', '\x22D', '\x22F', '\x5', 'V', ',', '\x2', '\x22E', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x232', '\x3', '\x2', '\x2', 
		'\x2', '\x230', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x230', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\x231', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x232', '\x230', '\x3', '\x2', '\x2', '\x2', '\x233', '\x234', '\x5', 
		'\x32', '\x1A', '\x2', '\x234', 'W', '\x3', '\x2', '\x2', '\x2', '\x235', 
		'\x236', '\a', '\x1B', '\x2', '\x2', '\x236', '\x237', '\a', '\x42', '\x2', 
		'\x2', '\x237', '\x238', '\a', '\"', '\x2', '\x2', '\x238', '\x23B', '\a', 
		'\x42', '\x2', '\x2', '\x239', '\x23C', '\x5', 'R', '*', '\x2', '\x23A', 
		'\x23C', '\x5', 'Z', '.', '\x2', '\x23B', '\x239', '\x3', '\x2', '\x2', 
		'\x2', '\x23B', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x23C', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x23D', '\x23E', '\x5', '\x66', '\x34', '\x2', '\x23E', 
		'\x23F', '\a', '\x36', '\x2', '\x2', '\x23F', '\x240', '\x5', 'R', '*', 
		'\x2', '\x240', '[', '\x3', '\x2', '\x2', '\x2', '\x241', '\x245', '\x5', 
		'`', '\x31', '\x2', '\x242', '\x245', '\x5', '\x62', '\x32', '\x2', '\x243', 
		'\x245', '\x5', '\x64', '\x33', '\x2', '\x244', '\x241', '\x3', '\x2', 
		'\x2', '\x2', '\x244', '\x242', '\x3', '\x2', '\x2', '\x2', '\x244', '\x243', 
		'\x3', '\x2', '\x2', '\x2', '\x245', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x246', '\x24A', '\x5', '\xCC', 'g', '\x2', '\x247', '\x24B', '\x5', 
		'`', '\x31', '\x2', '\x248', '\x24B', '\x5', '\x62', '\x32', '\x2', '\x249', 
		'\x24B', '\x5', '\x64', '\x33', '\x2', '\x24A', '\x247', '\x3', '\x2', 
		'\x2', '\x2', '\x24A', '\x248', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x249', 
		'\x3', '\x2', '\x2', '\x2', '\x24B', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x24C', '\x24D', '\x5', '\xA0', 'Q', '\x2', '\x24D', '\x24E', '\x5', 
		'\x82', '\x42', '\x2', '\x24E', '\x24F', '\x5', '\xC6', '\x64', '\x2', 
		'\x24F', '\x61', '\x3', '\x2', '\x2', '\x2', '\x250', '\x252', '\x5', 
		'\xA0', 'Q', '\x2', '\x251', '\x253', '\x5', '\x82', '\x42', '\x2', '\x252', 
		'\x251', '\x3', '\x2', '\x2', '\x2', '\x252', '\x253', '\x3', '\x2', '\x2', 
		'\x2', '\x253', '\x254', '\x3', '\x2', '\x2', '\x2', '\x254', '\x255', 
		'\a', '\x42', '\x2', '\x2', '\x255', '\x256', '\a', '\"', '\x2', '\x2', 
		'\x256', '\x257', '\a', '\x42', '\x2', '\x2', '\x257', '\x258', '\x5', 
		'\x32', '\x1A', '\x2', '\x258', '\x259', '\x5', '\xC6', '\x64', '\x2', 
		'\x259', '\x63', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25B', '\x5', 
		'\xA0', 'Q', '\x2', '\x25B', '\x25C', '\a', '\x42', '\x2', '\x2', '\x25C', 
		'\x25D', '\a', '\"', '\x2', '\x2', '\x25D', '\x25E', '\a', '\x42', '\x2', 
		'\x2', '\x25E', '\x25F', '\x5', '\x84', '\x43', '\x2', '\x25F', '\x263', 
		'\x5', '\xC6', '\x64', '\x2', '\x260', '\x262', '\x5', 'p', '\x39', '\x2', 
		'\x261', '\x260', '\x3', '\x2', '\x2', '\x2', '\x262', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\x263', '\x261', '\x3', '\x2', '\x2', '\x2', '\x263', 
		'\x264', '\x3', '\x2', '\x2', '\x2', '\x264', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x265', '\x263', '\x3', '\x2', '\x2', '\x2', '\x266', '\x269', 
		'\a', '\r', '\x2', '\x2', '\x267', '\x269', '\x5', '\xA0', 'Q', '\x2', 
		'\x268', '\x266', '\x3', '\x2', '\x2', '\x2', '\x268', '\x267', '\x3', 
		'\x2', '\x2', '\x2', '\x269', 'g', '\x3', '\x2', '\x2', '\x2', '\x26A', 
		'\x26B', '\x5', '\x66', '\x34', '\x2', '\x26B', '\x26C', '\a', '\x36', 
		'\x2', '\x2', '\x26C', '\x26D', '\x5', '\xA6', 'T', '\x2', '\x26D', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\x26E', '\x270', '\x5', '\x9E', 'P', '\x2', 
		'\x26F', '\x271', '\x5', '\x8C', 'G', '\x2', '\x270', '\x26F', '\x3', 
		'\x2', '\x2', '\x2', '\x270', '\x271', '\x3', '\x2', '\x2', '\x2', '\x271', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x272', '\x274', '\x5', '\x82', 
		'\x42', '\x2', '\x273', '\x272', '\x3', '\x2', '\x2', '\x2', '\x273', 
		'\x274', '\x3', '\x2', '\x2', '\x2', '\x274', '\x275', '\x3', '\x2', '\x2', 
		'\x2', '\x275', '\x276', '\x5', '\xC6', '\x64', '\x2', '\x276', '\x277', 
		'\x5', 'l', '\x37', '\x2', '\x277', 'k', '\x3', '\x2', '\x2', '\x2', '\x278', 
		'\x27A', '\x5', 'n', '\x38', '\x2', '\x279', '\x278', '\x3', '\x2', '\x2', 
		'\x2', '\x27A', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x279', 
		'\x3', '\x2', '\x2', '\x2', '\x27B', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'\x27C', 'm', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27E', '\x5', '\xCC', 
		'g', '\x2', '\x27E', '\x27F', '\x5', '\xA6', 'T', '\x2', '\x27F', '\x280', 
		'\x5', '\x82', '\x42', '\x2', '\x280', '\x281', '\x5', '\xC6', '\x64', 
		'\x2', '\x281', 'o', '\x3', '\x2', '\x2', '\x2', '\x282', '\x283', '\x5', 
		'\xCC', 'g', '\x2', '\x283', '\x284', '\x5', '\xA6', 'T', '\x2', '\x284', 
		'\x285', '\a', '\x42', '\x2', '\x2', '\x285', '\x286', '\a', '\"', '\x2', 
		'\x2', '\x286', '\x287', '\a', '\x42', '\x2', '\x2', '\x287', '\x288', 
		'\x5', '\x32', '\x1A', '\x2', '\x288', '\x289', '\x5', '\xC6', '\x64', 
		'\x2', '\x289', 'q', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x28C', '\x5', 
		'\x9E', 'P', '\x2', '\x28B', '\x28D', '\x5', '\x82', '\x42', '\x2', '\x28C', 
		'\x28B', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28D', '\x3', '\x2', '\x2', 
		'\x2', '\x28D', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x291', 
		'\x5', '\xC6', '\x64', '\x2', '\x28F', '\x292', '\x5', 'v', '<', '\x2', 
		'\x290', '\x292', '\x5', 't', ';', '\x2', '\x291', '\x28F', '\x3', '\x2', 
		'\x2', '\x2', '\x291', '\x290', '\x3', '\x2', '\x2', '\x2', '\x292', 's', 
		'\x3', '\x2', '\x2', '\x2', '\x293', '\x29A', '\x5', '\xCC', 'g', '\x2', 
		'\x294', '\x295', '\x5', '\xA8', 'U', '\x2', '\x295', '\x296', '\a', '\x39', 
		'\x2', '\x2', '\x296', '\x297', '\a', '\x42', '\x2', '\x2', '\x297', '\x299', 
		'\x3', '\x2', '\x2', '\x2', '\x298', '\x294', '\x3', '\x2', '\x2', '\x2', 
		'\x299', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x298', '\x3', 
		'\x2', '\x2', '\x2', '\x29A', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29B', 
		'\x29D', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29A', '\x3', '\x2', '\x2', 
		'\x2', '\x29D', '\x29F', '\x5', '\xA8', 'U', '\x2', '\x29E', '\x2A0', 
		'\a', '\x39', '\x2', '\x2', '\x29F', '\x29E', '\x3', '\x2', '\x2', '\x2', 
		'\x29F', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x2A2', '\x5', '\xC6', '\x64', '\x2', '\x2A2', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A4', '\x5', 'x', '=', '\x2', 
		'\x2A4', '\x2A5', '\x5', '\xC6', '\x64', '\x2', '\x2A5', '\x2A7', '\x3', 
		'\x2', '\x2', '\x2', '\x2A6', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A7', 
		'\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A6', '\x3', '\x2', '\x2', 
		'\x2', '\x2A8', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AB', 
		'\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2A8', '\x3', '\x2', '\x2', '\x2', 
		'\x2AB', '\x2AC', '\x5', 'x', '=', '\x2', '\x2AC', '\x2AD', '\x5', '\xC6', 
		'\x64', '\x2', '\x2AD', 'w', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AF', 
		'\x5', '\xCC', 'g', '\x2', '\x2AF', '\x2B1', '\x5', '\xA8', 'U', '\x2', 
		'\x2B0', '\x2B2', '\x5', 'z', '>', '\x2', '\x2B1', '\x2B0', '\x3', '\x2', 
		'\x2', '\x2', '\x2B1', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B2', 'y', 
		'\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', '\a', '\x42', '\x2', '\x2', 
		'\x2B4', '\x2B5', '\a', '\"', '\x2', '\x2', '\x2B5', '\x2B6', '\a', '\x42', 
		'\x2', '\x2', '\x2B6', '\x2B7', '\x5', '\x34', '\x1B', '\x2', '\x2B7', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2B9', '\x5', '\x9E', 'P', 
		'\x2', '\x2B9', '\x2BA', '\a', '\x36', '\x2', '\x2', '\x2BA', '\x2BB', 
		'\x5', '\xA8', 'U', '\x2', '\x2BB', '}', '\x3', '\x2', '\x2', '\x2', '\x2BC', 
		'\x2BE', '\x5', '\x9E', 'P', '\x2', '\x2BD', '\x2BF', '\x5', '\x8C', 'G', 
		'\x2', '\x2BE', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BF', 
		'\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2C0', '\x3', '\x2', '\x2', '\x2', 
		'\x2C0', '\x2C1', '\x5', '\x82', '\x42', '\x2', '\x2C1', '\x2C2', '\a', 
		'\x42', '\x2', '\x2', '\x2C2', '\x2C3', '\a', '\x1B', '\x2', '\x2', '\x2C3', 
		'\x2C4', '\x5', '\xC6', '\x64', '\x2', '\x2C4', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x2C5', '\x2C7', '\x5', '\x9E', 'P', '\x2', '\x2C6', '\x2C8', 
		'\x5', '\x8C', 'G', '\x2', '\x2C7', '\x2C6', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C9', '\x3', 
		'\x2', '\x2', '\x2', '\x2C9', '\x2CA', '\a', '\x42', '\x2', '\x2', '\x2CA', 
		'\x2CB', '\a', '\"', '\x2', '\x2', '\x2CB', '\x2CC', '\a', '\x42', '\x2', 
		'\x2', '\x2CC', '\x2CD', '\x5', '\x84', '\x43', '\x2', '\x2CD', '\x2CE', 
		'\x5', '\xC6', '\x64', '\x2', '\x2CE', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x2CF', '\x2D0', '\a', '\x35', '\x2', '\x2', '\x2D0', '\x2D1', '\a', 
		'\x42', '\x2', '\x2', '\x2D1', '\x2D2', '\x5', '\x84', '\x43', '\x2', 
		'\x2D2', '\x83', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D5', '\x5', 
		'\x86', '\x44', '\x2', '\x2D4', '\x2D6', '\a', '<', '\x2', '\x2', '\x2D5', 
		'\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D6', '\x3', '\x2', '\x2', 
		'\x2', '\x2D6', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D9', 
		'\a', '\x34', '\x2', '\x2', '\x2D8', '\x2D7', '\x3', '\x2', '\x2', '\x2', 
		'\x2D8', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x2DA', '\x2DC', '\x5', '\x9E', 'P', '\x2', '\x2DB', 
		'\x2DD', '\x5', '\x88', '\x45', '\x2', '\x2DC', '\x2DB', '\x3', '\x2', 
		'\x2', '\x2', '\x2DC', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DF', '\a', '%', '\x2', '\x2', 
		'\x2DF', '\x2E5', '\x5', '\x8A', '\x46', '\x2', '\x2E0', '\x2E1', '\a', 
		'\x39', '\x2', '\x2', '\x2E1', '\x2E2', '\a', '\x42', '\x2', '\x2', '\x2E2', 
		'\x2E4', '\x5', '\x8A', '\x46', '\x2', '\x2E3', '\x2E0', '\x3', '\x2', 
		'\x2', '\x2', '\x2E4', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E3', 
		'\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E6', '\x3', '\x2', '\x2', '\x2', 
		'\x2E6', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E5', '\x3', 
		'\x2', '\x2', '\x2', '\x2E8', '\x2EA', '\a', '\x42', '\x2', '\x2', '\x2E9', 
		'\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EA', '\x3', '\x2', '\x2', 
		'\x2', '\x2EA', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2EC', 
		'\a', '$', '\x2', '\x2', '\x2EC', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x2ED', '\x2F0', '\x5', '\x84', '\x43', '\x2', '\x2EE', '\x2F0', '\x5', 
		'\x34', '\x1B', '\x2', '\x2EF', '\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2EF', 
		'\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x2F1', '\x2F2', '\a', '%', '\x2', '\x2', '\x2F2', '\x2F8', '\x5', 
		'\x90', 'I', '\x2', '\x2F3', '\x2F4', '\a', '\x39', '\x2', '\x2', '\x2F4', 
		'\x2F5', '\a', '\x42', '\x2', '\x2', '\x2F5', '\x2F7', '\x5', '\x90', 
		'I', '\x2', '\x2F6', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2FA', 
		'\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F6', '\x3', '\x2', '\x2', '\x2', 
		'\x2F8', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FB', '\x3', 
		'\x2', '\x2', '\x2', '\x2FA', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2FB', 
		'\x2FC', '\a', '$', '\x2', '\x2', '\x2FC', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x2FD', '\x2FE', '\x5', '\xA2', 'R', '\x2', '\x2FE', '\x2FF', 
		'\x5', '\x82', '\x42', '\x2', '\x2FF', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x300', '\x306', '\x5', '\x8E', 'H', '\x2', '\x301', '\x303', '\a', ':', 
		'\x2', '\x2', '\x302', '\x301', '\x3', '\x2', '\x2', '\x2', '\x302', '\x303', 
		'\x3', '\x2', '\x2', '\x2', '\x303', '\x304', '\x3', '\x2', '\x2', '\x2', 
		'\x304', '\x306', '\x5', '\x9C', 'O', '\x2', '\x305', '\x300', '\x3', 
		'\x2', '\x2', '\x2', '\x305', '\x302', '\x3', '\x2', '\x2', '\x2', '\x306', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x307', '\x309', '\a', '\x30', '\x2', 
		'\x2', '\x308', '\x30A', '\x5', '\x94', 'K', '\x2', '\x309', '\x308', 
		'\x3', '\x2', '\x2', '\x2', '\x309', '\x30A', '\x3', '\x2', '\x2', '\x2', 
		'\x30A', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x30B', '\x30D', '\a', 
		'\x37', '\x2', '\x2', '\x30C', '\x30E', '\x5', '\x96', 'L', '\x2', '\x30D', 
		'\x30C', '\x3', '\x2', '\x2', '\x2', '\x30D', '\x30E', '\x3', '\x2', '\x2', 
		'\x2', '\x30E', '\x311', '\x3', '\x2', '\x2', '\x2', '\x30F', '\x310', 
		'\a', '\x35', '\x2', '\x2', '\x310', '\x312', '\x5', '\x98', 'M', '\x2', 
		'\x311', '\x30F', '\x3', '\x2', '\x2', '\x2', '\x311', '\x312', '\x3', 
		'\x2', '\x2', '\x2', '\x312', '\x313', '\x3', '\x2', '\x2', '\x2', '\x313', 
		'\x314', '\a', '\x31', '\x2', '\x2', '\x314', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x315', '\x316', '\x5', '\x32', '\x1A', '\x2', '\x316', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x317', '\x318', '\x5', '\x32', '\x1A', '\x2', 
		'\x318', '\x97', '\x3', '\x2', '\x2', '\x2', '\x319', '\x31A', '\x5', 
		'\x32', '\x1A', '\x2', '\x31A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x31B', 
		'\x31C', '\x5', '\xAA', 'V', '\x2', '\x31C', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x31D', '\x31E', '\a', '@', '\x2', '\x2', '\x31E', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x320', '\a', '@', '\x2', '\x2', '\x320', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x321', '\x322', '\a', '\x41', '\x2', 
		'\x2', '\x322', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x323', '\x324', 
		'\a', '\x41', '\x2', '\x2', '\x324', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\x325', '\x326', '\t', '\x2', '\x2', '\x2', '\x326', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x327', '\x328', '\t', '\x2', '\x2', '\x2', '\x328', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\x329', '\x32A', '\t', '\x2', '\x2', '\x2', 
		'\x32A', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x32C', '\t', '\x2', 
		'\x2', '\x2', '\x32C', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x32D', '\x32E', 
		'\a', '\x1B', '\x2', '\x2', '\x32E', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\x32F', '\x330', '\t', '\x3', '\x2', '\x2', '\x330', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', '\x331', '\x334', '\x5', '\xB2', 'Z', '\x2', '\x332', '\x334', 
		'\x5', '\xCA', '\x66', '\x2', '\x333', '\x331', '\x3', '\x2', '\x2', '\x2', 
		'\x333', '\x332', '\x3', '\x2', '\x2', '\x2', '\x334', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\x335', '\x336', '\t', '\x4', '\x2', '\x2', '\x336', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\x337', '\x338', '\t', '\x5', '\x2', 
		'\x2', '\x338', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x339', '\x33A', 
		'\a', '\x1D', '\x2', '\x2', '\x33A', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\x33B', '\x33C', '\t', '\x6', '\x2', '\x2', '\x33C', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\x33D', '\x33E', '\a', '\x1A', '\x2', '\x2', '\x33E', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\x33F', '\x340', '\t', '\a', '\x2', '\x2', 
		'\x340', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x341', '\x34D', '\a', '(', 
		'\x2', '\x2', '\x342', '\x34D', '\a', ')', '\x2', '\x2', '\x343', '\x34D', 
		'\a', '*', '\x2', '\x2', '\x344', '\x34D', '\a', ',', '\x2', '\x2', '\x345', 
		'\x347', '\a', '\x1D', '\x2', '\x2', '\x346', '\x345', '\x3', '\x2', '\x2', 
		'\x2', '\x346', '\x347', '\x3', '\x2', '\x2', '\x2', '\x347', '\x348', 
		'\x3', '\x2', '\x2', '\x2', '\x348', '\x349', '\a', '$', '\x2', '\x2', 
		'\x349', '\x34D', '\a', '$', '\x2', '\x2', '\x34A', '\x34D', '\a', '-', 
		'\x2', '\x2', '\x34B', '\x34D', '\a', '.', '\x2', '\x2', '\x34C', '\x341', 
		'\x3', '\x2', '\x2', '\x2', '\x34C', '\x342', '\x3', '\x2', '\x2', '\x2', 
		'\x34C', '\x343', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x344', '\x3', 
		'\x2', '\x2', '\x2', '\x34C', '\x346', '\x3', '\x2', '\x2', '\x2', '\x34C', 
		'\x34A', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x34B', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x34F', 
		'\a', '+', '\x2', '\x2', '\x34F', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\x350', '\x351', '\a', '\"', '\x2', '\x2', '\x351', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\x352', '\x354', '\a', '\x44', '\x2', '\x2', '\x353', '\x352', 
		'\x3', '\x2', '\x2', '\x2', '\x353', '\x354', '\x3', '\x2', '\x2', '\x2', 
		'\x354', '\x356', '\x3', '\x2', '\x2', '\x2', '\x355', '\x357', '\a', 
		'\x45', '\x2', '\x2', '\x356', '\x355', '\x3', '\x2', '\x2', '\x2', '\x357', 
		'\x358', '\x3', '\x2', '\x2', '\x2', '\x358', '\x356', '\x3', '\x2', '\x2', 
		'\x2', '\x358', '\x359', '\x3', '\x2', '\x2', '\x2', '\x359', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\x35A', '\x35C', '\a', '\x44', '\x2', '\x2', 
		'\x35B', '\x35A', '\x3', '\x2', '\x2', '\x2', '\x35B', '\x35C', '\x3', 
		'\x2', '\x2', '\x2', '\x35C', '\x35E', '\x3', '\x2', '\x2', '\x2', '\x35D', 
		'\x35F', '\a', '\x10', '\x2', '\x2', '\x35E', '\x35D', '\x3', '\x2', '\x2', 
		'\x2', '\x35E', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x35F', '\x360', 
		'\x3', '\x2', '\x2', '\x2', '\x360', '\x361', '\a', '\x45', '\x2', '\x2', 
		'\x361', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x362', '\x364', '\a', '\x44', 
		'\x2', '\x2', '\x363', '\x362', '\x3', '\x2', '\x2', '\x2', '\x363', '\x364', 
		'\x3', '\x2', '\x2', '\x2', '\x364', '\x365', '\x3', '\x2', '\x2', '\x2', 
		'\x365', '\x366', '\a', '\x10', '\x2', '\x2', '\x366', '\x367', '\a', 
		'\x45', '\x2', '\x2', '\x367', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x368', 
		'\x369', '\a', '\x17', '\x2', '\x2', '\x369', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\x36A', '\x36B', '\a', '\x44', '\x2', '\x2', '\x36B', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\xD1', '\xD7', '\xDB', '\xE2', '\xE8', 
		'\xEF', '\xF1', '\xF6', '\x100', '\x113', '\x117', '\x11F', '\x129', '\x132', 
		'\x138', '\x15B', '\x174', '\x178', '\x183', '\x189', '\x197', '\x1A5', 
		'\x1A7', '\x1AD', '\x1B9', '\x1C3', '\x1C8', '\x1D0', '\x1DA', '\x1E1', 
		'\x1E6', '\x1ED', '\x1F5', '\x1F9', '\x1FD', '\x204', '\x20B', '\x217', 
		'\x21C', '\x220', '\x224', '\x228', '\x230', '\x23B', '\x244', '\x24A', 
		'\x252', '\x263', '\x268', '\x270', '\x273', '\x27B', '\x28C', '\x291', 
		'\x29A', '\x29F', '\x2A8', '\x2B1', '\x2BE', '\x2C7', '\x2D5', '\x2D8', 
		'\x2DC', '\x2E5', '\x2E9', '\x2EF', '\x2F8', '\x302', '\x305', '\x309', 
		'\x30D', '\x311', '\x333', '\x346', '\x34C', '\x353', '\x358', '\x35B', 
		'\x35E', '\x363',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Maja.Compiler.Parser
