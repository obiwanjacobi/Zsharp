//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Maja.Compiler/MajaParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Maja.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MajaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Indent=1, Dedent=2, Comment=3, Mod=4, Pub=5, Use=6, Self=7, Ret=8, Brk=9, 
		Cnt=10, Loop=11, If=12, Else=13, Elif=14, True=15, False=16, In=17, Not=18, 
		And=19, Or=20, NumberBin=21, NumberOct=22, NumberDec=23, NumberDecPrefix=24, 
		NumberHex=25, Identifier=26, Character=27, String=28, ParenOpen=29, ParenClose=30, 
		AngleOpen=31, AngleClose=32, BracketOpen=33, BracketClose=34, CurlyOpen=35, 
		CurlyClose=36, Hash=37, Colon=38, SemiColon=39, Dot=40, Range=41, Spread=42, 
		Eq=43, Neq=44, GtEq=45, LtEq=46, Plus=47, Minus=48, Multiply=49, Power=50, 
		Divide=51, Root=52, Modulo=53, BitAnd=54, BitOr=55, BitNot=56, BitXor_Imm=57, 
		BitShiftL=58, BitRollL=59, BitRollR=60, Question=61, Dollar=62, At=63, 
		Error=64, StrQuote=65, CharQuote=66, BackTick=67, Discard=68, Comma=69, 
		Sp=70, Eol=71;
	public const int
		RULE_compilationUnit = 0, RULE_directiveMod = 1, RULE_directivePub = 2, 
		RULE_directiveUse = 3, RULE_codeBlock = 4, RULE_declaration = 5, RULE_declarationPub = 6, 
		RULE_statement = 7, RULE_statementFlow = 8, RULE_statementIf = 9, RULE_statementElse = 10, 
		RULE_statementElseIf = 11, RULE_statementRet = 12, RULE_statementAssignment = 13, 
		RULE_statementExpression = 14, RULE_statementLoop = 15, RULE_declarationFunction = 16, 
		RULE_declarationFunctionLocal = 17, RULE_parameterList = 18, RULE_parameterListComma = 19, 
		RULE_parameterListIndent = 20, RULE_parameter = 21, RULE_compParameter = 22, 
		RULE_argumentList = 23, RULE_argumentListComma = 24, RULE_argumentListIndent = 25, 
		RULE_argument = 26, RULE_declarationType = 27, RULE_declarationTypeMemberList = 28, 
		RULE_declarationTypeMemberListEnum = 29, RULE_declarationTypeMemberListField = 30, 
		RULE_declarationTypeMemberListRule = 31, RULE_type = 32, RULE_typeParameterList = 33, 
		RULE_typeParameterListComma = 34, RULE_typeParameterListIndent = 35, RULE_typeParameter = 36, 
		RULE_typeParameterGeneric = 37, RULE_typeParameterTemplate = 38, RULE_compParameterList = 39, 
		RULE_compParameterListComma = 40, RULE_compParameterListIndent = 41, RULE_typeArgumentList = 42, 
		RULE_typeArgumentListComma = 43, RULE_typeArgumentListIndent = 44, RULE_typeArgument = 45, 
		RULE_typeInitializer = 46, RULE_typeInitializerComma = 47, RULE_typeInitializerIndent = 48, 
		RULE_typeInitializerField = 49, RULE_memberEnumValue = 50, RULE_memberEnum = 51, 
		RULE_memberField = 52, RULE_memberRule = 53, RULE_declarationVariable = 54, 
		RULE_declarationVariableTyped = 55, RULE_declarationVariableInferred = 56, 
		RULE_variableAssignment = 57, RULE_expression = 58, RULE_expressionConstant = 59, 
		RULE_expressionRule = 60, RULE_expressionLoop = 61, RULE_expressionOperatorBinary = 62, 
		RULE_expressionOperatorUnaryPrefix = 63, RULE_expressionOperatorArithmetic = 64, 
		RULE_expressionOperatorArithmeticUnaryPrefix = 65, RULE_expressionOperatorLogic = 66, 
		RULE_expressionOperatorLogicUnaryPrefix = 67, RULE_expressionOperatorComparison = 68, 
		RULE_expressionOperatorBits = 69, RULE_expressionOperatorBitsUnaryPrefix = 70, 
		RULE_expressionLiteralBool = 71, RULE_expressionLiteral = 72, RULE_nameQualified = 73, 
		RULE_nameQualifiedList = 74, RULE_nameQualifiedListComma = 75, RULE_nameQualifiedListIndent = 76, 
		RULE_nameIdentifier = 77, RULE_nameIdentifierList = 78, RULE_nameIdentifierListComma = 79, 
		RULE_nameIdentifierListIndent = 80, RULE_string = 81, RULE_number = 82, 
		RULE_comment = 83, RULE_newline = 84, RULE_freeSpace = 85;
	public static readonly string[] ruleNames = {
		"compilationUnit", "directiveMod", "directivePub", "directiveUse", "codeBlock", 
		"declaration", "declarationPub", "statement", "statementFlow", "statementIf", 
		"statementElse", "statementElseIf", "statementRet", "statementAssignment", 
		"statementExpression", "statementLoop", "declarationFunction", "declarationFunctionLocal", 
		"parameterList", "parameterListComma", "parameterListIndent", "parameter", 
		"compParameter", "argumentList", "argumentListComma", "argumentListIndent", 
		"argument", "declarationType", "declarationTypeMemberList", "declarationTypeMemberListEnum", 
		"declarationTypeMemberListField", "declarationTypeMemberListRule", "type", 
		"typeParameterList", "typeParameterListComma", "typeParameterListIndent", 
		"typeParameter", "typeParameterGeneric", "typeParameterTemplate", "compParameterList", 
		"compParameterListComma", "compParameterListIndent", "typeArgumentList", 
		"typeArgumentListComma", "typeArgumentListIndent", "typeArgument", "typeInitializer", 
		"typeInitializerComma", "typeInitializerIndent", "typeInitializerField", 
		"memberEnumValue", "memberEnum", "memberField", "memberRule", "declarationVariable", 
		"declarationVariableTyped", "declarationVariableInferred", "variableAssignment", 
		"expression", "expressionConstant", "expressionRule", "expressionLoop", 
		"expressionOperatorBinary", "expressionOperatorUnaryPrefix", "expressionOperatorArithmetic", 
		"expressionOperatorArithmeticUnaryPrefix", "expressionOperatorLogic", 
		"expressionOperatorLogicUnaryPrefix", "expressionOperatorComparison", 
		"expressionOperatorBits", "expressionOperatorBitsUnaryPrefix", "expressionLiteralBool", 
		"expressionLiteral", "nameQualified", "nameQualifiedList", "nameQualifiedListComma", 
		"nameQualifiedListIndent", "nameIdentifier", "nameIdentifierList", "nameIdentifierListComma", 
		"nameIdentifierListIndent", "string", "number", "comment", "newline", 
		"freeSpace"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'mod'", "'pub'", "'use'", "'self'", "'ret'", 
		"'brk'", "'cnt'", "'loop'", "'if'", "'else'", "'elif'", "'true'", "'false'", 
		"'in'", "'not'", "'and'", "'or'", null, null, null, null, null, null, 
		null, null, "'('", "')'", "'<'", "'>'", "'['", "']'", "'{'", "'}'", "'#'", 
		"':'", "';'", "'.'", "'..'", "'...'", "'='", "'<>'", "'>='", "'=<'", "'+'", 
		"'-'", "'*'", "'**'", "'/'", "'//'", "'%'", "'&'", "'|'", "'~'", "'^'", 
		"'<<'", "'|<'", "'>|'", "'?'", "'$'", "'@'", "'!'", "'\"'", "'''", "'`'", 
		"'_'", "','", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Indent", "Dedent", "Comment", "Mod", "Pub", "Use", "Self", "Ret", 
		"Brk", "Cnt", "Loop", "If", "Else", "Elif", "True", "False", "In", "Not", 
		"And", "Or", "NumberBin", "NumberOct", "NumberDec", "NumberDecPrefix", 
		"NumberHex", "Identifier", "Character", "String", "ParenOpen", "ParenClose", 
		"AngleOpen", "AngleClose", "BracketOpen", "BracketClose", "CurlyOpen", 
		"CurlyClose", "Hash", "Colon", "SemiColon", "Dot", "Range", "Spread", 
		"Eq", "Neq", "GtEq", "LtEq", "Plus", "Minus", "Multiply", "Power", "Divide", 
		"Root", "Modulo", "BitAnd", "BitOr", "BitNot", "BitXor_Imm", "BitShiftL", 
		"BitRollL", "BitRollR", "Question", "Dollar", "At", "Error", "StrQuote", 
		"CharQuote", "BackTick", "Discard", "Comma", "Sp", "Eol"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MajaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MajaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MajaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MajaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MajaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveModContext directiveMod() {
			return GetRuleContext<DirectiveModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveUseContext[] directiveUse() {
			return GetRuleContexts<DirectiveUseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveUseContext directiveUse(int i) {
			return GetRuleContext<DirectiveUseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivePubContext[] directivePub() {
			return GetRuleContexts<DirectivePubContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivePubContext directivePub(int i) {
			return GetRuleContext<DirectivePubContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mod) {
				{
				State = 172;
				directiveMod();
				}
			}

			State = 180;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 178;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Use:
						{
						State = 175;
						directiveUse();
						}
						break;
					case Pub:
						{
						State = 176;
						directivePub();
						}
						break;
					case Comment:
					case Sp:
					case Eol:
						{
						State = 177;
						newline();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72339078676584744L) != 0) || _la==Sp || _la==Eol) {
				{
				State = 186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 183;
					declaration();
					}
					break;
				case 2:
					{
					State = 184;
					statement();
					}
					break;
				case 3:
					{
					State = 185;
					newline();
					}
					break;
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 191;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(MajaParser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified() {
			return GetRuleContext<NameQualifiedContext>(0);
		}
		public DirectiveModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveModContext directiveMod() {
		DirectiveModContext _localctx = new DirectiveModContext(Context, State);
		EnterRule(_localctx, 2, RULE_directiveMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(Mod);
			State = 194;
			freeSpace();
			State = 195;
			nameQualified();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivePubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pub() { return GetToken(MajaParser.Pub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListContext nameQualifiedList() {
			return GetRuleContext<NameQualifiedListContext>(0);
		}
		public DirectivePubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directivePub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectivePub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivePubContext directivePub() {
		DirectivePubContext _localctx = new DirectivePubContext(Context, State);
		EnterRule(_localctx, 4, RULE_directivePub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(Pub);
			State = 198;
			freeSpace();
			State = 199;
			nameQualifiedList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Use() { return GetToken(MajaParser.Use, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListContext nameQualifiedList() {
			return GetRuleContext<NameQualifiedListContext>(0);
		}
		public DirectiveUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveUseContext directiveUse() {
		DirectiveUseContext _localctx = new DirectiveUseContext(Context, State);
		EnterRule(_localctx, 6, RULE_directiveUse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(Use);
			State = 202;
			freeSpace();
			State = 203;
			nameQualifiedList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_codeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 208;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 205;
					statement();
					}
					break;
				case 2:
					{
					State = 206;
					declaration();
					}
					break;
				case 3:
					{
					State = 207;
					newline();
					}
					break;
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72339078676584744L) != 0) || _la==Sp || _la==Eol );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationPubContext declarationPub() {
			return GetRuleContext<DeclarationPubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableContext declarationVariable() {
			return GetRuleContext<DeclarationVariableContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				declarationPub();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				declarationVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationPubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationFunctionContext declarationFunction() {
			return GetRuleContext<DeclarationFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeContext declarationType() {
			return GetRuleContext<DeclarationTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pub() { return GetToken(MajaParser.Pub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		public DeclarationPubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationPub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationPub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationPubContext declarationPub() {
		DeclarationPubContext _localctx = new DeclarationPubContext(Context, State);
		EnterRule(_localctx, 12, RULE_declarationPub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Pub) {
				{
				State = 216;
				Match(Pub);
				State = 217;
				Match(Sp);
				}
			}

			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 220;
				declarationFunction();
				}
				break;
			case 2:
				{
				State = 221;
				declarationType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementFlowContext statementFlow() {
			return GetRuleContext<StatementFlowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementAssignmentContext statementAssignment() {
			return GetRuleContext<StatementAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				statementFlow();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				statementAssignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 226;
				statementExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementRetContext statementRet() {
			return GetRuleContext<StatementRetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementIfContext statementIf() {
			return GetRuleContext<StatementIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementLoopContext statementLoop() {
			return GetRuleContext<StatementLoopContext>(0);
		}
		public StatementFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFlow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementFlowContext statementFlow() {
		StatementFlowContext _localctx = new StatementFlowContext(Context, State);
		EnterRule(_localctx, 16, RULE_statementFlow);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ret:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				statementRet();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				statementIf();
				}
				break;
			case Loop:
				EnterOuterAlt(_localctx, 3);
				{
				State = 231;
				statementLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MajaParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseContext statementElse() {
			return GetRuleContext<StatementElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseIfContext statementElseIf() {
			return GetRuleContext<StatementElseIfContext>(0);
		}
		public StatementIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementIfContext statementIf() {
		StatementIfContext _localctx = new StatementIfContext(Context, State);
		EnterRule(_localctx, 18, RULE_statementIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(If);
			State = 235;
			Match(Sp);
			State = 236;
			expression(0);
			State = 237;
			newline();
			State = 238;
			Match(Indent);
			State = 239;
			codeBlock();
			State = 240;
			Match(Dedent);
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 241;
				statementElse();
				}
				break;
			case 2:
				{
				State = 242;
				statementElseIf();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MajaParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		public StatementElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementElse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementElseContext statementElse() {
		StatementElseContext _localctx = new StatementElseContext(Context, State);
		EnterRule(_localctx, 20, RULE_statementElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(Else);
			State = 246;
			newline();
			State = 247;
			Match(Indent);
			State = 248;
			codeBlock();
			State = 249;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementElseIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MajaParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MajaParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Elif() { return GetToken(MajaParser.Elif, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseContext statementElse() {
			return GetRuleContext<StatementElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseIfContext statementElseIf() {
			return GetRuleContext<StatementElseIfContext>(0);
		}
		public StatementElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementElseIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementElseIfContext statementElseIf() {
		StatementElseIfContext _localctx = new StatementElseIfContext(Context, State);
		EnterRule(_localctx, 22, RULE_statementElseIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Else:
				{
				State = 251;
				Match(Else);
				State = 252;
				freeSpace();
				State = 253;
				Match(If);
				}
				break;
			case Elif:
				{
				State = 255;
				Match(Elif);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 258;
			Match(Sp);
			State = 259;
			expression(0);
			State = 260;
			newline();
			State = 261;
			Match(Indent);
			State = 262;
			codeBlock();
			State = 263;
			Match(Dedent);
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 264;
				statementElse();
				}
				break;
			case 2:
				{
				State = 265;
				statementElseIf();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementRetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ret() { return GetToken(MajaParser.Ret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementRetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementRet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementRet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementRetContext statementRet() {
		StatementRetContext _localctx = new StatementRetContext(Context, State);
		EnterRule(_localctx, 24, RULE_statementRet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(Ret);
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 269;
				Match(Sp);
				State = 270;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementAssignmentContext statementAssignment() {
		StatementAssignmentContext _localctx = new StatementAssignmentContext(Context, State);
		EnterRule(_localctx, 26, RULE_statementAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			nameIdentifier();
			State = 274;
			Match(Sp);
			State = 275;
			Match(Eq);
			State = 276;
			Match(Sp);
			State = 277;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_statementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MajaParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLoopContext expressionLoop() {
			return GetRuleContext<ExpressionLoopContext>(0);
		}
		public StatementLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLoopContext statementLoop() {
		StatementLoopContext _localctx = new StatementLoopContext(Context, State);
		EnterRule(_localctx, 30, RULE_statementLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(Loop);
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 282;
				Match(Sp);
				State = 283;
				expressionLoop();
				}
				break;
			}
			State = 286;
			newline();
			State = 287;
			Match(Indent);
			State = 288;
			codeBlock();
			State = 289;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(MajaParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(MajaParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DeclarationFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationFunctionContext declarationFunction() {
		DeclarationFunctionContext _localctx = new DeclarationFunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_declarationFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			nameIdentifier();
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 292;
				Match(Sp);
				}
			}

			State = 295;
			Match(Colon);
			State = 296;
			freeSpace();
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 297;
				typeParameterList();
				}
			}

			State = 300;
			parameterList();
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sp) {
					{
					State = 301;
					Match(Sp);
					}
				}

				State = 304;
				Match(Colon);
				State = 305;
				Match(Sp);
				State = 306;
				type();
				}
				break;
			}
			State = 309;
			newline();
			State = 310;
			Match(Indent);
			State = 311;
			codeBlock();
			State = 312;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationFunctionLocalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationFunctionContext declarationFunction() {
			return GetRuleContext<DeclarationFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		public DeclarationFunctionLocalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationFunctionLocal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationFunctionLocal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationFunctionLocalContext declarationFunctionLocal() {
		DeclarationFunctionLocalContext _localctx = new DeclarationFunctionLocalContext(Context, State);
		EnterRule(_localctx, 34, RULE_declarationFunctionLocal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(Indent);
			State = 315;
			declarationFunction();
			State = 316;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListCommaContext parameterListComma() {
			return GetRuleContext<ParameterListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListIndentContext parameterListIndent() {
			return GetRuleContext<ParameterListIndentContext>(0);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(ParenOpen);
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case Hash:
				{
				State = 319;
				parameterListComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 320;
				newline();
				State = 321;
				parameterListIndent();
				}
				break;
			case ParenClose:
				break;
			default:
				break;
			}
			State = 325;
			Match(ParenClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterContext[] compParameter() {
			return GetRuleContexts<CompParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterContext compParameter(int i) {
			return GetRuleContext<CompParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public ParameterListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListCommaContext parameterListComma() {
		ParameterListCommaContext _localctx = new ParameterListCommaContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameterListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 327;
				parameter();
				}
				break;
			case Hash:
				{
				State = 328;
				compParameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 331;
				Match(Comma);
				State = 332;
				Match(Sp);
				State = 335;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 333;
					parameter();
					}
					break;
				case Hash:
					{
					State = 334;
					compParameter();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterContext[] compParameter() {
			return GetRuleContexts<CompParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterContext compParameter(int i) {
			return GetRuleContext<CompParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public ParameterListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListIndentContext parameterListIndent() {
		ParameterListIndentContext _localctx = new ParameterListIndentContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameterListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(Indent);
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comment || _la==Sp) {
					{
					{
					State = 343;
					comment();
					}
					}
					State = 348;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 351;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 349;
					parameter();
					}
					break;
				case Hash:
					{
					State = 350;
					compParameter();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 353;
				newline();
				}
				}
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 137506062344L) != 0) || _la==Sp );
			State = 359;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			nameIdentifier();
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 362;
				Match(Sp);
				}
			}

			State = 365;
			Match(Colon);
			State = 366;
			Match(Sp);
			State = 367;
			type();
			State = 372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 368;
				Match(Sp);
				State = 369;
				Match(Eq);
				State = 370;
				Match(Sp);
				State = 371;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public CompParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompParameterContext compParameter() {
		CompParameterContext _localctx = new CompParameterContext(Context, State);
		EnterRule(_localctx, 44, RULE_compParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(Hash);
			State = 375;
			parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListCommaContext argumentListComma() {
			return GetRuleContext<ArgumentListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListIndentContext argumentListIndent() {
			return GetRuleContext<ArgumentListIndentContext>(0);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 46, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(ParenOpen);
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comment || _la==Sp || _la==Eol) {
				{
				State = 378;
				newline();
				}
			}

			State = 383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case Not:
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Identifier:
			case Character:
			case String:
			case ParenOpen:
			case BracketOpen:
			case Minus:
			case BitNot:
				{
				State = 381;
				argumentListComma();
				}
				break;
			case Indent:
				{
				State = 382;
				argumentListIndent();
				}
				break;
			case ParenClose:
				break;
			default:
				break;
			}
			State = 385;
			Match(ParenClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public ArgumentListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListCommaContext argumentListComma() {
		ArgumentListCommaContext _localctx = new ArgumentListCommaContext(Context, State);
		EnterRule(_localctx, 48, RULE_argumentListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			argument();
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 388;
				Match(Comma);
				State = 389;
				Match(Sp);
				State = 390;
				argument();
				}
				}
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public ArgumentListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListIndentContext argumentListIndent() {
		ArgumentListIndentContext _localctx = new ArgumentListIndentContext(Context, State);
		EnterRule(_localctx, 50, RULE_argumentListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(Indent);
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 397;
				argument();
				State = 398;
				newline();
				}
				}
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72339078676578304L) != 0) );
			State = 404;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 52, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 406;
				nameIdentifier();
				State = 407;
				Match(Sp);
				State = 408;
				Match(Eq);
				State = 409;
				Match(Sp);
				}
				break;
			}
			State = 413;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListContext declarationTypeMemberList() {
			return GetRuleContext<DeclarationTypeMemberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterListContext compParameterList() {
			return GetRuleContext<CompParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DeclarationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeContext declarationType() {
		DeclarationTypeContext _localctx = new DeclarationTypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_declarationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			nameIdentifier();
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 416;
				typeParameterList();
				}
			}

			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ParenOpen) {
				{
				State = 419;
				compParameterList();
				}
			}

			State = 428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sp) {
					{
					State = 422;
					Match(Sp);
					}
				}

				State = 425;
				Match(Colon);
				State = 426;
				Match(Sp);
				State = 427;
				type();
				}
				break;
			}
			State = 430;
			newline();
			State = 431;
			Match(Indent);
			State = 432;
			declarationTypeMemberList();
			State = 433;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListEnumContext[] declarationTypeMemberListEnum() {
			return GetRuleContexts<DeclarationTypeMemberListEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListEnumContext declarationTypeMemberListEnum(int i) {
			return GetRuleContext<DeclarationTypeMemberListEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListFieldContext[] declarationTypeMemberListField() {
			return GetRuleContexts<DeclarationTypeMemberListFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListFieldContext declarationTypeMemberListField(int i) {
			return GetRuleContext<DeclarationTypeMemberListFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListRuleContext[] declarationTypeMemberListRule() {
			return GetRuleContexts<DeclarationTypeMemberListRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListRuleContext declarationTypeMemberListRule(int i) {
			return GetRuleContext<DeclarationTypeMemberListRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public DeclarationTypeMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListContext declarationTypeMemberList() {
		DeclarationTypeMemberListContext _localctx = new DeclarationTypeMemberListContext(Context, State);
		EnterRule(_localctx, 56, RULE_declarationTypeMemberList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 439;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 435;
					declarationTypeMemberListEnum();
					}
					break;
				case 2:
					{
					State = 436;
					declarationTypeMemberListField();
					}
					break;
				case 3:
					{
					State = 437;
					declarationTypeMemberListRule();
					}
					break;
				case 4:
					{
					State = 438;
					newline();
					}
					break;
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 137506062344L) != 0) || _la==Sp || _la==Eol );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumValueContext[] memberEnumValue() {
			return GetRuleContexts<MemberEnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumValueContext memberEnumValue(int i) {
			return GetRuleContext<MemberEnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumContext[] memberEnum() {
			return GetRuleContexts<MemberEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumContext memberEnum(int i) {
			return GetRuleContext<MemberEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext[] freeSpace() {
			return GetRuleContexts<FreeSpaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace(int i) {
			return GetRuleContext<FreeSpaceContext>(i);
		}
		public DeclarationTypeMemberListEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberListEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberListEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListEnumContext declarationTypeMemberListEnum() {
		DeclarationTypeMemberListEnumContext _localctx = new DeclarationTypeMemberListEnumContext(Context, State);
		EnterRule(_localctx, 58, RULE_declarationTypeMemberListEnum);
		int _la;
		try {
			int _alt;
			State = 466;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 446;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 443;
						memberEnumValue();
						State = 444;
						newline();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 448;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 450;
					memberEnum();
					State = 457;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 451;
						Match(Comma);
						State = 452;
						freeSpace();
						State = 453;
						memberEnum();
						}
						}
						State = 459;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 462;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Identifier );
				State = 464;
				newline();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberFieldContext[] memberField() {
			return GetRuleContexts<MemberFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberFieldContext memberField(int i) {
			return GetRuleContext<MemberFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public DeclarationTypeMemberListFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberListField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberListField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListFieldContext declarationTypeMemberListField() {
		DeclarationTypeMemberListFieldContext _localctx = new DeclarationTypeMemberListFieldContext(Context, State);
		EnterRule(_localctx, 60, RULE_declarationTypeMemberListField);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 468;
					memberField();
					State = 469;
					newline();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 473;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberRuleContext[] memberRule() {
			return GetRuleContexts<MemberRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberRuleContext memberRule(int i) {
			return GetRuleContext<MemberRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public DeclarationTypeMemberListRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberListRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberListRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListRuleContext declarationTypeMemberListRule() {
		DeclarationTypeMemberListRuleContext _localctx = new DeclarationTypeMemberListRuleContext(Context, State);
		EnterRule(_localctx, 62, RULE_declarationTypeMemberListRule);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 475;
					memberRule();
					State = 476;
					newline();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 480;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			nameIdentifier();
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 483;
				typeArgumentList();
				}
			}

			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 486;
				argumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListCommaContext typeParameterListComma() {
			return GetRuleContext<TypeParameterListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListIndentContext typeParameterListIndent() {
			return GetRuleContext<TypeParameterListIndentContext>(0);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeParameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(AngleOpen);
			State = 494;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case Hash:
				{
				State = 490;
				typeParameterListComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 491;
				newline();
				State = 492;
				typeParameterListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 496;
			Match(AngleClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public TypeParameterListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListCommaContext typeParameterListComma() {
		TypeParameterListCommaContext _localctx = new TypeParameterListCommaContext(Context, State);
		EnterRule(_localctx, 68, RULE_typeParameterListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			typeParameter();
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 499;
				Match(Comma);
				State = 500;
				Match(Sp);
				State = 501;
				typeParameter();
				}
				}
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public TypeParameterListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListIndentContext typeParameterListIndent() {
		TypeParameterListIndentContext _localctx = new TypeParameterListIndentContext(Context, State);
		EnterRule(_localctx, 70, RULE_typeParameterListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(Indent);
			State = 517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comment || _la==Sp) {
					{
					{
					State = 508;
					comment();
					}
					}
					State = 513;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 514;
				typeParameter();
				State = 515;
				newline();
				}
				}
				State = 519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 137506062344L) != 0) || _la==Sp );
			State = 521;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterGenericContext typeParameterGeneric() {
			return GetRuleContext<TypeParameterGenericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterTemplateContext typeParameterTemplate() {
			return GetRuleContext<TypeParameterTemplateContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 72, RULE_typeParameter);
		try {
			State = 525;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 523;
				typeParameterGeneric();
				}
				break;
			case Hash:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524;
				typeParameterTemplate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		public TypeParameterGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterGenericContext typeParameterGeneric() {
		TypeParameterGenericContext _localctx = new TypeParameterGenericContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeParameterGeneric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			type();
			State = 532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 528;
				Match(Sp);
				State = 529;
				Match(Eq);
				State = 530;
				Match(Sp);
				State = 531;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterTemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		public TypeParameterTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterTemplate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterTemplateContext typeParameterTemplate() {
		TypeParameterTemplateContext _localctx = new TypeParameterTemplateContext(Context, State);
		EnterRule(_localctx, 76, RULE_typeParameterTemplate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			Match(Hash);
			State = 535;
			type();
			State = 540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 536;
				Match(Sp);
				State = 537;
				Match(Eq);
				State = 538;
				Match(Sp);
				State = 539;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterListCommaContext compParameterListComma() {
			return GetRuleContext<CompParameterListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterListIndentContext compParameterListIndent() {
			return GetRuleContext<CompParameterListIndentContext>(0);
		}
		public CompParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompParameterListContext compParameterList() {
		CompParameterListContext _localctx = new CompParameterListContext(Context, State);
		EnterRule(_localctx, 78, RULE_compParameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			Match(ParenOpen);
			State = 547;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Hash:
				{
				State = 543;
				compParameterListComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 544;
				newline();
				State = 545;
				compParameterListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 549;
			Match(ParenClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompParameterListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterContext[] compParameter() {
			return GetRuleContexts<CompParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterContext compParameter(int i) {
			return GetRuleContext<CompParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public CompParameterListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compParameterListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompParameterListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompParameterListCommaContext compParameterListComma() {
		CompParameterListCommaContext _localctx = new CompParameterListCommaContext(Context, State);
		EnterRule(_localctx, 80, RULE_compParameterListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			compParameter();
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 552;
				Match(Comma);
				State = 553;
				Match(Sp);
				State = 554;
				compParameter();
				}
				}
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompParameterListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterContext[] compParameter() {
			return GetRuleContexts<CompParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterContext compParameter(int i) {
			return GetRuleContext<CompParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public CompParameterListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compParameterListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompParameterListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompParameterListIndentContext compParameterListIndent() {
		CompParameterListIndentContext _localctx = new CompParameterListIndentContext(Context, State);
		EnterRule(_localctx, 82, RULE_compParameterListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			Match(Indent);
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comment || _la==Sp) {
					{
					{
					State = 561;
					comment();
					}
					}
					State = 566;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 567;
				compParameter();
				State = 568;
				newline();
				}
				}
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Comment || _la==Hash || _la==Sp );
			State = 574;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListCommaContext typeArgumentListComma() {
			return GetRuleContext<TypeArgumentListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListIndentContext typeArgumentListIndent() {
			return GetRuleContext<TypeArgumentListIndentContext>(0);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeArgumentList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(AngleOpen);
			State = 581;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case Not:
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Identifier:
			case Character:
			case String:
			case ParenOpen:
			case BracketOpen:
			case Minus:
			case BitNot:
				{
				State = 577;
				typeArgumentListComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 578;
				newline();
				State = 579;
				typeArgumentListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 583;
			Match(AngleClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public TypeArgumentListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListCommaContext typeArgumentListComma() {
		TypeArgumentListCommaContext _localctx = new TypeArgumentListCommaContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeArgumentListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			typeArgument();
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 586;
				Match(Comma);
				State = 587;
				Match(Sp);
				State = 588;
				typeArgument();
				}
				}
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public TypeArgumentListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListIndentContext typeArgumentListIndent() {
		TypeArgumentListIndentContext _localctx = new TypeArgumentListIndentContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeArgumentListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			Match(Indent);
			State = 598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 595;
				typeArgument();
				State = 596;
				newline();
				}
				}
				State = 600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72339078676578304L) != 0) );
			State = 602;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeArgument);
		try {
			State = 606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 604;
				type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 605;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerCommaContext typeInitializerComma() {
			return GetRuleContext<TypeInitializerCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerIndentContext typeInitializerIndent() {
			return GetRuleContext<TypeInitializerIndentContext>(0);
		}
		public TypeInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerContext typeInitializer() {
		TypeInitializerContext _localctx = new TypeInitializerContext(Context, State);
		EnterRule(_localctx, 92, RULE_typeInitializer);
		try {
			State = 612;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CurlyOpen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 608;
				typeInitializerComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 609;
				newline();
				State = 610;
				typeInitializerIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyOpen() { return GetToken(MajaParser.CurlyOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext[] typeInitializerField() {
			return GetRuleContexts<TypeInitializerFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext typeInitializerField(int i) {
			return GetRuleContext<TypeInitializerFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyClose() { return GetToken(MajaParser.CurlyClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		public TypeInitializerCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializerComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializerComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerCommaContext typeInitializerComma() {
		TypeInitializerCommaContext _localctx = new TypeInitializerCommaContext(Context, State);
		EnterRule(_localctx, 94, RULE_typeInitializerComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			Match(CurlyOpen);
			State = 615;
			Match(Sp);
			State = 616;
			typeInitializerField();
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 617;
				Match(Comma);
				State = 618;
				Match(Sp);
				State = 619;
				typeInitializerField();
				}
				}
				State = 624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 625;
			Match(Sp);
			State = 626;
			Match(CurlyClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext[] typeInitializerField() {
			return GetRuleContexts<TypeInitializerFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext typeInitializerField(int i) {
			return GetRuleContext<TypeInitializerFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public TypeInitializerIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializerIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializerIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerIndentContext typeInitializerIndent() {
		TypeInitializerIndentContext _localctx = new TypeInitializerIndentContext(Context, State);
		EnterRule(_localctx, 96, RULE_typeInitializerIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			Match(Indent);
			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 629;
				typeInitializerField();
				State = 630;
				newline();
				}
				}
				State = 634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 636;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeInitializerFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializerField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializerField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerFieldContext typeInitializerField() {
		TypeInitializerFieldContext _localctx = new TypeInitializerFieldContext(Context, State);
		EnterRule(_localctx, 98, RULE_typeInitializerField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			nameIdentifier();
			State = 639;
			Match(Sp);
			State = 640;
			Match(Eq);
			State = 641;
			Match(Sp);
			State = 642;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberEnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionConstantContext expressionConstant() {
			return GetRuleContext<ExpressionConstantContext>(0);
		}
		public MemberEnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberEnumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberEnumValueContext memberEnumValue() {
		MemberEnumValueContext _localctx = new MemberEnumValueContext(Context, State);
		EnterRule(_localctx, 100, RULE_memberEnumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			nameIdentifier();
			State = 649;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 645;
				Match(Sp);
				State = 646;
				Match(Eq);
				State = 647;
				Match(Sp);
				State = 648;
				expressionConstant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public MemberEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberEnumContext memberEnum() {
		MemberEnumContext _localctx = new MemberEnumContext(Context, State);
		EnterRule(_localctx, 102, RULE_memberEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemberFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberFieldContext memberField() {
		MemberFieldContext _localctx = new MemberFieldContext(Context, State);
		EnterRule(_localctx, 104, RULE_memberField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			nameIdentifier();
			State = 655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 654;
				Match(Sp);
				}
			}

			State = 657;
			Match(Colon);
			State = 658;
			Match(Sp);
			State = 659;
			type();
			State = 664;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 660;
				Match(Sp);
				State = 661;
				Match(Eq);
				State = 662;
				Match(Sp);
				State = 663;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionRuleContext expressionRule() {
			return GetRuleContext<ExpressionRuleContext>(0);
		}
		public MemberRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberRuleContext memberRule() {
		MemberRuleContext _localctx = new MemberRuleContext(Context, State);
		EnterRule(_localctx, 106, RULE_memberRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			Match(Hash);
			State = 667;
			expressionRule();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableTypedContext declarationVariableTyped() {
			return GetRuleContext<DeclarationVariableTypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableInferredContext declarationVariableInferred() {
			return GetRuleContext<DeclarationVariableInferredContext>(0);
		}
		public DeclarationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableContext declarationVariable() {
		DeclarationVariableContext _localctx = new DeclarationVariableContext(Context, State);
		EnterRule(_localctx, 108, RULE_declarationVariable);
		try {
			State = 671;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 669;
				declarationVariableTyped();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 670;
				declarationVariableInferred();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableTypedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationVariableTypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariableTyped; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariableTyped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableTypedContext declarationVariableTyped() {
		DeclarationVariableTypedContext _localctx = new DeclarationVariableTypedContext(Context, State);
		EnterRule(_localctx, 110, RULE_declarationVariableTyped);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			nameIdentifier();
			State = 675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 674;
				Match(Sp);
				}
			}

			State = 677;
			Match(Colon);
			State = 678;
			Match(Sp);
			State = 679;
			type();
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sp) {
					{
					State = 680;
					Match(Sp);
					}
				}

				State = 683;
				Match(Eq);
				State = 684;
				Match(Sp);
				State = 685;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableInferredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationVariableInferredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariableInferred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariableInferred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableInferredContext declarationVariableInferred() {
		DeclarationVariableInferredContext _localctx = new DeclarationVariableInferredContext(Context, State);
		EnterRule(_localctx, 112, RULE_declarationVariableInferred);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			nameIdentifier();
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 689;
				Match(Sp);
				}
			}

			State = 692;
			Match(Colon);
			State = 693;
			Match(Eq);
			State = 694;
			Match(Sp);
			State = 695;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 114, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			nameIdentifier();
			State = 698;
			Match(Sp);
			State = 699;
			Match(Eq);
			State = 700;
			Match(Sp);
			State = 701;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionIdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public ExpressionIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionMemberAccessContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MajaParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public ExpressionMemberAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInvocationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public ExpressionInvocationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionRangeContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketOpen() { return GetToken(MajaParser.BracketOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Range() { return GetToken(MajaParser.Range, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketClose() { return GetToken(MajaParser.BracketClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionRangeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryPrefixContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorUnaryPrefixContext expressionOperatorUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionUnaryPrefixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionTypeInitializerContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerContext typeInitializer() {
			return GetRuleContext<TypeInitializerContext>(0);
		}
		public ExpressionTypeInitializerContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionTypeInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBinaryContext expressionOperatorBinary() {
			return GetRuleContext<ExpressionOperatorBinaryContext>(0);
		}
		public ExpressionBinaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionConstContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionConstantContext expressionConstant() {
			return GetRuleContext<ExpressionConstantContext>(0);
		}
		public ExpressionConstContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionConst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionPrecedenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		public ExpressionPrecedenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionPrecedence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 116;
		EnterRecursionRule(_localctx, 116, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				_localctx = new ExpressionConstContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 704;
				expressionConstant();
				}
				break;
			case 2:
				{
				_localctx = new ExpressionUnaryPrefixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 705;
				expressionOperatorUnaryPrefix();
				State = 706;
				expression(7);
				}
				break;
			case 3:
				{
				_localctx = new ExpressionTypeInitializerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 708;
				type();
				State = 709;
				typeInitializer();
				}
				break;
			case 4:
				{
				_localctx = new ExpressionRangeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 711;
				Match(BracketOpen);
				State = 713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72339078676578304L) != 0)) {
					{
					State = 712;
					expression(0);
					}
				}

				State = 715;
				Match(Range);
				State = 717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72339078676578304L) != 0)) {
					{
					State = 716;
					expression(0);
					}
				}

				State = 719;
				Match(BracketClose);
				}
				break;
			case 5:
				{
				_localctx = new ExpressionPrecedenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 720;
				Match(ParenOpen);
				State = 721;
				expression(0);
				State = 722;
				Match(ParenClose);
				}
				break;
			case 6:
				{
				_localctx = new ExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 724;
				nameIdentifier();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 743;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 741;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
					case 1:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 727;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 728;
						Match(Sp);
						State = 729;
						expressionOperatorBinary();
						State = 730;
						Match(Sp);
						State = 731;
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionInvocationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 733;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 735;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==AngleOpen) {
							{
							State = 734;
							typeArgumentList();
							}
						}

						State = 737;
						argumentList();
						}
						break;
					case 3:
						{
						_localctx = new ExpressionMemberAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 738;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 739;
						Match(Dot);
						State = 740;
						nameIdentifier();
						}
						break;
					}
					} 
				}
				State = 745;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLiteralContext expressionLiteral() {
			return GetRuleContext<ExpressionLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLiteralBoolContext expressionLiteralBool() {
			return GetRuleContext<ExpressionLiteralBoolContext>(0);
		}
		public ExpressionConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionConstantContext expressionConstant() {
		ExpressionConstantContext _localctx = new ExpressionConstantContext(Context, State);
		EnterRule(_localctx, 118, RULE_expressionConstant);
		try {
			State = 748;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
			case String:
				EnterOuterAlt(_localctx, 1);
				{
				State = 746;
				expressionLiteral();
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 2);
				{
				State = 747;
				expressionLiteralBool();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionRuleContext expressionRule() {
		ExpressionRuleContext _localctx = new ExpressionRuleContext(Context, State);
		EnterRule(_localctx, 120, RULE_expressionRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLoopContext expressionLoop() {
		ExpressionLoopContext _localctx = new ExpressionLoopContext(Context, State);
		EnterRule(_localctx, 122, RULE_expressionLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 752;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorArithmeticContext expressionOperatorArithmetic() {
			return GetRuleContext<ExpressionOperatorArithmeticContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorLogicContext expressionOperatorLogic() {
			return GetRuleContext<ExpressionOperatorLogicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorComparisonContext expressionOperatorComparison() {
			return GetRuleContext<ExpressionOperatorComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBitsContext expressionOperatorBits() {
			return GetRuleContext<ExpressionOperatorBitsContext>(0);
		}
		public ExpressionOperatorBinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBinary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBinaryContext expressionOperatorBinary() {
		ExpressionOperatorBinaryContext _localctx = new ExpressionOperatorBinaryContext(Context, State);
		EnterRule(_localctx, 124, RULE_expressionOperatorBinary);
		try {
			State = 758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 754;
				expressionOperatorArithmetic();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 755;
				expressionOperatorLogic();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 756;
				expressionOperatorComparison();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 757;
				expressionOperatorBits();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorArithmeticUnaryPrefixContext expressionOperatorArithmeticUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorArithmeticUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorLogicUnaryPrefixContext expressionOperatorLogicUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorLogicUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBitsUnaryPrefixContext expressionOperatorBitsUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorBitsUnaryPrefixContext>(0);
		}
		public ExpressionOperatorUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorUnaryPrefixContext expressionOperatorUnaryPrefix() {
		ExpressionOperatorUnaryPrefixContext _localctx = new ExpressionOperatorUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 126, RULE_expressionOperatorUnaryPrefix);
		try {
			State = 763;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Minus:
				EnterOuterAlt(_localctx, 1);
				{
				State = 760;
				expressionOperatorArithmeticUnaryPrefix();
				}
				break;
			case Not:
				EnterOuterAlt(_localctx, 2);
				{
				State = 761;
				expressionOperatorLogicUnaryPrefix();
				}
				break;
			case BitNot:
				EnterOuterAlt(_localctx, 3);
				{
				State = 762;
				expressionOperatorBitsUnaryPrefix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorArithmeticContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MajaParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MajaParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MajaParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MajaParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(MajaParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MajaParser.Power, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Root() { return GetToken(MajaParser.Root, 0); }
		public ExpressionOperatorArithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorArithmetic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorArithmeticContext expressionOperatorArithmetic() {
		ExpressionOperatorArithmeticContext _localctx = new ExpressionOperatorArithmeticContext(Context, State);
		EnterRule(_localctx, 128, RULE_expressionOperatorArithmetic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17873661021126656L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorArithmeticUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MajaParser.Minus, 0); }
		public ExpressionOperatorArithmeticUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorArithmeticUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorArithmeticUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorArithmeticUnaryPrefixContext expressionOperatorArithmeticUnaryPrefix() {
		ExpressionOperatorArithmeticUnaryPrefixContext _localctx = new ExpressionOperatorArithmeticUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 130, RULE_expressionOperatorArithmeticUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			Match(Minus);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorLogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MajaParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MajaParser.Or, 0); }
		public ExpressionOperatorLogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorLogic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorLogicContext expressionOperatorLogic() {
		ExpressionOperatorLogicContext _localctx = new ExpressionOperatorLogicContext(Context, State);
		EnterRule(_localctx, 132, RULE_expressionOperatorLogic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Or) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorLogicUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MajaParser.Not, 0); }
		public ExpressionOperatorLogicUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorLogicUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorLogicUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorLogicUnaryPrefixContext expressionOperatorLogicUnaryPrefix() {
		ExpressionOperatorLogicUnaryPrefixContext _localctx = new ExpressionOperatorLogicUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 134, RULE_expressionOperatorLogicUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			Match(Not);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Neq() { return GetToken(MajaParser.Neq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GtEq() { return GetToken(MajaParser.GtEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LtEq() { return GetToken(MajaParser.LtEq, 0); }
		public ExpressionOperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorComparisonContext expressionOperatorComparison() {
		ExpressionOperatorComparisonContext _localctx = new ExpressionOperatorComparisonContext(Context, State);
		EnterRule(_localctx, 136, RULE_expressionOperatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 131947837784064L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MajaParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MajaParser.BitOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXor_Imm() { return GetToken(MajaParser.BitXor_Imm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitShiftL() { return GetToken(MajaParser.BitShiftL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AngleClose() { return GetTokens(MajaParser.AngleClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose(int i) {
			return GetToken(MajaParser.AngleClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitRollL() { return GetToken(MajaParser.BitRollL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitRollR() { return GetToken(MajaParser.BitRollR, 0); }
		public ExpressionOperatorBitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBitsContext expressionOperatorBits() {
		ExpressionOperatorBitsContext _localctx = new ExpressionOperatorBitsContext(Context, State);
		EnterRule(_localctx, 138, RULE_expressionOperatorBits);
		try {
			State = 786;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BitAnd:
				EnterOuterAlt(_localctx, 1);
				{
				State = 775;
				Match(BitAnd);
				}
				break;
			case BitOr:
				EnterOuterAlt(_localctx, 2);
				{
				State = 776;
				Match(BitOr);
				}
				break;
			case BitXor_Imm:
				EnterOuterAlt(_localctx, 3);
				{
				State = 777;
				Match(BitXor_Imm);
				}
				break;
			case BitShiftL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 778;
				Match(BitShiftL);
				}
				break;
			case AngleClose:
				EnterOuterAlt(_localctx, 5);
				{
				State = 780;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
				case 1:
					{
					State = 779;
					Match(AngleClose);
					}
					break;
				}
				State = 782;
				Match(AngleClose);
				State = 783;
				Match(AngleClose);
				}
				break;
			case BitRollL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 784;
				Match(BitRollL);
				}
				break;
			case BitRollR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 785;
				Match(BitRollR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBitsUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MajaParser.BitNot, 0); }
		public ExpressionOperatorBitsUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBitsUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBitsUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBitsUnaryPrefixContext expressionOperatorBitsUnaryPrefix() {
		ExpressionOperatorBitsUnaryPrefixContext _localctx = new ExpressionOperatorBitsUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 140, RULE_expressionOperatorBitsUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 788;
			Match(BitNot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLiteralBoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MajaParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MajaParser.False, 0); }
		public ExpressionLiteralBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLiteralBool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteralBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLiteralBoolContext expressionLiteralBool() {
		ExpressionLiteralBoolContext _localctx = new ExpressionLiteralBoolContext(Context, State);
		EnterRule(_localctx, 142, RULE_expressionLiteralBool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExpressionLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLiteralContext expressionLiteral() {
		ExpressionLiteralContext _localctx = new ExpressionLiteralContext(Context, State);
		EnterRule(_localctx, 144, RULE_expressionLiteral);
		try {
			State = 794;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
				EnterOuterAlt(_localctx, 1);
				{
				State = 792;
				number();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 793;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MajaParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MajaParser.Dot, i);
		}
		public NameQualifiedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualified; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualified(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedContext nameQualified() {
		NameQualifiedContext _localctx = new NameQualifiedContext(Context, State);
		EnterRule(_localctx, 146, RULE_nameQualified);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			nameIdentifier();
			State = 801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 797;
				Match(Dot);
				State = 798;
				nameIdentifier();
				}
				}
				State = 803;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListCommaContext nameQualifiedListComma() {
			return GetRuleContext<NameQualifiedListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListIndentContext nameQualifiedListIndent() {
			return GetRuleContext<NameQualifiedListIndentContext>(0);
		}
		public NameQualifiedListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListContext nameQualifiedList() {
		NameQualifiedListContext _localctx = new NameQualifiedListContext(Context, State);
		EnterRule(_localctx, 148, RULE_nameQualifiedList);
		try {
			State = 806;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 804;
				nameQualifiedListComma();
				}
				break;
			case Indent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 805;
				nameQualifiedListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext[] nameQualified() {
			return GetRuleContexts<NameQualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified(int i) {
			return GetRuleContext<NameQualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		public NameQualifiedListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListCommaContext nameQualifiedListComma() {
		NameQualifiedListCommaContext _localctx = new NameQualifiedListCommaContext(Context, State);
		EnterRule(_localctx, 150, RULE_nameQualifiedListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808;
			nameQualified();
			State = 810;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 809;
				Match(Sp);
				}
				break;
			}
			State = 821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 812;
				Match(Comma);
				State = 814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 813;
					Match(Sp);
					}
					}
					State = 816;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				State = 818;
				nameQualified();
				}
				}
				State = 823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext[] nameQualified() {
			return GetRuleContexts<NameQualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified(int i) {
			return GetRuleContext<NameQualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NameQualifiedListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListIndentContext nameQualifiedListIndent() {
		NameQualifiedListIndentContext _localctx = new NameQualifiedListIndentContext(Context, State);
		EnterRule(_localctx, 152, RULE_nameQualifiedListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			Match(Indent);
			State = 828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 825;
				nameQualified();
				State = 826;
				newline();
				}
				}
				State = 830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 832;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MajaParser.Identifier, 0); }
		public NameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierContext nameIdentifier() {
		NameIdentifierContext _localctx = new NameIdentifierContext(Context, State);
		EnterRule(_localctx, 154, RULE_nameIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListCommaContext nameQualifiedListComma() {
			return GetRuleContext<NameQualifiedListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListIndentContext nameQualifiedListIndent() {
			return GetRuleContext<NameQualifiedListIndentContext>(0);
		}
		public NameIdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListContext nameIdentifierList() {
		NameIdentifierListContext _localctx = new NameIdentifierListContext(Context, State);
		EnterRule(_localctx, 156, RULE_nameIdentifierList);
		try {
			State = 838;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 836;
				nameQualifiedListComma();
				}
				break;
			case Indent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 837;
				nameQualifiedListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		public NameIdentifierListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListCommaContext nameIdentifierListComma() {
		NameIdentifierListCommaContext _localctx = new NameIdentifierListCommaContext(Context, State);
		EnterRule(_localctx, 158, RULE_nameIdentifierListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			nameIdentifier();
			State = 842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 841;
				Match(Sp);
				}
			}

			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 844;
				Match(Comma);
				State = 846;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 845;
					Match(Sp);
					}
					}
					State = 848;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				State = 850;
				nameIdentifier();
				}
				}
				State = 855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NameIdentifierListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListIndentContext nameIdentifierListIndent() {
		NameIdentifierListIndentContext _localctx = new NameIdentifierListIndentContext(Context, State);
		EnterRule(_localctx, 160, RULE_nameIdentifierListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			Match(Indent);
			State = 860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 857;
				nameIdentifier();
				State = 858;
				newline();
				}
				}
				State = 862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 864;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(MajaParser.String, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 162, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 866;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberBin() { return GetToken(MajaParser.NumberBin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDec() { return GetToken(MajaParser.NumberDec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDecPrefix() { return GetToken(MajaParser.NumberDecPrefix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberHex() { return GetToken(MajaParser.NumberHex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberOct() { return GetToken(MajaParser.NumberOct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character() { return GetToken(MajaParser.Character, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 164, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 199229440L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(MajaParser.Comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eol() { return GetToken(MajaParser.Eol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 166, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sp) {
				{
				{
				State = 870;
				Match(Sp);
				}
				}
				State = 875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 876;
			Match(Comment);
			State = 877;
			Match(Eol);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(MajaParser.Comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Eol() { return GetTokens(MajaParser.Eol); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eol(int i) {
			return GetToken(MajaParser.Eol, i);
		}
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 168, RULE_newline);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sp) {
				{
				{
				State = 879;
				Match(Sp);
				}
				}
				State = 884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comment) {
				{
				State = 885;
				Match(Comment);
				}
			}

			State = 889;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 888;
					Match(Eol);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 891;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeSpaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public FreeSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeSpace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreeSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeSpaceContext freeSpace() {
		FreeSpaceContext _localctx = new FreeSpaceContext(Context, State);
		EnterRule(_localctx, 170, RULE_freeSpace);
		int _la;
		try {
			State = 899;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 893;
					Match(Sp);
					}
					}
					State = 896;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 898;
				newline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 58: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,71,902,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,1,0,3,0,174,8,0,1,0,1,0,1,0,5,0,179,8,0,10,0,12,0,182,9,0,1,
		0,1,0,1,0,5,0,187,8,0,10,0,12,0,190,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,
		2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,4,4,209,8,4,11,4,12,4,210,1,5,1,
		5,3,5,215,8,5,1,6,1,6,3,6,219,8,6,1,6,1,6,3,6,223,8,6,1,7,1,7,1,7,3,7,
		228,8,7,1,8,1,8,1,8,3,8,233,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,
		9,244,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,3,11,
		257,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,267,8,11,1,12,1,
		12,1,12,3,12,272,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,
		1,15,3,15,285,8,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,3,16,294,8,16,1,
		16,1,16,1,16,3,16,299,8,16,1,16,1,16,3,16,303,8,16,1,16,1,16,1,16,3,16,
		308,8,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
		18,1,18,3,18,324,8,18,1,18,1,18,1,19,1,19,3,19,330,8,19,1,19,1,19,1,19,
		1,19,3,19,336,8,19,5,19,338,8,19,10,19,12,19,341,9,19,1,20,1,20,5,20,345,
		8,20,10,20,12,20,348,9,20,1,20,1,20,3,20,352,8,20,1,20,1,20,4,20,356,8,
		20,11,20,12,20,357,1,20,1,20,1,21,1,21,3,21,364,8,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,3,21,373,8,21,1,22,1,22,1,22,1,23,1,23,3,23,380,8,23,
		1,23,1,23,3,23,384,8,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,392,8,24,10,
		24,12,24,395,9,24,1,25,1,25,1,25,1,25,4,25,401,8,25,11,25,12,25,402,1,
		25,1,25,1,26,1,26,1,26,1,26,1,26,3,26,412,8,26,1,26,1,26,1,27,1,27,3,27,
		418,8,27,1,27,3,27,421,8,27,1,27,3,27,424,8,27,1,27,1,27,1,27,3,27,429,
		8,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,4,28,440,8,28,11,28,
		12,28,441,1,29,1,29,1,29,4,29,447,8,29,11,29,12,29,448,1,29,1,29,1,29,
		1,29,1,29,5,29,456,8,29,10,29,12,29,459,9,29,4,29,461,8,29,11,29,12,29,
		462,1,29,1,29,3,29,467,8,29,1,30,1,30,1,30,4,30,472,8,30,11,30,12,30,473,
		1,31,1,31,1,31,4,31,479,8,31,11,31,12,31,480,1,32,1,32,3,32,485,8,32,1,
		32,3,32,488,8,32,1,33,1,33,1,33,1,33,1,33,3,33,495,8,33,1,33,1,33,1,34,
		1,34,1,34,1,34,5,34,503,8,34,10,34,12,34,506,9,34,1,35,1,35,5,35,510,8,
		35,10,35,12,35,513,9,35,1,35,1,35,1,35,4,35,518,8,35,11,35,12,35,519,1,
		35,1,35,1,36,1,36,3,36,526,8,36,1,37,1,37,1,37,1,37,1,37,3,37,533,8,37,
		1,38,1,38,1,38,1,38,1,38,1,38,3,38,541,8,38,1,39,1,39,1,39,1,39,1,39,3,
		39,548,8,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,556,8,40,10,40,12,40,559,
		9,40,1,41,1,41,5,41,563,8,41,10,41,12,41,566,9,41,1,41,1,41,1,41,4,41,
		571,8,41,11,41,12,41,572,1,41,1,41,1,42,1,42,1,42,1,42,1,42,3,42,582,8,
		42,1,42,1,42,1,43,1,43,1,43,1,43,5,43,590,8,43,10,43,12,43,593,9,43,1,
		44,1,44,1,44,1,44,4,44,599,8,44,11,44,12,44,600,1,44,1,44,1,45,1,45,3,
		45,607,8,45,1,46,1,46,1,46,1,46,3,46,613,8,46,1,47,1,47,1,47,1,47,1,47,
		1,47,5,47,621,8,47,10,47,12,47,624,9,47,1,47,1,47,1,47,1,48,1,48,1,48,
		1,48,4,48,633,8,48,11,48,12,48,634,1,48,1,48,1,49,1,49,1,49,1,49,1,49,
		1,49,1,50,1,50,1,50,1,50,1,50,3,50,650,8,50,1,51,1,51,1,52,1,52,3,52,656,
		8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,665,8,52,1,53,1,53,1,53,1,
		54,1,54,3,54,672,8,54,1,55,1,55,3,55,676,8,55,1,55,1,55,1,55,1,55,3,55,
		682,8,55,1,55,1,55,1,55,3,55,687,8,55,1,56,1,56,3,56,691,8,56,1,56,1,56,
		1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,
		1,58,1,58,1,58,1,58,1,58,3,58,714,8,58,1,58,1,58,3,58,718,8,58,1,58,1,
		58,1,58,1,58,1,58,1,58,3,58,726,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
		1,58,3,58,736,8,58,1,58,1,58,1,58,1,58,5,58,742,8,58,10,58,12,58,745,9,
		58,1,59,1,59,3,59,749,8,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,62,3,62,
		759,8,62,1,63,1,63,1,63,3,63,764,8,63,1,64,1,64,1,65,1,65,1,66,1,66,1,
		67,1,67,1,68,1,68,1,69,1,69,1,69,1,69,1,69,3,69,781,8,69,1,69,1,69,1,69,
		1,69,3,69,787,8,69,1,70,1,70,1,71,1,71,1,72,1,72,3,72,795,8,72,1,73,1,
		73,1,73,5,73,800,8,73,10,73,12,73,803,9,73,1,74,1,74,3,74,807,8,74,1,75,
		1,75,3,75,811,8,75,1,75,1,75,4,75,815,8,75,11,75,12,75,816,1,75,5,75,820,
		8,75,10,75,12,75,823,9,75,1,76,1,76,1,76,1,76,4,76,829,8,76,11,76,12,76,
		830,1,76,1,76,1,77,1,77,1,78,1,78,3,78,839,8,78,1,79,1,79,3,79,843,8,79,
		1,79,1,79,4,79,847,8,79,11,79,12,79,848,1,79,5,79,852,8,79,10,79,12,79,
		855,9,79,1,80,1,80,1,80,1,80,4,80,861,8,80,11,80,12,80,862,1,80,1,80,1,
		81,1,81,1,82,1,82,1,83,5,83,872,8,83,10,83,12,83,875,9,83,1,83,1,83,1,
		83,1,84,5,84,881,8,84,10,84,12,84,884,9,84,1,84,3,84,887,8,84,1,84,4,84,
		890,8,84,11,84,12,84,891,1,85,4,85,895,8,85,11,85,12,85,896,1,85,3,85,
		900,8,85,1,85,0,1,116,86,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
		122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
		158,160,162,164,166,168,170,0,5,1,0,47,53,1,0,19,20,2,0,31,32,43,46,1,
		0,15,16,2,0,21,25,27,27,943,0,173,1,0,0,0,2,193,1,0,0,0,4,197,1,0,0,0,
		6,201,1,0,0,0,8,208,1,0,0,0,10,214,1,0,0,0,12,218,1,0,0,0,14,227,1,0,0,
		0,16,232,1,0,0,0,18,234,1,0,0,0,20,245,1,0,0,0,22,256,1,0,0,0,24,268,1,
		0,0,0,26,273,1,0,0,0,28,279,1,0,0,0,30,281,1,0,0,0,32,291,1,0,0,0,34,314,
		1,0,0,0,36,318,1,0,0,0,38,329,1,0,0,0,40,342,1,0,0,0,42,361,1,0,0,0,44,
		374,1,0,0,0,46,377,1,0,0,0,48,387,1,0,0,0,50,396,1,0,0,0,52,411,1,0,0,
		0,54,415,1,0,0,0,56,439,1,0,0,0,58,466,1,0,0,0,60,471,1,0,0,0,62,478,1,
		0,0,0,64,482,1,0,0,0,66,489,1,0,0,0,68,498,1,0,0,0,70,507,1,0,0,0,72,525,
		1,0,0,0,74,527,1,0,0,0,76,534,1,0,0,0,78,542,1,0,0,0,80,551,1,0,0,0,82,
		560,1,0,0,0,84,576,1,0,0,0,86,585,1,0,0,0,88,594,1,0,0,0,90,606,1,0,0,
		0,92,612,1,0,0,0,94,614,1,0,0,0,96,628,1,0,0,0,98,638,1,0,0,0,100,644,
		1,0,0,0,102,651,1,0,0,0,104,653,1,0,0,0,106,666,1,0,0,0,108,671,1,0,0,
		0,110,673,1,0,0,0,112,688,1,0,0,0,114,697,1,0,0,0,116,725,1,0,0,0,118,
		748,1,0,0,0,120,750,1,0,0,0,122,752,1,0,0,0,124,758,1,0,0,0,126,763,1,
		0,0,0,128,765,1,0,0,0,130,767,1,0,0,0,132,769,1,0,0,0,134,771,1,0,0,0,
		136,773,1,0,0,0,138,786,1,0,0,0,140,788,1,0,0,0,142,790,1,0,0,0,144,794,
		1,0,0,0,146,796,1,0,0,0,148,806,1,0,0,0,150,808,1,0,0,0,152,824,1,0,0,
		0,154,834,1,0,0,0,156,838,1,0,0,0,158,840,1,0,0,0,160,856,1,0,0,0,162,
		866,1,0,0,0,164,868,1,0,0,0,166,873,1,0,0,0,168,882,1,0,0,0,170,899,1,
		0,0,0,172,174,3,2,1,0,173,172,1,0,0,0,173,174,1,0,0,0,174,180,1,0,0,0,
		175,179,3,6,3,0,176,179,3,4,2,0,177,179,3,168,84,0,178,175,1,0,0,0,178,
		176,1,0,0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,
		0,0,0,181,188,1,0,0,0,182,180,1,0,0,0,183,187,3,10,5,0,184,187,3,14,7,
		0,185,187,3,168,84,0,186,183,1,0,0,0,186,184,1,0,0,0,186,185,1,0,0,0,187,
		190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,188,1,
		0,0,0,191,192,5,0,0,1,192,1,1,0,0,0,193,194,5,4,0,0,194,195,3,170,85,0,
		195,196,3,146,73,0,196,3,1,0,0,0,197,198,5,5,0,0,198,199,3,170,85,0,199,
		200,3,148,74,0,200,5,1,0,0,0,201,202,5,6,0,0,202,203,3,170,85,0,203,204,
		3,148,74,0,204,7,1,0,0,0,205,209,3,14,7,0,206,209,3,10,5,0,207,209,3,168,
		84,0,208,205,1,0,0,0,208,206,1,0,0,0,208,207,1,0,0,0,209,210,1,0,0,0,210,
		208,1,0,0,0,210,211,1,0,0,0,211,9,1,0,0,0,212,215,3,12,6,0,213,215,3,108,
		54,0,214,212,1,0,0,0,214,213,1,0,0,0,215,11,1,0,0,0,216,217,5,5,0,0,217,
		219,5,70,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,222,1,0,0,0,220,223,3,
		32,16,0,221,223,3,54,27,0,222,220,1,0,0,0,222,221,1,0,0,0,223,13,1,0,0,
		0,224,228,3,16,8,0,225,228,3,26,13,0,226,228,3,28,14,0,227,224,1,0,0,0,
		227,225,1,0,0,0,227,226,1,0,0,0,228,15,1,0,0,0,229,233,3,24,12,0,230,233,
		3,18,9,0,231,233,3,30,15,0,232,229,1,0,0,0,232,230,1,0,0,0,232,231,1,0,
		0,0,233,17,1,0,0,0,234,235,5,12,0,0,235,236,5,70,0,0,236,237,3,116,58,
		0,237,238,3,168,84,0,238,239,5,1,0,0,239,240,3,8,4,0,240,243,5,2,0,0,241,
		244,3,20,10,0,242,244,3,22,11,0,243,241,1,0,0,0,243,242,1,0,0,0,243,244,
		1,0,0,0,244,19,1,0,0,0,245,246,5,13,0,0,246,247,3,168,84,0,247,248,5,1,
		0,0,248,249,3,8,4,0,249,250,5,2,0,0,250,21,1,0,0,0,251,252,5,13,0,0,252,
		253,3,170,85,0,253,254,5,12,0,0,254,257,1,0,0,0,255,257,5,14,0,0,256,251,
		1,0,0,0,256,255,1,0,0,0,257,258,1,0,0,0,258,259,5,70,0,0,259,260,3,116,
		58,0,260,261,3,168,84,0,261,262,5,1,0,0,262,263,3,8,4,0,263,266,5,2,0,
		0,264,267,3,20,10,0,265,267,3,22,11,0,266,264,1,0,0,0,266,265,1,0,0,0,
		266,267,1,0,0,0,267,23,1,0,0,0,268,271,5,8,0,0,269,270,5,70,0,0,270,272,
		3,116,58,0,271,269,1,0,0,0,271,272,1,0,0,0,272,25,1,0,0,0,273,274,3,154,
		77,0,274,275,5,70,0,0,275,276,5,43,0,0,276,277,5,70,0,0,277,278,3,116,
		58,0,278,27,1,0,0,0,279,280,3,116,58,0,280,29,1,0,0,0,281,284,5,11,0,0,
		282,283,5,70,0,0,283,285,3,122,61,0,284,282,1,0,0,0,284,285,1,0,0,0,285,
		286,1,0,0,0,286,287,3,168,84,0,287,288,5,1,0,0,288,289,3,8,4,0,289,290,
		5,2,0,0,290,31,1,0,0,0,291,293,3,154,77,0,292,294,5,70,0,0,293,292,1,0,
		0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,5,38,0,0,296,298,3,170,85,
		0,297,299,3,66,33,0,298,297,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,
		307,3,36,18,0,301,303,5,70,0,0,302,301,1,0,0,0,302,303,1,0,0,0,303,304,
		1,0,0,0,304,305,5,38,0,0,305,306,5,70,0,0,306,308,3,64,32,0,307,302,1,
		0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,310,3,168,84,0,310,311,5,1,0,
		0,311,312,3,8,4,0,312,313,5,2,0,0,313,33,1,0,0,0,314,315,5,1,0,0,315,316,
		3,32,16,0,316,317,5,2,0,0,317,35,1,0,0,0,318,323,5,29,0,0,319,324,3,38,
		19,0,320,321,3,168,84,0,321,322,3,40,20,0,322,324,1,0,0,0,323,319,1,0,
		0,0,323,320,1,0,0,0,323,324,1,0,0,0,324,325,1,0,0,0,325,326,5,30,0,0,326,
		37,1,0,0,0,327,330,3,42,21,0,328,330,3,44,22,0,329,327,1,0,0,0,329,328,
		1,0,0,0,330,339,1,0,0,0,331,332,5,69,0,0,332,335,5,70,0,0,333,336,3,42,
		21,0,334,336,3,44,22,0,335,333,1,0,0,0,335,334,1,0,0,0,336,338,1,0,0,0,
		337,331,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,39,
		1,0,0,0,341,339,1,0,0,0,342,355,5,1,0,0,343,345,3,166,83,0,344,343,1,0,
		0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,351,1,0,0,0,348,
		346,1,0,0,0,349,352,3,42,21,0,350,352,3,44,22,0,351,349,1,0,0,0,351,350,
		1,0,0,0,352,353,1,0,0,0,353,354,3,168,84,0,354,356,1,0,0,0,355,346,1,0,
		0,0,356,357,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,
		360,5,2,0,0,360,41,1,0,0,0,361,363,3,154,77,0,362,364,5,70,0,0,363,362,
		1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,366,5,38,0,0,366,367,5,70,
		0,0,367,372,3,64,32,0,368,369,5,70,0,0,369,370,5,43,0,0,370,371,5,70,0,
		0,371,373,3,116,58,0,372,368,1,0,0,0,372,373,1,0,0,0,373,43,1,0,0,0,374,
		375,5,37,0,0,375,376,3,42,21,0,376,45,1,0,0,0,377,379,5,29,0,0,378,380,
		3,168,84,0,379,378,1,0,0,0,379,380,1,0,0,0,380,383,1,0,0,0,381,384,3,48,
		24,0,382,384,3,50,25,0,383,381,1,0,0,0,383,382,1,0,0,0,383,384,1,0,0,0,
		384,385,1,0,0,0,385,386,5,30,0,0,386,47,1,0,0,0,387,393,3,52,26,0,388,
		389,5,69,0,0,389,390,5,70,0,0,390,392,3,52,26,0,391,388,1,0,0,0,392,395,
		1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,49,1,0,0,0,395,393,1,0,0,0,
		396,400,5,1,0,0,397,398,3,52,26,0,398,399,3,168,84,0,399,401,1,0,0,0,400,
		397,1,0,0,0,401,402,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,404,1,
		0,0,0,404,405,5,2,0,0,405,51,1,0,0,0,406,407,3,154,77,0,407,408,5,70,0,
		0,408,409,5,43,0,0,409,410,5,70,0,0,410,412,1,0,0,0,411,406,1,0,0,0,411,
		412,1,0,0,0,412,413,1,0,0,0,413,414,3,116,58,0,414,53,1,0,0,0,415,417,
		3,154,77,0,416,418,3,66,33,0,417,416,1,0,0,0,417,418,1,0,0,0,418,420,1,
		0,0,0,419,421,3,78,39,0,420,419,1,0,0,0,420,421,1,0,0,0,421,428,1,0,0,
		0,422,424,5,70,0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,
		426,5,38,0,0,426,427,5,70,0,0,427,429,3,64,32,0,428,423,1,0,0,0,428,429,
		1,0,0,0,429,430,1,0,0,0,430,431,3,168,84,0,431,432,5,1,0,0,432,433,3,56,
		28,0,433,434,5,2,0,0,434,55,1,0,0,0,435,440,3,58,29,0,436,440,3,60,30,
		0,437,440,3,62,31,0,438,440,3,168,84,0,439,435,1,0,0,0,439,436,1,0,0,0,
		439,437,1,0,0,0,439,438,1,0,0,0,440,441,1,0,0,0,441,439,1,0,0,0,441,442,
		1,0,0,0,442,57,1,0,0,0,443,444,3,100,50,0,444,445,3,168,84,0,445,447,1,
		0,0,0,446,443,1,0,0,0,447,448,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,
		449,467,1,0,0,0,450,457,3,102,51,0,451,452,5,69,0,0,452,453,3,170,85,0,
		453,454,3,102,51,0,454,456,1,0,0,0,455,451,1,0,0,0,456,459,1,0,0,0,457,
		455,1,0,0,0,457,458,1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,460,450,1,
		0,0,0,461,462,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,
		464,465,3,168,84,0,465,467,1,0,0,0,466,446,1,0,0,0,466,460,1,0,0,0,467,
		59,1,0,0,0,468,469,3,104,52,0,469,470,3,168,84,0,470,472,1,0,0,0,471,468,
		1,0,0,0,472,473,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,61,1,0,0,0,
		475,476,3,106,53,0,476,477,3,168,84,0,477,479,1,0,0,0,478,475,1,0,0,0,
		479,480,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,63,1,0,0,0,482,484,
		3,154,77,0,483,485,3,84,42,0,484,483,1,0,0,0,484,485,1,0,0,0,485,487,1,
		0,0,0,486,488,3,46,23,0,487,486,1,0,0,0,487,488,1,0,0,0,488,65,1,0,0,0,
		489,494,5,31,0,0,490,495,3,68,34,0,491,492,3,168,84,0,492,493,3,70,35,
		0,493,495,1,0,0,0,494,490,1,0,0,0,494,491,1,0,0,0,495,496,1,0,0,0,496,
		497,5,32,0,0,497,67,1,0,0,0,498,504,3,72,36,0,499,500,5,69,0,0,500,501,
		5,70,0,0,501,503,3,72,36,0,502,499,1,0,0,0,503,506,1,0,0,0,504,502,1,0,
		0,0,504,505,1,0,0,0,505,69,1,0,0,0,506,504,1,0,0,0,507,517,5,1,0,0,508,
		510,3,166,83,0,509,508,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,512,
		1,0,0,0,512,514,1,0,0,0,513,511,1,0,0,0,514,515,3,72,36,0,515,516,3,168,
		84,0,516,518,1,0,0,0,517,511,1,0,0,0,518,519,1,0,0,0,519,517,1,0,0,0,519,
		520,1,0,0,0,520,521,1,0,0,0,521,522,5,2,0,0,522,71,1,0,0,0,523,526,3,74,
		37,0,524,526,3,76,38,0,525,523,1,0,0,0,525,524,1,0,0,0,526,73,1,0,0,0,
		527,532,3,64,32,0,528,529,5,70,0,0,529,530,5,43,0,0,530,531,5,70,0,0,531,
		533,3,64,32,0,532,528,1,0,0,0,532,533,1,0,0,0,533,75,1,0,0,0,534,535,5,
		37,0,0,535,540,3,64,32,0,536,537,5,70,0,0,537,538,5,43,0,0,538,539,5,70,
		0,0,539,541,3,64,32,0,540,536,1,0,0,0,540,541,1,0,0,0,541,77,1,0,0,0,542,
		547,5,29,0,0,543,548,3,80,40,0,544,545,3,168,84,0,545,546,3,82,41,0,546,
		548,1,0,0,0,547,543,1,0,0,0,547,544,1,0,0,0,548,549,1,0,0,0,549,550,5,
		30,0,0,550,79,1,0,0,0,551,557,3,44,22,0,552,553,5,69,0,0,553,554,5,70,
		0,0,554,556,3,44,22,0,555,552,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,
		557,558,1,0,0,0,558,81,1,0,0,0,559,557,1,0,0,0,560,570,5,1,0,0,561,563,
		3,166,83,0,562,561,1,0,0,0,563,566,1,0,0,0,564,562,1,0,0,0,564,565,1,0,
		0,0,565,567,1,0,0,0,566,564,1,0,0,0,567,568,3,44,22,0,568,569,3,168,84,
		0,569,571,1,0,0,0,570,564,1,0,0,0,571,572,1,0,0,0,572,570,1,0,0,0,572,
		573,1,0,0,0,573,574,1,0,0,0,574,575,5,2,0,0,575,83,1,0,0,0,576,581,5,31,
		0,0,577,582,3,86,43,0,578,579,3,168,84,0,579,580,3,88,44,0,580,582,1,0,
		0,0,581,577,1,0,0,0,581,578,1,0,0,0,582,583,1,0,0,0,583,584,5,32,0,0,584,
		85,1,0,0,0,585,591,3,90,45,0,586,587,5,69,0,0,587,588,5,70,0,0,588,590,
		3,90,45,0,589,586,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,592,1,0,
		0,0,592,87,1,0,0,0,593,591,1,0,0,0,594,598,5,1,0,0,595,596,3,90,45,0,596,
		597,3,168,84,0,597,599,1,0,0,0,598,595,1,0,0,0,599,600,1,0,0,0,600,598,
		1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,603,5,2,0,0,603,89,1,0,0,0,
		604,607,3,64,32,0,605,607,3,116,58,0,606,604,1,0,0,0,606,605,1,0,0,0,607,
		91,1,0,0,0,608,613,3,94,47,0,609,610,3,168,84,0,610,611,3,96,48,0,611,
		613,1,0,0,0,612,608,1,0,0,0,612,609,1,0,0,0,613,93,1,0,0,0,614,615,5,35,
		0,0,615,616,5,70,0,0,616,622,3,98,49,0,617,618,5,69,0,0,618,619,5,70,0,
		0,619,621,3,98,49,0,620,617,1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,
		623,1,0,0,0,623,625,1,0,0,0,624,622,1,0,0,0,625,626,5,70,0,0,626,627,5,
		36,0,0,627,95,1,0,0,0,628,632,5,1,0,0,629,630,3,98,49,0,630,631,3,168,
		84,0,631,633,1,0,0,0,632,629,1,0,0,0,633,634,1,0,0,0,634,632,1,0,0,0,634,
		635,1,0,0,0,635,636,1,0,0,0,636,637,5,2,0,0,637,97,1,0,0,0,638,639,3,154,
		77,0,639,640,5,70,0,0,640,641,5,43,0,0,641,642,5,70,0,0,642,643,3,116,
		58,0,643,99,1,0,0,0,644,649,3,154,77,0,645,646,5,70,0,0,646,647,5,43,0,
		0,647,648,5,70,0,0,648,650,3,118,59,0,649,645,1,0,0,0,649,650,1,0,0,0,
		650,101,1,0,0,0,651,652,3,154,77,0,652,103,1,0,0,0,653,655,3,154,77,0,
		654,656,5,70,0,0,655,654,1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,658,
		5,38,0,0,658,659,5,70,0,0,659,664,3,64,32,0,660,661,5,70,0,0,661,662,5,
		43,0,0,662,663,5,70,0,0,663,665,3,116,58,0,664,660,1,0,0,0,664,665,1,0,
		0,0,665,105,1,0,0,0,666,667,5,37,0,0,667,668,3,120,60,0,668,107,1,0,0,
		0,669,672,3,110,55,0,670,672,3,112,56,0,671,669,1,0,0,0,671,670,1,0,0,
		0,672,109,1,0,0,0,673,675,3,154,77,0,674,676,5,70,0,0,675,674,1,0,0,0,
		675,676,1,0,0,0,676,677,1,0,0,0,677,678,5,38,0,0,678,679,5,70,0,0,679,
		686,3,64,32,0,680,682,5,70,0,0,681,680,1,0,0,0,681,682,1,0,0,0,682,683,
		1,0,0,0,683,684,5,43,0,0,684,685,5,70,0,0,685,687,3,116,58,0,686,681,1,
		0,0,0,686,687,1,0,0,0,687,111,1,0,0,0,688,690,3,154,77,0,689,691,5,70,
		0,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,693,5,38,0,0,693,
		694,5,43,0,0,694,695,5,70,0,0,695,696,3,116,58,0,696,113,1,0,0,0,697,698,
		3,154,77,0,698,699,5,70,0,0,699,700,5,43,0,0,700,701,5,70,0,0,701,702,
		3,116,58,0,702,115,1,0,0,0,703,704,6,58,-1,0,704,726,3,118,59,0,705,706,
		3,126,63,0,706,707,3,116,58,7,707,726,1,0,0,0,708,709,3,64,32,0,709,710,
		3,92,46,0,710,726,1,0,0,0,711,713,5,33,0,0,712,714,3,116,58,0,713,712,
		1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,717,5,41,0,0,716,718,3,116,
		58,0,717,716,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,726,5,34,0,0,
		720,721,5,29,0,0,721,722,3,116,58,0,722,723,5,30,0,0,723,726,1,0,0,0,724,
		726,3,154,77,0,725,703,1,0,0,0,725,705,1,0,0,0,725,708,1,0,0,0,725,711,
		1,0,0,0,725,720,1,0,0,0,725,724,1,0,0,0,726,743,1,0,0,0,727,728,10,8,0,
		0,728,729,5,70,0,0,729,730,3,124,62,0,730,731,5,70,0,0,731,732,3,116,58,
		9,732,742,1,0,0,0,733,735,10,6,0,0,734,736,3,84,42,0,735,734,1,0,0,0,735,
		736,1,0,0,0,736,737,1,0,0,0,737,742,3,46,23,0,738,739,10,1,0,0,739,740,
		5,40,0,0,740,742,3,154,77,0,741,727,1,0,0,0,741,733,1,0,0,0,741,738,1,
		0,0,0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,117,1,0,0,0,
		745,743,1,0,0,0,746,749,3,144,72,0,747,749,3,142,71,0,748,746,1,0,0,0,
		748,747,1,0,0,0,749,119,1,0,0,0,750,751,3,116,58,0,751,121,1,0,0,0,752,
		753,3,116,58,0,753,123,1,0,0,0,754,759,3,128,64,0,755,759,3,132,66,0,756,
		759,3,136,68,0,757,759,3,138,69,0,758,754,1,0,0,0,758,755,1,0,0,0,758,
		756,1,0,0,0,758,757,1,0,0,0,759,125,1,0,0,0,760,764,3,130,65,0,761,764,
		3,134,67,0,762,764,3,140,70,0,763,760,1,0,0,0,763,761,1,0,0,0,763,762,
		1,0,0,0,764,127,1,0,0,0,765,766,7,0,0,0,766,129,1,0,0,0,767,768,5,48,0,
		0,768,131,1,0,0,0,769,770,7,1,0,0,770,133,1,0,0,0,771,772,5,18,0,0,772,
		135,1,0,0,0,773,774,7,2,0,0,774,137,1,0,0,0,775,787,5,54,0,0,776,787,5,
		55,0,0,777,787,5,57,0,0,778,787,5,58,0,0,779,781,5,32,0,0,780,779,1,0,
		0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,783,5,32,0,0,783,787,5,32,0,0,
		784,787,5,59,0,0,785,787,5,60,0,0,786,775,1,0,0,0,786,776,1,0,0,0,786,
		777,1,0,0,0,786,778,1,0,0,0,786,780,1,0,0,0,786,784,1,0,0,0,786,785,1,
		0,0,0,787,139,1,0,0,0,788,789,5,56,0,0,789,141,1,0,0,0,790,791,7,3,0,0,
		791,143,1,0,0,0,792,795,3,164,82,0,793,795,3,162,81,0,794,792,1,0,0,0,
		794,793,1,0,0,0,795,145,1,0,0,0,796,801,3,154,77,0,797,798,5,40,0,0,798,
		800,3,154,77,0,799,797,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,801,802,
		1,0,0,0,802,147,1,0,0,0,803,801,1,0,0,0,804,807,3,150,75,0,805,807,3,152,
		76,0,806,804,1,0,0,0,806,805,1,0,0,0,807,149,1,0,0,0,808,810,3,146,73,
		0,809,811,5,70,0,0,810,809,1,0,0,0,810,811,1,0,0,0,811,821,1,0,0,0,812,
		814,5,69,0,0,813,815,5,70,0,0,814,813,1,0,0,0,815,816,1,0,0,0,816,814,
		1,0,0,0,816,817,1,0,0,0,817,818,1,0,0,0,818,820,3,146,73,0,819,812,1,0,
		0,0,820,823,1,0,0,0,821,819,1,0,0,0,821,822,1,0,0,0,822,151,1,0,0,0,823,
		821,1,0,0,0,824,828,5,1,0,0,825,826,3,146,73,0,826,827,3,168,84,0,827,
		829,1,0,0,0,828,825,1,0,0,0,829,830,1,0,0,0,830,828,1,0,0,0,830,831,1,
		0,0,0,831,832,1,0,0,0,832,833,5,2,0,0,833,153,1,0,0,0,834,835,5,26,0,0,
		835,155,1,0,0,0,836,839,3,150,75,0,837,839,3,152,76,0,838,836,1,0,0,0,
		838,837,1,0,0,0,839,157,1,0,0,0,840,842,3,154,77,0,841,843,5,70,0,0,842,
		841,1,0,0,0,842,843,1,0,0,0,843,853,1,0,0,0,844,846,5,69,0,0,845,847,5,
		70,0,0,846,845,1,0,0,0,847,848,1,0,0,0,848,846,1,0,0,0,848,849,1,0,0,0,
		849,850,1,0,0,0,850,852,3,154,77,0,851,844,1,0,0,0,852,855,1,0,0,0,853,
		851,1,0,0,0,853,854,1,0,0,0,854,159,1,0,0,0,855,853,1,0,0,0,856,860,5,
		1,0,0,857,858,3,154,77,0,858,859,3,168,84,0,859,861,1,0,0,0,860,857,1,
		0,0,0,861,862,1,0,0,0,862,860,1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,
		864,865,5,2,0,0,865,161,1,0,0,0,866,867,5,28,0,0,867,163,1,0,0,0,868,869,
		7,4,0,0,869,165,1,0,0,0,870,872,5,70,0,0,871,870,1,0,0,0,872,875,1,0,0,
		0,873,871,1,0,0,0,873,874,1,0,0,0,874,876,1,0,0,0,875,873,1,0,0,0,876,
		877,5,3,0,0,877,878,5,71,0,0,878,167,1,0,0,0,879,881,5,70,0,0,880,879,
		1,0,0,0,881,884,1,0,0,0,882,880,1,0,0,0,882,883,1,0,0,0,883,886,1,0,0,
		0,884,882,1,0,0,0,885,887,5,3,0,0,886,885,1,0,0,0,886,887,1,0,0,0,887,
		889,1,0,0,0,888,890,5,71,0,0,889,888,1,0,0,0,890,891,1,0,0,0,891,889,1,
		0,0,0,891,892,1,0,0,0,892,169,1,0,0,0,893,895,5,70,0,0,894,893,1,0,0,0,
		895,896,1,0,0,0,896,894,1,0,0,0,896,897,1,0,0,0,897,900,1,0,0,0,898,900,
		3,168,84,0,899,894,1,0,0,0,899,898,1,0,0,0,900,171,1,0,0,0,104,173,178,
		180,186,188,208,210,214,218,222,227,232,243,256,266,271,284,293,298,302,
		307,323,329,335,339,346,351,357,363,372,379,383,393,402,411,417,420,423,
		428,439,441,448,457,462,466,473,480,484,487,494,504,511,519,525,532,540,
		547,557,564,572,581,591,600,606,612,622,634,649,655,664,671,675,681,686,
		690,713,717,725,735,741,743,748,758,763,780,786,794,801,806,810,816,821,
		830,838,842,848,853,862,873,882,886,891,896,899
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Maja.Compiler.Parser
