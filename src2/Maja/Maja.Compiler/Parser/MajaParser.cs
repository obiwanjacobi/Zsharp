//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\My\MyProjects\Zsharp\src2\Maja\Maja.Compiler\MajaParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Maja.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class MajaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, COMMENTstart=3, COMMENTwarning=4, COMMENT=5, RET=6, 
		PUB=7, USE=8, SELF=9, IDENTIFIER=10, PARENopen=11, PARENclose=12, ANGLEopen=13, 
		ANGLEclose=14, HASH=15, COLON=16, DOT=17, EQ=18, UNUSED=19, COMMA=20, 
		SP=21, EOL=22;
	public const int
		RULE_compilation_unit = 0, RULE_decl_pub1 = 1, RULE_decl_pub2 = 2, RULE_decl_use = 3, 
		RULE_code_block = 4, RULE_decl_member = 5, RULE_statement = 6, RULE_statement_flow = 7, 
		RULE_statement_ret = 8, RULE_decl_function = 9, RULE_decl_function_local = 10, 
		RULE_parameter_list = 11, RULE_parameter = 12, RULE_parameter_self = 13, 
		RULE_decl_type = 14, RULE_decl_type_members = 15, RULE_type = 16, RULE_type_parameter_list = 17, 
		RULE_type_parameter = 18, RULE_generic_parameter = 19, RULE_template_parameter = 20, 
		RULE_value_parameter = 21, RULE_type_argument_list = 22, RULE_type_argument = 23, 
		RULE_decl_member_enum = 24, RULE_decl_member_field = 25, RULE_decl_member_rule = 26, 
		RULE_name_rule = 27, RULE_decl_variable = 28, RULE_expression = 29, RULE_expression_const = 30, 
		RULE_expression_rule = 31, RULE_name_qualified = 32, RULE_name_qualified_list = 33, 
		RULE_name_identifier = 34, RULE_name_identifier_list = 35, RULE_newline = 36;
	public static readonly string[] ruleNames = {
		"compilation_unit", "decl_pub1", "decl_pub2", "decl_use", "code_block", 
		"decl_member", "statement", "statement_flow", "statement_ret", "decl_function", 
		"decl_function_local", "parameter_list", "parameter", "parameter_self", 
		"decl_type", "decl_type_members", "type", "type_parameter_list", "type_parameter", 
		"generic_parameter", "template_parameter", "value_parameter", "type_argument_list", 
		"type_argument", "decl_member_enum", "decl_member_field", "decl_member_rule", 
		"name_rule", "decl_variable", "expression", "expression_const", "expression_rule", 
		"name_qualified", "name_qualified_list", "name_identifier", "name_identifier_list", 
		"newline"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'#_'", "'##'", null, "'ret'", "'pub'", "'use'", "'self'", 
		null, "'('", "')'", "'<'", "'>'", "'#'", "':'", "'.'", "'='", "'_'", "','", 
		"' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "COMMENTstart", "COMMENTwarning", "COMMENT", 
		"RET", "PUB", "USE", "SELF", "IDENTIFIER", "PARENopen", "PARENclose", 
		"ANGLEopen", "ANGLEclose", "HASH", "COLON", "DOT", "EQ", "UNUSED", "COMMA", 
		"SP", "EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MajaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MajaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MajaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MajaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_useContext[] decl_use() {
			return GetRuleContexts<Decl_useContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_useContext decl_use(int i) {
			return GetRuleContext<Decl_useContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_pub1Context[] decl_pub1() {
			return GetRuleContexts<Decl_pub1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_pub1Context decl_pub1(int i) {
			return GetRuleContext<Decl_pub1Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_pub2Context[] decl_pub2() {
			return GetRuleContexts<Decl_pub2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_pub2Context decl_pub2(int i) {
			return GetRuleContext<Decl_pub2Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_memberContext[] decl_member() {
			return GetRuleContexts<Decl_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_memberContext decl_member(int i) {
			return GetRuleContext<Decl_memberContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 78;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 74;
						decl_use();
						}
						break;
					case 2:
						{
						State = 75;
						decl_pub1();
						}
						break;
					case 3:
						{
						State = 76;
						decl_pub2();
						}
						break;
					case 4:
						{
						State = 77;
						newline();
						}
						break;
					}
					} 
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT) | (1L << IDENTIFIER) | (1L << SP) | (1L << EOL))) != 0)) {
				{
				State = 85;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 83;
					decl_member();
					}
					break;
				case COMMENT:
				case SP:
				case EOL:
					{
					State = 84;
					newline();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_pub1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUB() { return GetToken(MajaParser.PUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_qualified_listContext name_qualified_list() {
			return GetRuleContext<Name_qualified_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(MajaParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(MajaParser.SP, i);
		}
		public Decl_pub1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_pub1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl_pub1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decl_pub1Context decl_pub1() {
		Decl_pub1Context _localctx = new Decl_pub1Context(Context, State);
		EnterRule(_localctx, 2, RULE_decl_pub1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(PUB);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 91;
				Match(SP);
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SP );
			State = 96;
			name_qualified_list();
			State = 97;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_pub2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUB() { return GetToken(MajaParser.PUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(MajaParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_qualified_listContext name_qualified_list() {
			return GetRuleContext<Name_qualified_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(MajaParser.DEDENT, 0); }
		public Decl_pub2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_pub2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl_pub2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decl_pub2Context decl_pub2() {
		Decl_pub2Context _localctx = new Decl_pub2Context(Context, State);
		EnterRule(_localctx, 4, RULE_decl_pub2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(PUB);
			State = 100;
			newline();
			State = 101;
			Match(INDENT);
			State = 102;
			name_qualified_list();
			State = 103;
			newline();
			State = 104;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_useContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MajaParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_qualifiedContext name_qualified() {
			return GetRuleContext<Name_qualifiedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(MajaParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(MajaParser.SP, i);
		}
		public Decl_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_use; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl_use(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decl_useContext decl_use() {
		Decl_useContext _localctx = new Decl_useContext(Context, State);
		EnterRule(_localctx, 6, RULE_decl_use);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(USE);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 107;
				Match(SP);
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SP );
			State = 112;
			name_qualified();
			State = 113;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_memberContext[] decl_member() {
			return GetRuleContexts<Decl_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_memberContext decl_member(int i) {
			return GetRuleContext<Decl_memberContext>(i);
		}
		public Code_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_blockContext code_block() {
		Code_blockContext _localctx = new Code_blockContext(Context, State);
		EnterRule(_localctx, 8, RULE_code_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 117;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RET:
					{
					State = 115;
					statement();
					}
					break;
				case IDENTIFIER:
					{
					State = 116;
					decl_member();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==RET || _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_functionContext decl_function() {
			return GetRuleContext<Decl_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_typeContext decl_type() {
			return GetRuleContext<Decl_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_variableContext decl_variable() {
			return GetRuleContext<Decl_variableContext>(0);
		}
		public Decl_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decl_memberContext decl_member() {
		Decl_memberContext _localctx = new Decl_memberContext(Context, State);
		EnterRule(_localctx, 10, RULE_decl_member);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				decl_function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				decl_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123;
				decl_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_flowContext statement_flow() {
			return GetRuleContext<Statement_flowContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			statement_flow();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_flowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_retContext statement_ret() {
			return GetRuleContext<Statement_retContext>(0);
		}
		public Statement_flowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_flow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_flow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_flowContext statement_flow() {
		Statement_flowContext _localctx = new Statement_flowContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement_flow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			statement_ret();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_retContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RET() { return GetToken(MajaParser.RET, 0); }
		public Statement_retContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_ret; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_ret(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_retContext statement_ret() {
		Statement_retContext _localctx = new Statement_retContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement_ret);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(RET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier() {
			return GetRuleContext<Name_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MajaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(MajaParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(MajaParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(MajaParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Decl_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decl_functionContext decl_function() {
		Decl_functionContext _localctx = new Decl_functionContext(Context, State);
		EnterRule(_localctx, 18, RULE_decl_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			name_identifier();
			State = 133;
			Match(COLON);
			State = 134;
			Match(SP);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ANGLEopen) {
				{
				State = 135;
				type_parameter_list();
				}
			}

			State = 138;
			parameter_list();
			State = 139;
			newline();
			State = 140;
			Match(INDENT);
			State = 141;
			code_block();
			State = 142;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_function_localContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(MajaParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decl_functionContext decl_function() {
			return GetRuleContext<Decl_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(MajaParser.DEDENT, 0); }
		public Decl_function_localContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_function_local; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl_function_local(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decl_function_localContext decl_function_local() {
		Decl_function_localContext _localctx = new Decl_function_localContext(Context, State);
		EnterRule(_localctx, 20, RULE_decl_function_local);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(INDENT);
			State = 145;
			decl_function();
			State = 146;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENopen() { return GetToken(MajaParser.PARENopen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENclose() { return GetToken(MajaParser.PARENclose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_selfContext parameter_self() {
			return GetRuleContext<Parameter_selfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MajaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MajaParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(MajaParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(MajaParser.SP, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(PARENopen);
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 149;
				parameter();
				}
				break;
			case SELF:
				{
				State = 150;
				parameter_self();
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 151;
					Match(COMMA);
					State = 152;
					Match(SP);
					State = 153;
					parameter();
					}
					}
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case PARENclose:
				break;
			default:
				break;
			}
			State = 161;
			Match(PARENclose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier() {
			return GetRuleContext<Name_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MajaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(MajaParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			name_identifier();
			State = 164;
			Match(COLON);
			State = 165;
			Match(SP);
			State = 166;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_selfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(MajaParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MajaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(MajaParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Parameter_selfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_self; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_self(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_selfContext parameter_self() {
		Parameter_selfContext _localctx = new Parameter_selfContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameter_self);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(SELF);
			State = 169;
			Match(COLON);
			State = 170;
			Match(SP);
			State = 171;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier() {
			return GetRuleContext<Name_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MajaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(MajaParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNUSED() { return GetToken(MajaParser.UNUSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(MajaParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decl_type_membersContext decl_type_members() {
			return GetRuleContext<Decl_type_membersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(MajaParser.DEDENT, 0); }
		public Decl_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decl_typeContext decl_type() {
		Decl_typeContext _localctx = new Decl_typeContext(Context, State);
		EnterRule(_localctx, 28, RULE_decl_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			name_identifier();
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ANGLEopen) {
				{
				State = 174;
				type_parameter_list();
				}
			}

			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 177;
				Match(COLON);
				State = 178;
				Match(SP);
				State = 179;
				type();
				}
			}

			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNUSED) {
				{
				State = 182;
				Match(UNUSED);
				}
			}

			State = 185;
			newline();
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 186;
				Match(INDENT);
				State = 187;
				decl_type_members();
				State = 188;
				Match(DEDENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_type_membersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_member_enumContext[] decl_member_enum() {
			return GetRuleContexts<Decl_member_enumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_member_enumContext decl_member_enum(int i) {
			return GetRuleContext<Decl_member_enumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_member_fieldContext[] decl_member_field() {
			return GetRuleContexts<Decl_member_fieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_member_fieldContext decl_member_field(int i) {
			return GetRuleContext<Decl_member_fieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_member_ruleContext[] decl_member_rule() {
			return GetRuleContexts<Decl_member_ruleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_member_ruleContext decl_member_rule(int i) {
			return GetRuleContext<Decl_member_ruleContext>(i);
		}
		public Decl_type_membersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_type_members; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl_type_members(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decl_type_membersContext decl_type_members() {
		Decl_type_membersContext _localctx = new Decl_type_membersContext(Context, State);
		EnterRule(_localctx, 30, RULE_decl_type_members);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 195;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 192;
					decl_member_enum();
					}
					break;
				case 2:
					{
					State = 193;
					decl_member_field();
					}
					break;
				case 3:
					{
					State = 194;
					decl_member_rule();
					}
					break;
				}
				State = 197;
				newline();
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER || _la==HASH );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier() {
			return GetRuleContext<Name_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			name_identifier();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ANGLEopen) {
				{
				State = 204;
				type_argument_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANGLEopen() { return GetToken(MajaParser.ANGLEopen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANGLEclose() { return GetToken(MajaParser.ANGLEclose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MajaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MajaParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(MajaParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(MajaParser.SP, i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(ANGLEopen);
			State = 208;
			type_parameter();
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 209;
				Match(COMMA);
				State = 210;
				Match(SP);
				State = 211;
				type_parameter();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 217;
			Match(ANGLEclose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameterContext generic_parameter() {
			return GetRuleContext<Generic_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_parameterContext template_parameter() {
			return GetRuleContext<Template_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_parameterContext value_parameter() {
			return GetRuleContext<Value_parameterContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_type_parameter);
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				generic_parameter();
				}
				break;
			case HASH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220;
				template_parameter();
				}
				break;
			case ANGLEclose:
			case COMMA:
				EnterOuterAlt(_localctx, 3);
				{
				State = 221;
				value_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier() {
			return GetRuleContext<Name_identifierContext>(0);
		}
		public Generic_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parameterContext generic_parameter() {
		Generic_parameterContext _localctx = new Generic_parameterContext(Context, State);
		EnterRule(_localctx, 38, RULE_generic_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			name_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MajaParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier() {
			return GetRuleContext<Name_identifierContext>(0);
		}
		public Template_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_parameterContext template_parameter() {
		Template_parameterContext _localctx = new Template_parameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_template_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(HASH);
			State = 227;
			name_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Value_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_parameterContext value_parameter() {
		Value_parameterContext _localctx = new Value_parameterContext(Context, State);
		EnterRule(_localctx, 42, RULE_value_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANGLEopen() { return GetToken(MajaParser.ANGLEopen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_argumentContext[] type_argument() {
			return GetRuleContexts<Type_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argumentContext type_argument(int i) {
			return GetRuleContext<Type_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANGLEclose() { return GetToken(MajaParser.ANGLEclose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MajaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MajaParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(MajaParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(MajaParser.SP, i);
		}
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(Context, State);
		EnterRule(_localctx, 44, RULE_type_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(ANGLEopen);
			State = 232;
			type_argument();
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 233;
				Match(COMMA);
				State = 234;
				Match(SP);
				State = 235;
				type_argument();
				}
				}
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 241;
			Match(ANGLEclose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier() {
			return GetRuleContext<Name_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Type_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argumentContext type_argument() {
		Type_argumentContext _localctx = new Type_argumentContext(Context, State);
		EnterRule(_localctx, 46, RULE_type_argument);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				name_identifier();
				}
				break;
			case ANGLEclose:
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_member_enumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier() {
			return GetRuleContext<Name_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(MajaParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(MajaParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MajaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_constContext expression_const() {
			return GetRuleContext<Expression_constContext>(0);
		}
		public Decl_member_enumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_member_enum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl_member_enum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decl_member_enumContext decl_member_enum() {
		Decl_member_enumContext _localctx = new Decl_member_enumContext(Context, State);
		EnterRule(_localctx, 48, RULE_decl_member_enum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			name_identifier();
			State = 252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 248;
				Match(SP);
				State = 249;
				Match(EQ);
				State = 250;
				Match(SP);
				State = 251;
				expression_const();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_member_fieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier() {
			return GetRuleContext<Name_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MajaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(MajaParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Decl_member_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_member_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl_member_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decl_member_fieldContext decl_member_field() {
		Decl_member_fieldContext _localctx = new Decl_member_fieldContext(Context, State);
		EnterRule(_localctx, 50, RULE_decl_member_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			name_identifier();
			State = 255;
			Match(COLON);
			State = 256;
			Match(SP);
			State = 257;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_member_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MajaParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_ruleContext name_rule() {
			return GetRuleContext<Name_ruleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(MajaParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_ruleContext expression_rule() {
			return GetRuleContext<Expression_ruleContext>(0);
		}
		public Decl_member_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_member_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl_member_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decl_member_ruleContext decl_member_rule() {
		Decl_member_ruleContext _localctx = new Decl_member_ruleContext(Context, State);
		EnterRule(_localctx, 52, RULE_decl_member_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(HASH);
			State = 260;
			name_rule();
			State = 261;
			Match(SP);
			State = 262;
			expression_rule();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier() {
			return GetRuleContext<Name_identifierContext>(0);
		}
		public Name_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Name_ruleContext name_rule() {
		Name_ruleContext _localctx = new Name_ruleContext(Context, State);
		EnterRule(_localctx, 54, RULE_name_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			name_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier() {
			return GetRuleContext<Name_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MajaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(MajaParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(MajaParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MajaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Decl_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decl_variableContext decl_variable() {
		Decl_variableContext _localctx = new Decl_variableContext(Context, State);
		EnterRule(_localctx, 56, RULE_decl_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			name_identifier();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 267;
				Match(SP);
				}
			}

			State = 270;
			Match(COLON);
			State = 273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 271;
				Match(SP);
				State = 272;
				type();
				}
				break;
			}
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 275;
				Match(EQ);
				State = 276;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_constContext expression_const() {
			return GetRuleContext<Expression_constContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			expression_const();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_constContext : ParserRuleContext {
		public Expression_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_const(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_constContext expression_const() {
		Expression_constContext _localctx = new Expression_constContext(Context, State);
		EnterRule(_localctx, 60, RULE_expression_const);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_ruleContext : ParserRuleContext {
		public Expression_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_ruleContext expression_rule() {
		Expression_ruleContext _localctx = new Expression_ruleContext(Context, State);
		EnterRule(_localctx, 62, RULE_expression_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_qualifiedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext[] name_identifier() {
			return GetRuleContexts<Name_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier(int i) {
			return GetRuleContext<Name_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MajaParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MajaParser.DOT, i);
		}
		public Name_qualifiedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_qualified; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName_qualified(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Name_qualifiedContext name_qualified() {
		Name_qualifiedContext _localctx = new Name_qualifiedContext(Context, State);
		EnterRule(_localctx, 64, RULE_name_qualified);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			name_identifier();
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 286;
				Match(DOT);
				State = 287;
				name_identifier();
				}
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_qualified_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_qualifiedContext[] name_qualified() {
			return GetRuleContexts<Name_qualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_qualifiedContext name_qualified(int i) {
			return GetRuleContext<Name_qualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MajaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MajaParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(MajaParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(MajaParser.SP, i);
		}
		public Name_qualified_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_qualified_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName_qualified_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Name_qualified_listContext name_qualified_list() {
		Name_qualified_listContext _localctx = new Name_qualified_listContext(Context, State);
		EnterRule(_localctx, 66, RULE_name_qualified_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			name_qualified();
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 294;
				Match(COMMA);
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 295;
					Match(SP);
					}
					}
					State = 298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SP );
				State = 300;
				name_qualified();
				}
				}
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MajaParser.IDENTIFIER, 0); }
		public Name_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Name_identifierContext name_identifier() {
		Name_identifierContext _localctx = new Name_identifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_name_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_identifier_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext[] name_identifier() {
			return GetRuleContexts<Name_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_identifierContext name_identifier(int i) {
			return GetRuleContext<Name_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MajaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MajaParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(MajaParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(MajaParser.SP, i);
		}
		public Name_identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_identifier_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName_identifier_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Name_identifier_listContext name_identifier_list() {
		Name_identifier_listContext _localctx = new Name_identifier_listContext(Context, State);
		EnterRule(_localctx, 70, RULE_name_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			name_identifier();
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 309;
				Match(COMMA);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 310;
					Match(SP);
					}
					}
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SP );
				State = 315;
				name_identifier();
				}
				}
				State = 320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(MajaParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(MajaParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(MajaParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MajaParser.COMMENT, 0); }
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 72, RULE_newline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SP) {
				{
				{
				State = 321;
				Match(SP);
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 327;
				Match(COMMENT);
				}
			}

			State = 330;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', '\x14F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', 'Q', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'T', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'X', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '[', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', 
		'_', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '`', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x6', '\x5', 'o', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 'p', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x6', '\x6', 'x', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 'y', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x7F', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x8B', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\x9D', '\n', '\r', '\f', '\r', '\xE', '\r', '\xA0', 
		'\v', '\r', '\x5', '\r', '\xA2', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xB2', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xB7', '\n', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xBA', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xC1', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\xC6', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x6', '\x11', '\xCA', 
		'\n', '\x11', '\r', '\x11', '\xE', '\x11', '\xCB', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\xD0', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xD7', '\n', 
		'\x13', '\f', '\x13', '\xE', '\x13', '\xDA', '\v', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\xE1', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\xEF', 
		'\n', '\x18', '\f', '\x18', '\xE', '\x18', '\xF2', '\v', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xF8', 
		'\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\xFF', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x10F', '\n', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x114', '\n', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x118', '\n', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x123', '\n', 
		'\"', '\f', '\"', '\xE', '\"', '\x126', '\v', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x6', '#', '\x12B', '\n', '#', '\r', '#', '\xE', '#', 
		'\x12C', '\x3', '#', '\a', '#', '\x130', '\n', '#', '\f', '#', '\xE', 
		'#', '\x133', '\v', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x6', '%', '\x13A', '\n', '%', '\r', '%', '\xE', '%', '\x13B', 
		'\x3', '%', '\a', '%', '\x13F', '\n', '%', '\f', '%', '\xE', '%', '\x142', 
		'\v', '%', '\x3', '&', '\a', '&', '\x145', '\n', '&', '\f', '&', '\xE', 
		'&', '\x148', '\v', '&', '\x3', '&', '\x5', '&', '\x14B', '\n', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x2', '\x2', '\'', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', '\x2', '\x2', '\x2', '\x151', '\x2', 'R', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\\', '\x3', '\x2', '\x2', '\x2', '\x6', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'l', '\x3', '\x2', '\x2', '\x2', '\n', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\f', '~', '\x3', '\x2', '\x2', '\x2', '\xE', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x84', '\x3', '\x2', '\x2', '\x2', '\x14', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x92', '\x3', '\x2', '\x2', '\x2', '\x18', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xAA', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xC9', '\x3', '\x2', '\x2', '\x2', '\"', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xD1', '\x3', '\x2', '\x2', '\x2', '&', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xE2', '\x3', '\x2', '\x2', '\x2', '*', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', ',', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '.', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x30', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\x36', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x10A', '\x3', '\x2', '\x2', '\x2', ':', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x119', '\x3', '\x2', '\x2', '\x2', '>', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x44', '\x127', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x134', '\x3', '\x2', '\x2', '\x2', 'H', '\x136', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'L', 'Q', '\x5', '\b', '\x5', '\x2', 'M', 'Q', '\x5', '\x4', '\x3', '\x2', 
		'N', 'Q', '\x5', '\x6', '\x4', '\x2', 'O', 'Q', '\x5', 'J', '&', '\x2', 
		'P', 'L', '\x3', '\x2', '\x2', '\x2', 'P', 'M', '\x3', '\x2', '\x2', '\x2', 
		'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'T', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'T', 'R', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x5', '\f', '\a', '\x2', 
		'V', 'X', '\x5', 'J', '&', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 
		'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x3', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\\', '^', '\a', '\t', '\x2', '\x2', ']', '_', '\a', '\x17', '\x2', 
		'\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\x5', '\x44', '#', '\x2', '\x63', '\x64', '\x5', 'J', '&', '\x2', '\x64', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\t', '\x2', 
		'\x2', '\x66', 'g', '\x5', 'J', '&', '\x2', 'g', 'h', '\a', '\x3', '\x2', 
		'\x2', 'h', 'i', '\x5', '\x44', '#', '\x2', 'i', 'j', '\x5', 'J', '&', 
		'\x2', 'j', 'k', '\a', '\x4', '\x2', '\x2', 'k', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'n', '\a', '\n', '\x2', '\x2', 'm', 'o', '\a', '\x17', '\x2', 
		'\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x5', '\x42', 
		'\"', '\x2', 's', 't', '\x5', 'J', '&', '\x2', 't', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'x', '\x5', '\xE', '\b', '\x2', 'v', 'x', '\x5', '\f', 
		'\a', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '\v', '\x3', 
		'\x2', '\x2', '\x2', '{', '\x7F', '\x5', '\x14', '\v', '\x2', '|', '\x7F', 
		'\x5', '\x1E', '\x10', '\x2', '}', '\x7F', '\x5', ':', '\x1E', '\x2', 
		'~', '{', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', 
		'~', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x5', '\x10', '\t', '\x2', '\x81', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x83', '\x5', '\x12', '\n', '\x2', '\x83', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\a', '\b', '\x2', 
		'\x2', '\x85', '\x13', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x5', 
		'\x46', '$', '\x2', '\x87', '\x88', '\a', '\x12', '\x2', '\x2', '\x88', 
		'\x8A', '\a', '\x17', '\x2', '\x2', '\x89', '\x8B', '\x5', '$', '\x13', 
		'\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\x5', '\x18', '\r', '\x2', '\x8D', '\x8E', '\x5', 'J', '&', '\x2', 
		'\x8E', '\x8F', '\a', '\x3', '\x2', '\x2', '\x8F', '\x90', '\x5', '\n', 
		'\x6', '\x2', '\x90', '\x91', '\a', '\x4', '\x2', '\x2', '\x91', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x3', '\x2', '\x2', 
		'\x93', '\x94', '\x5', '\x14', '\v', '\x2', '\x94', '\x95', '\a', '\x4', 
		'\x2', '\x2', '\x95', '\x17', '\x3', '\x2', '\x2', '\x2', '\x96', '\xA1', 
		'\a', '\r', '\x2', '\x2', '\x97', '\xA2', '\x5', '\x1A', '\xE', '\x2', 
		'\x98', '\x9E', '\x5', '\x1C', '\xF', '\x2', '\x99', '\x9A', '\a', '\x16', 
		'\x2', '\x2', '\x9A', '\x9B', '\a', '\x17', '\x2', '\x2', '\x9B', '\x9D', 
		'\x5', '\x1A', '\xE', '\x2', '\x9C', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\x97', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', '\xE', '\x2', '\x2', 
		'\xA4', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x5', '\x46', 
		'$', '\x2', '\xA6', '\xA7', '\a', '\x12', '\x2', '\x2', '\xA7', '\xA8', 
		'\a', '\x17', '\x2', '\x2', '\xA8', '\xA9', '\x5', '\"', '\x12', '\x2', 
		'\xA9', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', '\v', 
		'\x2', '\x2', '\xAB', '\xAC', '\a', '\x12', '\x2', '\x2', '\xAC', '\xAD', 
		'\a', '\x17', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\"', '\x12', '\x2', 
		'\xAE', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB1', '\x5', '\x46', 
		'$', '\x2', '\xB0', '\xB2', '\x5', '$', '\x13', '\x2', '\xB1', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x12', 
		'\x2', '\x2', '\xB4', '\xB5', '\a', '\x17', '\x2', '\x2', '\xB5', '\xB7', 
		'\x5', '\"', '\x12', '\x2', '\xB6', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xBA', '\a', '\x15', '\x2', '\x2', '\xB9', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xC0', '\x5', 'J', 
		'&', '\x2', '\xBC', '\xBD', '\a', '\x3', '\x2', '\x2', '\xBD', '\xBE', 
		'\x5', ' ', '\x11', '\x2', '\xBE', '\xBF', '\a', '\x4', '\x2', '\x2', 
		'\xBF', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC6', '\x5', '\x32', '\x1A', '\x2', 
		'\xC3', '\xC6', '\x5', '\x34', '\x1B', '\x2', '\xC4', '\xC6', '\x5', '\x36', 
		'\x1C', '\x2', '\xC5', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC4', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x5', 'J', 
		'&', '\x2', '\xC8', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '!', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCF', 
		'\x5', '\x46', '$', '\x2', '\xCE', '\xD0', '\x5', '.', '\x18', '\x2', 
		'\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '#', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', 
		'\a', '\xF', '\x2', '\x2', '\xD2', '\xD8', '\x5', '&', '\x14', '\x2', 
		'\xD3', '\xD4', '\a', '\x16', '\x2', '\x2', '\xD4', '\xD5', '\a', '\x17', 
		'\x2', '\x2', '\xD5', '\xD7', '\x5', '&', '\x14', '\x2', '\xD6', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\a', '\x10', '\x2', '\x2', 
		'\xDC', '%', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xE1', '\x5', '(', '\x15', 
		'\x2', '\xDE', '\xE1', '\x5', '*', '\x16', '\x2', '\xDF', '\xE1', '\x5', 
		',', '\x17', '\x2', '\xE0', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\'', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x5', 
		'\x46', '$', '\x2', '\xE3', ')', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', 
		'\a', '\x11', '\x2', '\x2', '\xE5', '\xE6', '\x5', '\x46', '$', '\x2', 
		'\xE6', '+', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x5', '<', '\x1F', 
		'\x2', '\xE8', '-', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\a', 
		'\xF', '\x2', '\x2', '\xEA', '\xF0', '\x5', '\x30', '\x19', '\x2', '\xEB', 
		'\xEC', '\a', '\x16', '\x2', '\x2', '\xEC', '\xED', '\a', '\x17', '\x2', 
		'\x2', '\xED', '\xEF', '\x5', '\x30', '\x19', '\x2', '\xEE', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF4', '\a', '\x10', '\x2', '\x2', '\xF4', 
		'/', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF8', '\x5', '\x46', '$', '\x2', 
		'\xF6', '\xF8', '\x5', '<', '\x1F', '\x2', '\xF7', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\xF9', '\xFE', '\x5', '\x46', '$', '\x2', 
		'\xFA', '\xFB', '\a', '\x17', '\x2', '\x2', '\xFB', '\xFC', '\a', '\x14', 
		'\x2', '\x2', '\xFC', '\xFD', '\a', '\x17', '\x2', '\x2', '\xFD', '\xFF', 
		'\x5', '>', ' ', '\x2', '\xFE', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\x101', '\x5', '\x46', '$', '\x2', '\x101', '\x102', 
		'\a', '\x12', '\x2', '\x2', '\x102', '\x103', '\a', '\x17', '\x2', '\x2', 
		'\x103', '\x104', '\x5', '\"', '\x12', '\x2', '\x104', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\a', '\x11', '\x2', '\x2', '\x106', 
		'\x107', '\x5', '\x38', '\x1D', '\x2', '\x107', '\x108', '\a', '\x17', 
		'\x2', '\x2', '\x108', '\x109', '\x5', '@', '!', '\x2', '\x109', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x5', '\x46', '$', '\x2', 
		'\x10B', '\x39', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10E', '\x5', 
		'\x46', '$', '\x2', '\x10D', '\x10F', '\a', '\x17', '\x2', '\x2', '\x10E', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', '\x110', '\x113', 
		'\a', '\x12', '\x2', '\x2', '\x111', '\x112', '\a', '\x17', '\x2', '\x2', 
		'\x112', '\x114', '\x5', '\"', '\x12', '\x2', '\x113', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\a', '\x14', '\x2', 
		'\x2', '\x116', '\x118', '\x5', '<', '\x1F', '\x2', '\x117', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x118', ';', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x5', '>', 
		' ', '\x2', '\x11A', '=', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x124', '\x5', '\x46', '$', '\x2', '\x120', 
		'\x121', '\a', '\x13', '\x2', '\x2', '\x121', '\x123', '\x5', '\x46', 
		'$', '\x2', '\x122', '\x120', '\x3', '\x2', '\x2', '\x2', '\x123', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x125', '\x3', '\x2', '\x2', '\x2', '\x125', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x131', '\x5', '\x42', '\"', '\x2', '\x128', '\x12A', '\a', '\x16', '\x2', 
		'\x2', '\x129', '\x12B', '\a', '\x17', '\x2', '\x2', '\x12A', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x130', '\x5', '\x42', '\"', '\x2', '\x12F', '\x128', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x133', '\x3', '\x2', '\x2', '\x2', '\x131', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x45', '\x3', '\x2', '\x2', '\x2', '\x133', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x135', '\a', '\f', '\x2', '\x2', '\x135', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x136', '\x140', '\x5', '\x46', '$', 
		'\x2', '\x137', '\x139', '\a', '\x16', '\x2', '\x2', '\x138', '\x13A', 
		'\a', '\x17', '\x2', '\x2', '\x139', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13F', '\x5', '\x46', 
		'$', '\x2', '\x13E', '\x137', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x142', '\x140', '\x3', '\x2', '\x2', '\x2', '\x143', '\x145', 
		'\a', '\x17', '\x2', '\x2', '\x144', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x148', '\x3', '\x2', '\x2', '\x2', '\x146', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x148', '\x146', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '\x14B', '\a', '\a', '\x2', '\x2', '\x14A', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\a', '\x18', '\x2', 
		'\x2', '\x14D', 'K', '\x3', '\x2', '\x2', '\x2', '$', 'P', 'R', 'W', 'Y', 
		'`', 'p', 'w', 'y', '~', '\x8A', '\x9E', '\xA1', '\xB1', '\xB6', '\xB9', 
		'\xC0', '\xC5', '\xCB', '\xCF', '\xD8', '\xE0', '\xF0', '\xF7', '\xFE', 
		'\x10E', '\x113', '\x117', '\x124', '\x12C', '\x131', '\x13B', '\x140', 
		'\x146', '\x14A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Maja.Compiler.Parser
