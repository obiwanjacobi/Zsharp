//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Maja.Compiler/MajaParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Maja.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MajaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Indent=1, Dedent=2, Comment=3, Mod=4, Pub=5, Use=6, Self=7, Ret=8, Brk=9, 
		Cnt=10, Loop=11, If=12, Else=13, Elif=14, True=15, False=16, In=17, Not=18, 
		And=19, Or=20, NumberBin=21, NumberOct=22, NumberDec=23, NumberDecPrefix=24, 
		NumberHex=25, Identifier=26, Character=27, String=28, ParenOpen=29, ParenClose=30, 
		AngleOpen=31, AngleClose=32, BracketOpen=33, BracketClose=34, CurlyOpen=35, 
		CurlyClose=36, Hash=37, Colon=38, SemiColon=39, Dot=40, Range=41, Spread=42, 
		Eq=43, Neq=44, GtEq=45, LtEq=46, Plus=47, Minus=48, Multiply=49, Power=50, 
		Divide=51, Root=52, Modulo=53, BitAnd=54, BitOr=55, BitNot=56, BitXor_Imm=57, 
		BitShiftL=58, BitRollL=59, BitRollR=60, Question=61, Dollar=62, At=63, 
		Error=64, StrQuote=65, CharQuote=66, BackTick=67, Discard=68, Comma=69, 
		Sp=70, Eol=71;
	public const int
		RULE_compilationUnit = 0, RULE_directiveMod = 1, RULE_directivePub = 2, 
		RULE_directiveUse = 3, RULE_codeBlock = 4, RULE_declaration = 5, RULE_declarationPub = 6, 
		RULE_statement = 7, RULE_statementFlow = 8, RULE_statementIf = 9, RULE_statementElse = 10, 
		RULE_statementElseIf = 11, RULE_statementRet = 12, RULE_statementAssignment = 13, 
		RULE_statementExpression = 14, RULE_declarationFunction = 15, RULE_declarationFunctionLocal = 16, 
		RULE_parameterList = 17, RULE_parameterListComma = 18, RULE_parameterListIndent = 19, 
		RULE_parameter = 20, RULE_argumentList = 21, RULE_argumentListComma = 22, 
		RULE_argumentListIndent = 23, RULE_argument = 24, RULE_declarationType = 25, 
		RULE_declarationTypeMemberList = 26, RULE_declarationTypeMemberListEnum = 27, 
		RULE_declarationTypeMemberListField = 28, RULE_declarationTypeMemberListRule = 29, 
		RULE_type = 30, RULE_typeParameterList = 31, RULE_typeParameterListComma = 32, 
		RULE_typeParameterListIndent = 33, RULE_typeParameter = 34, RULE_typeParameterGeneric = 35, 
		RULE_typeParameterTemplate = 36, RULE_typeParameterValue = 37, RULE_typeArgumentList = 38, 
		RULE_typeArgumentListComma = 39, RULE_typeArgumentListIndent = 40, RULE_typeArgument = 41, 
		RULE_typeInitializer = 42, RULE_typeInitializerComma = 43, RULE_typeInitializerIndent = 44, 
		RULE_typeInitializerField = 45, RULE_memberEnumValue = 46, RULE_memberEnum = 47, 
		RULE_memberField = 48, RULE_memberRule = 49, RULE_declarationVariable = 50, 
		RULE_declarationVariableTyped = 51, RULE_declarationVariableInferred = 52, 
		RULE_variableAssignment = 53, RULE_expression = 54, RULE_expressionConstant = 55, 
		RULE_expressionRule = 56, RULE_expressionOperatorBinary = 57, RULE_expressionOperatorUnaryPrefix = 58, 
		RULE_expressionOperatorArithmetic = 59, RULE_expressionOperatorArithmeticUnaryPrefix = 60, 
		RULE_expressionOperatorLogic = 61, RULE_expressionOperatorLogicUnaryPrefix = 62, 
		RULE_expressionOperatorComparison = 63, RULE_expressionOperatorBits = 64, 
		RULE_expressionOperatorBitsUnaryPrefix = 65, RULE_expressionLiteralBool = 66, 
		RULE_expressionLiteral = 67, RULE_nameQualified = 68, RULE_nameQualifiedList = 69, 
		RULE_nameQualifiedListComma = 70, RULE_nameQualifiedListIndent = 71, RULE_nameIdentifier = 72, 
		RULE_nameIdentifierList = 73, RULE_nameIdentifierListComma = 74, RULE_nameIdentifierListIndent = 75, 
		RULE_string = 76, RULE_number = 77, RULE_comment = 78, RULE_newline = 79, 
		RULE_freeSpace = 80;
	public static readonly string[] ruleNames = {
		"compilationUnit", "directiveMod", "directivePub", "directiveUse", "codeBlock", 
		"declaration", "declarationPub", "statement", "statementFlow", "statementIf", 
		"statementElse", "statementElseIf", "statementRet", "statementAssignment", 
		"statementExpression", "declarationFunction", "declarationFunctionLocal", 
		"parameterList", "parameterListComma", "parameterListIndent", "parameter", 
		"argumentList", "argumentListComma", "argumentListIndent", "argument", 
		"declarationType", "declarationTypeMemberList", "declarationTypeMemberListEnum", 
		"declarationTypeMemberListField", "declarationTypeMemberListRule", "type", 
		"typeParameterList", "typeParameterListComma", "typeParameterListIndent", 
		"typeParameter", "typeParameterGeneric", "typeParameterTemplate", "typeParameterValue", 
		"typeArgumentList", "typeArgumentListComma", "typeArgumentListIndent", 
		"typeArgument", "typeInitializer", "typeInitializerComma", "typeInitializerIndent", 
		"typeInitializerField", "memberEnumValue", "memberEnum", "memberField", 
		"memberRule", "declarationVariable", "declarationVariableTyped", "declarationVariableInferred", 
		"variableAssignment", "expression", "expressionConstant", "expressionRule", 
		"expressionOperatorBinary", "expressionOperatorUnaryPrefix", "expressionOperatorArithmetic", 
		"expressionOperatorArithmeticUnaryPrefix", "expressionOperatorLogic", 
		"expressionOperatorLogicUnaryPrefix", "expressionOperatorComparison", 
		"expressionOperatorBits", "expressionOperatorBitsUnaryPrefix", "expressionLiteralBool", 
		"expressionLiteral", "nameQualified", "nameQualifiedList", "nameQualifiedListComma", 
		"nameQualifiedListIndent", "nameIdentifier", "nameIdentifierList", "nameIdentifierListComma", 
		"nameIdentifierListIndent", "string", "number", "comment", "newline", 
		"freeSpace"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'mod'", "'pub'", "'use'", "'self'", "'ret'", 
		"'brk'", "'cnt'", "'loop'", "'if'", "'else'", "'elif'", "'true'", "'false'", 
		"'in'", "'not'", "'and'", "'or'", null, null, null, null, null, null, 
		null, null, "'('", "')'", "'<'", "'>'", "'['", "']'", "'{'", "'}'", "'#'", 
		"':'", "';'", "'.'", "'..'", "'...'", "'='", "'<>'", "'>='", "'=<'", "'+'", 
		"'-'", "'*'", "'**'", "'/'", "'//'", "'%'", "'&'", "'|'", "'~'", "'^'", 
		"'<<'", "'|<'", "'>|'", "'?'", "'$'", "'@'", "'!'", "'\"'", "'''", "'`'", 
		"'_'", "','", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Indent", "Dedent", "Comment", "Mod", "Pub", "Use", "Self", "Ret", 
		"Brk", "Cnt", "Loop", "If", "Else", "Elif", "True", "False", "In", "Not", 
		"And", "Or", "NumberBin", "NumberOct", "NumberDec", "NumberDecPrefix", 
		"NumberHex", "Identifier", "Character", "String", "ParenOpen", "ParenClose", 
		"AngleOpen", "AngleClose", "BracketOpen", "BracketClose", "CurlyOpen", 
		"CurlyClose", "Hash", "Colon", "SemiColon", "Dot", "Range", "Spread", 
		"Eq", "Neq", "GtEq", "LtEq", "Plus", "Minus", "Multiply", "Power", "Divide", 
		"Root", "Modulo", "BitAnd", "BitOr", "BitNot", "BitXor_Imm", "BitShiftL", 
		"BitRollL", "BitRollR", "Question", "Dollar", "At", "Error", "StrQuote", 
		"CharQuote", "BackTick", "Discard", "Comma", "Sp", "Eol"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MajaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MajaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MajaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MajaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveModContext directiveMod() {
			return GetRuleContext<DirectiveModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveUseContext[] directiveUse() {
			return GetRuleContexts<DirectiveUseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveUseContext directiveUse(int i) {
			return GetRuleContext<DirectiveUseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivePubContext[] directivePub() {
			return GetRuleContexts<DirectivePubContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivePubContext directivePub(int i) {
			return GetRuleContext<DirectivePubContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mod) {
				{
				State = 162;
				directiveMod();
				}
			}

			State = 170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 168;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Use:
						{
						State = 165;
						directiveUse();
						}
						break;
					case Pub:
						{
						State = 166;
						directivePub();
						}
						break;
					case Comment:
					case Sp:
					case Eol:
						{
						State = 167;
						newline();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72339070086648104L) != 0) || _la==Sp || _la==Eol) {
				{
				State = 176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 173;
					declaration();
					}
					break;
				case 2:
					{
					State = 174;
					statement();
					}
					break;
				case 3:
					{
					State = 175;
					newline();
					}
					break;
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(MajaParser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified() {
			return GetRuleContext<NameQualifiedContext>(0);
		}
		public DirectiveModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveModContext directiveMod() {
		DirectiveModContext _localctx = new DirectiveModContext(Context, State);
		EnterRule(_localctx, 2, RULE_directiveMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(Mod);
			State = 182;
			freeSpace();
			State = 183;
			nameQualified();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivePubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pub() { return GetToken(MajaParser.Pub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListContext nameQualifiedList() {
			return GetRuleContext<NameQualifiedListContext>(0);
		}
		public DirectivePubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directivePub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectivePub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivePubContext directivePub() {
		DirectivePubContext _localctx = new DirectivePubContext(Context, State);
		EnterRule(_localctx, 4, RULE_directivePub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(Pub);
			State = 186;
			freeSpace();
			State = 187;
			nameQualifiedList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Use() { return GetToken(MajaParser.Use, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListContext nameQualifiedList() {
			return GetRuleContext<NameQualifiedListContext>(0);
		}
		public DirectiveUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveUseContext directiveUse() {
		DirectiveUseContext _localctx = new DirectiveUseContext(Context, State);
		EnterRule(_localctx, 6, RULE_directiveUse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(Use);
			State = 190;
			freeSpace();
			State = 191;
			nameQualifiedList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_codeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 196;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 193;
					statement();
					}
					break;
				case 2:
					{
					State = 194;
					declaration();
					}
					break;
				case 3:
					{
					State = 195;
					newline();
					}
					break;
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72339070086648104L) != 0) || _la==Sp || _la==Eol );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationPubContext declarationPub() {
			return GetRuleContext<DeclarationPubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableContext declarationVariable() {
			return GetRuleContext<DeclarationVariableContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				declarationPub();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				declarationVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationPubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationFunctionContext declarationFunction() {
			return GetRuleContext<DeclarationFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeContext declarationType() {
			return GetRuleContext<DeclarationTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pub() { return GetToken(MajaParser.Pub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		public DeclarationPubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationPub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationPub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationPubContext declarationPub() {
		DeclarationPubContext _localctx = new DeclarationPubContext(Context, State);
		EnterRule(_localctx, 12, RULE_declarationPub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Pub) {
				{
				State = 204;
				Match(Pub);
				State = 205;
				Match(Sp);
				}
			}

			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 208;
				declarationFunction();
				}
				break;
			case 2:
				{
				State = 209;
				declarationType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementFlowContext statementFlow() {
			return GetRuleContext<StatementFlowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementAssignmentContext statementAssignment() {
			return GetRuleContext<StatementAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				statementFlow();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				statementAssignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214;
				statementExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementRetContext statementRet() {
			return GetRuleContext<StatementRetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementIfContext statementIf() {
			return GetRuleContext<StatementIfContext>(0);
		}
		public StatementFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFlow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementFlowContext statementFlow() {
		StatementFlowContext _localctx = new StatementFlowContext(Context, State);
		EnterRule(_localctx, 16, RULE_statementFlow);
		try {
			State = 219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ret:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217;
				statementRet();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				statementIf();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MajaParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseContext statementElse() {
			return GetRuleContext<StatementElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseIfContext statementElseIf() {
			return GetRuleContext<StatementElseIfContext>(0);
		}
		public StatementIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementIfContext statementIf() {
		StatementIfContext _localctx = new StatementIfContext(Context, State);
		EnterRule(_localctx, 18, RULE_statementIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(If);
			State = 222;
			Match(Sp);
			State = 223;
			expression(0);
			State = 224;
			newline();
			State = 225;
			Match(Indent);
			State = 226;
			codeBlock();
			State = 227;
			Match(Dedent);
			State = 230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 228;
				statementElse();
				}
				break;
			case 2:
				{
				State = 229;
				statementElseIf();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MajaParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		public StatementElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementElse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementElseContext statementElse() {
		StatementElseContext _localctx = new StatementElseContext(Context, State);
		EnterRule(_localctx, 20, RULE_statementElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(Else);
			State = 233;
			newline();
			State = 234;
			Match(Indent);
			State = 235;
			codeBlock();
			State = 236;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementElseIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MajaParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MajaParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Elif() { return GetToken(MajaParser.Elif, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseContext statementElse() {
			return GetRuleContext<StatementElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseIfContext statementElseIf() {
			return GetRuleContext<StatementElseIfContext>(0);
		}
		public StatementElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementElseIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementElseIfContext statementElseIf() {
		StatementElseIfContext _localctx = new StatementElseIfContext(Context, State);
		EnterRule(_localctx, 22, RULE_statementElseIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Else:
				{
				State = 238;
				Match(Else);
				State = 239;
				freeSpace();
				State = 240;
				Match(If);
				}
				break;
			case Elif:
				{
				State = 242;
				Match(Elif);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 245;
			Match(Sp);
			State = 246;
			expression(0);
			State = 247;
			newline();
			State = 248;
			Match(Indent);
			State = 249;
			codeBlock();
			State = 250;
			Match(Dedent);
			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 251;
				statementElse();
				}
				break;
			case 2:
				{
				State = 252;
				statementElseIf();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementRetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ret() { return GetToken(MajaParser.Ret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementRetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementRet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementRet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementRetContext statementRet() {
		StatementRetContext _localctx = new StatementRetContext(Context, State);
		EnterRule(_localctx, 24, RULE_statementRet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(Ret);
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 256;
				Match(Sp);
				State = 257;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementAssignmentContext statementAssignment() {
		StatementAssignmentContext _localctx = new StatementAssignmentContext(Context, State);
		EnterRule(_localctx, 26, RULE_statementAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			nameIdentifier();
			State = 261;
			Match(Sp);
			State = 262;
			Match(Eq);
			State = 263;
			Match(Sp);
			State = 264;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_statementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(MajaParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(MajaParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DeclarationFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationFunctionContext declarationFunction() {
		DeclarationFunctionContext _localctx = new DeclarationFunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_declarationFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			nameIdentifier();
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 269;
				Match(Sp);
				}
			}

			State = 272;
			Match(Colon);
			State = 273;
			freeSpace();
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 274;
				typeParameterList();
				}
			}

			State = 277;
			parameterList();
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sp) {
					{
					State = 278;
					Match(Sp);
					}
				}

				State = 281;
				Match(Colon);
				State = 282;
				Match(Sp);
				State = 283;
				type();
				}
				break;
			}
			State = 286;
			newline();
			State = 287;
			Match(Indent);
			State = 288;
			codeBlock();
			State = 289;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationFunctionLocalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationFunctionContext declarationFunction() {
			return GetRuleContext<DeclarationFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		public DeclarationFunctionLocalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationFunctionLocal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationFunctionLocal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationFunctionLocalContext declarationFunctionLocal() {
		DeclarationFunctionLocalContext _localctx = new DeclarationFunctionLocalContext(Context, State);
		EnterRule(_localctx, 32, RULE_declarationFunctionLocal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(Indent);
			State = 292;
			declarationFunction();
			State = 293;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListCommaContext parameterListComma() {
			return GetRuleContext<ParameterListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListIndentContext parameterListIndent() {
			return GetRuleContext<ParameterListIndentContext>(0);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(ParenOpen);
			State = 300;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 296;
				parameterListComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 297;
				newline();
				State = 298;
				parameterListIndent();
				}
				break;
			case ParenClose:
				break;
			default:
				break;
			}
			State = 302;
			Match(ParenClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public ParameterListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListCommaContext parameterListComma() {
		ParameterListCommaContext _localctx = new ParameterListCommaContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameterListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			parameter();
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 305;
				Match(Comma);
				State = 306;
				Match(Sp);
				State = 307;
				parameter();
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public ParameterListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListIndentContext parameterListIndent() {
		ParameterListIndentContext _localctx = new ParameterListIndentContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameterListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			Match(Indent);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comment || _la==Sp) {
					{
					{
					State = 314;
					comment();
					}
					}
					State = 319;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 320;
				parameter();
				State = 321;
				newline();
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Comment || _la==Identifier || _la==Sp );
			State = 327;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			nameIdentifier();
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 330;
				Match(Sp);
				}
			}

			State = 333;
			Match(Colon);
			State = 334;
			Match(Sp);
			State = 335;
			type();
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 336;
				Match(Sp);
				State = 337;
				Match(Eq);
				State = 338;
				Match(Sp);
				State = 339;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListCommaContext argumentListComma() {
			return GetRuleContext<ArgumentListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListIndentContext argumentListIndent() {
			return GetRuleContext<ArgumentListIndentContext>(0);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 42, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(ParenOpen);
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comment || _la==Sp || _la==Eol) {
				{
				State = 343;
				newline();
				}
			}

			State = 348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case Not:
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Identifier:
			case Character:
			case String:
			case ParenOpen:
			case Minus:
			case BitNot:
				{
				State = 346;
				argumentListComma();
				}
				break;
			case Indent:
				{
				State = 347;
				argumentListIndent();
				}
				break;
			case ParenClose:
				break;
			default:
				break;
			}
			State = 350;
			Match(ParenClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public ArgumentListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListCommaContext argumentListComma() {
		ArgumentListCommaContext _localctx = new ArgumentListCommaContext(Context, State);
		EnterRule(_localctx, 44, RULE_argumentListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			argument();
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 353;
				Match(Comma);
				State = 354;
				Match(Sp);
				State = 355;
				argument();
				}
				}
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public ArgumentListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListIndentContext argumentListIndent() {
		ArgumentListIndentContext _localctx = new ArgumentListIndentContext(Context, State);
		EnterRule(_localctx, 46, RULE_argumentListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			Match(Indent);
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 362;
				argument();
				State = 363;
				newline();
				}
				}
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72339070086643712L) != 0) );
			State = 369;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 48, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 371;
				nameIdentifier();
				State = 372;
				Match(Sp);
				State = 373;
				Match(Eq);
				State = 374;
				Match(Sp);
				}
				break;
			}
			State = 378;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListContext declarationTypeMemberList() {
			return GetRuleContext<DeclarationTypeMemberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DeclarationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeContext declarationType() {
		DeclarationTypeContext _localctx = new DeclarationTypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_declarationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			nameIdentifier();
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 381;
				typeParameterList();
				}
			}

			State = 390;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sp) {
					{
					State = 384;
					Match(Sp);
					}
				}

				State = 387;
				Match(Colon);
				State = 388;
				Match(Sp);
				State = 389;
				type();
				}
				break;
			}
			State = 392;
			newline();
			State = 393;
			Match(Indent);
			State = 394;
			declarationTypeMemberList();
			State = 395;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListEnumContext[] declarationTypeMemberListEnum() {
			return GetRuleContexts<DeclarationTypeMemberListEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListEnumContext declarationTypeMemberListEnum(int i) {
			return GetRuleContext<DeclarationTypeMemberListEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListFieldContext[] declarationTypeMemberListField() {
			return GetRuleContexts<DeclarationTypeMemberListFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListFieldContext declarationTypeMemberListField(int i) {
			return GetRuleContext<DeclarationTypeMemberListFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListRuleContext[] declarationTypeMemberListRule() {
			return GetRuleContexts<DeclarationTypeMemberListRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListRuleContext declarationTypeMemberListRule(int i) {
			return GetRuleContext<DeclarationTypeMemberListRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public DeclarationTypeMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListContext declarationTypeMemberList() {
		DeclarationTypeMemberListContext _localctx = new DeclarationTypeMemberListContext(Context, State);
		EnterRule(_localctx, 52, RULE_declarationTypeMemberList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 401;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 397;
					declarationTypeMemberListEnum();
					}
					break;
				case 2:
					{
					State = 398;
					declarationTypeMemberListField();
					}
					break;
				case 3:
					{
					State = 399;
					declarationTypeMemberListRule();
					}
					break;
				case 4:
					{
					State = 400;
					newline();
					}
					break;
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 137506062344L) != 0) || _la==Sp || _la==Eol );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumValueContext[] memberEnumValue() {
			return GetRuleContexts<MemberEnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumValueContext memberEnumValue(int i) {
			return GetRuleContext<MemberEnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumContext[] memberEnum() {
			return GetRuleContexts<MemberEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumContext memberEnum(int i) {
			return GetRuleContext<MemberEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext[] freeSpace() {
			return GetRuleContexts<FreeSpaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace(int i) {
			return GetRuleContext<FreeSpaceContext>(i);
		}
		public DeclarationTypeMemberListEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberListEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberListEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListEnumContext declarationTypeMemberListEnum() {
		DeclarationTypeMemberListEnumContext _localctx = new DeclarationTypeMemberListEnumContext(Context, State);
		EnterRule(_localctx, 54, RULE_declarationTypeMemberListEnum);
		int _la;
		try {
			int _alt;
			State = 428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 405;
						memberEnumValue();
						State = 406;
						newline();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 410;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 412;
					memberEnum();
					State = 419;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 413;
						Match(Comma);
						State = 414;
						freeSpace();
						State = 415;
						memberEnum();
						}
						}
						State = 421;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 424;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Identifier );
				State = 426;
				newline();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberFieldContext[] memberField() {
			return GetRuleContexts<MemberFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberFieldContext memberField(int i) {
			return GetRuleContext<MemberFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public DeclarationTypeMemberListFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberListField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberListField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListFieldContext declarationTypeMemberListField() {
		DeclarationTypeMemberListFieldContext _localctx = new DeclarationTypeMemberListFieldContext(Context, State);
		EnterRule(_localctx, 56, RULE_declarationTypeMemberListField);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 430;
					memberField();
					State = 431;
					newline();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 435;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberRuleContext[] memberRule() {
			return GetRuleContexts<MemberRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberRuleContext memberRule(int i) {
			return GetRuleContext<MemberRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public DeclarationTypeMemberListRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberListRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberListRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListRuleContext declarationTypeMemberListRule() {
		DeclarationTypeMemberListRuleContext _localctx = new DeclarationTypeMemberListRuleContext(Context, State);
		EnterRule(_localctx, 58, RULE_declarationTypeMemberListRule);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 437;
					memberRule();
					State = 438;
					newline();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 442;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			nameIdentifier();
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 445;
				typeArgumentList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListCommaContext typeParameterListComma() {
			return GetRuleContext<TypeParameterListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListIndentContext typeParameterListIndent() {
			return GetRuleContext<TypeParameterListIndentContext>(0);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeParameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(AngleOpen);
			State = 453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case Hash:
				{
				State = 449;
				typeParameterListComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 450;
				newline();
				State = 451;
				typeParameterListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 455;
			Match(AngleClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public TypeParameterListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListCommaContext typeParameterListComma() {
		TypeParameterListCommaContext _localctx = new TypeParameterListCommaContext(Context, State);
		EnterRule(_localctx, 64, RULE_typeParameterListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			typeParameter();
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 458;
				Match(Comma);
				State = 459;
				Match(Sp);
				State = 460;
				typeParameter();
				}
				}
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public TypeParameterListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListIndentContext typeParameterListIndent() {
		TypeParameterListIndentContext _localctx = new TypeParameterListIndentContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeParameterListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(Indent);
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comment || _la==Sp) {
					{
					{
					State = 467;
					comment();
					}
					}
					State = 472;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 473;
				typeParameter();
				State = 474;
				newline();
				}
				}
				State = 478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 137506062344L) != 0) || _la==Sp );
			State = 480;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterGenericContext typeParameterGeneric() {
			return GetRuleContext<TypeParameterGenericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterTemplateContext typeParameterTemplate() {
			return GetRuleContext<TypeParameterTemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterValueContext typeParameterValue() {
			return GetRuleContext<TypeParameterValueContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 68, RULE_typeParameter);
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482;
				typeParameterGeneric();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483;
				typeParameterTemplate();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 484;
				typeParameterValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		public TypeParameterGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterGenericContext typeParameterGeneric() {
		TypeParameterGenericContext _localctx = new TypeParameterGenericContext(Context, State);
		EnterRule(_localctx, 70, RULE_typeParameterGeneric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			type();
			State = 492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 488;
				Match(Sp);
				State = 489;
				Match(Eq);
				State = 490;
				Match(Sp);
				State = 491;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterTemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		public TypeParameterTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterTemplate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterTemplateContext typeParameterTemplate() {
		TypeParameterTemplateContext _localctx = new TypeParameterTemplateContext(Context, State);
		EnterRule(_localctx, 72, RULE_typeParameterTemplate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(Hash);
			State = 495;
			type();
			State = 500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 496;
				Match(Sp);
				State = 497;
				Match(Eq);
				State = 498;
				Match(Sp);
				State = 499;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeParameterValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterValueContext typeParameterValue() {
		TypeParameterValueContext _localctx = new TypeParameterValueContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeParameterValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			nameIdentifier();
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 503;
				Match(Sp);
				}
			}

			State = 506;
			Match(Colon);
			State = 507;
			Match(Sp);
			State = 508;
			type();
			State = 513;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 509;
				Match(Sp);
				State = 510;
				Match(Eq);
				State = 511;
				Match(Sp);
				State = 512;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListCommaContext typeArgumentListComma() {
			return GetRuleContext<TypeArgumentListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListIndentContext typeArgumentListIndent() {
			return GetRuleContext<TypeArgumentListIndentContext>(0);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 76, RULE_typeArgumentList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(AngleOpen);
			State = 520;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case Not:
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Identifier:
			case Character:
			case String:
			case ParenOpen:
			case Minus:
			case BitNot:
				{
				State = 516;
				typeArgumentListComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 517;
				newline();
				State = 518;
				typeArgumentListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 522;
			Match(AngleClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public TypeArgumentListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListCommaContext typeArgumentListComma() {
		TypeArgumentListCommaContext _localctx = new TypeArgumentListCommaContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeArgumentListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			typeArgument();
			State = 530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 525;
				Match(Comma);
				State = 526;
				Match(Sp);
				State = 527;
				typeArgument();
				}
				}
				State = 532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public TypeArgumentListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListIndentContext typeArgumentListIndent() {
		TypeArgumentListIndentContext _localctx = new TypeArgumentListIndentContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeArgumentListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(Indent);
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 534;
				typeArgument();
				State = 535;
				newline();
				}
				}
				State = 539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72339070086643712L) != 0) );
			State = 541;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeArgument);
		try {
			State = 545;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543;
				type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerCommaContext typeInitializerComma() {
			return GetRuleContext<TypeInitializerCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerIndentContext typeInitializerIndent() {
			return GetRuleContext<TypeInitializerIndentContext>(0);
		}
		public TypeInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerContext typeInitializer() {
		TypeInitializerContext _localctx = new TypeInitializerContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeInitializer);
		try {
			State = 551;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CurlyOpen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 547;
				typeInitializerComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 548;
				newline();
				State = 549;
				typeInitializerIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyOpen() { return GetToken(MajaParser.CurlyOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext[] typeInitializerField() {
			return GetRuleContexts<TypeInitializerFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext typeInitializerField(int i) {
			return GetRuleContext<TypeInitializerFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyClose() { return GetToken(MajaParser.CurlyClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public TypeInitializerCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializerComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializerComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerCommaContext typeInitializerComma() {
		TypeInitializerCommaContext _localctx = new TypeInitializerCommaContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeInitializerComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			Match(CurlyOpen);
			State = 554;
			typeInitializerField();
			State = 560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 555;
				Match(Comma);
				State = 556;
				Match(Sp);
				State = 557;
				typeInitializerField();
				}
				}
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 563;
			Match(CurlyClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext[] typeInitializerField() {
			return GetRuleContexts<TypeInitializerFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext typeInitializerField(int i) {
			return GetRuleContext<TypeInitializerFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public TypeInitializerIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializerIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializerIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerIndentContext typeInitializerIndent() {
		TypeInitializerIndentContext _localctx = new TypeInitializerIndentContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeInitializerIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(Indent);
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 566;
				typeInitializerField();
				State = 567;
				newline();
				}
				}
				State = 571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 573;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeInitializerFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializerField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializerField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerFieldContext typeInitializerField() {
		TypeInitializerFieldContext _localctx = new TypeInitializerFieldContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeInitializerField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			nameIdentifier();
			State = 576;
			Match(Sp);
			State = 577;
			Match(Eq);
			State = 578;
			Match(Sp);
			State = 579;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberEnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionConstantContext expressionConstant() {
			return GetRuleContext<ExpressionConstantContext>(0);
		}
		public MemberEnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberEnumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberEnumValueContext memberEnumValue() {
		MemberEnumValueContext _localctx = new MemberEnumValueContext(Context, State);
		EnterRule(_localctx, 92, RULE_memberEnumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			nameIdentifier();
			State = 586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 582;
				Match(Sp);
				State = 583;
				Match(Eq);
				State = 584;
				Match(Sp);
				State = 585;
				expressionConstant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public MemberEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberEnumContext memberEnum() {
		MemberEnumContext _localctx = new MemberEnumContext(Context, State);
		EnterRule(_localctx, 94, RULE_memberEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemberFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberFieldContext memberField() {
		MemberFieldContext _localctx = new MemberFieldContext(Context, State);
		EnterRule(_localctx, 96, RULE_memberField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			nameIdentifier();
			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 591;
				Match(Sp);
				}
			}

			State = 594;
			Match(Colon);
			State = 595;
			Match(Sp);
			State = 596;
			type();
			State = 601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 597;
				Match(Sp);
				State = 598;
				Match(Eq);
				State = 599;
				Match(Sp);
				State = 600;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionRuleContext expressionRule() {
			return GetRuleContext<ExpressionRuleContext>(0);
		}
		public MemberRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberRuleContext memberRule() {
		MemberRuleContext _localctx = new MemberRuleContext(Context, State);
		EnterRule(_localctx, 98, RULE_memberRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(Hash);
			State = 604;
			expressionRule();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableTypedContext declarationVariableTyped() {
			return GetRuleContext<DeclarationVariableTypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableInferredContext declarationVariableInferred() {
			return GetRuleContext<DeclarationVariableInferredContext>(0);
		}
		public DeclarationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableContext declarationVariable() {
		DeclarationVariableContext _localctx = new DeclarationVariableContext(Context, State);
		EnterRule(_localctx, 100, RULE_declarationVariable);
		try {
			State = 608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 606;
				declarationVariableTyped();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 607;
				declarationVariableInferred();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableTypedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationVariableTypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariableTyped; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariableTyped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableTypedContext declarationVariableTyped() {
		DeclarationVariableTypedContext _localctx = new DeclarationVariableTypedContext(Context, State);
		EnterRule(_localctx, 102, RULE_declarationVariableTyped);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			nameIdentifier();
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 611;
				Match(Sp);
				}
			}

			State = 614;
			Match(Colon);
			State = 615;
			Match(Sp);
			State = 616;
			type();
			State = 623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sp) {
					{
					State = 617;
					Match(Sp);
					}
				}

				State = 620;
				Match(Eq);
				State = 621;
				Match(Sp);
				State = 622;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableInferredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationVariableInferredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariableInferred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariableInferred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableInferredContext declarationVariableInferred() {
		DeclarationVariableInferredContext _localctx = new DeclarationVariableInferredContext(Context, State);
		EnterRule(_localctx, 104, RULE_declarationVariableInferred);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			nameIdentifier();
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 626;
				Match(Sp);
				}
			}

			State = 629;
			Match(Colon);
			State = 630;
			Match(Eq);
			State = 631;
			Match(Sp);
			State = 632;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 106, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			nameIdentifier();
			State = 635;
			Match(Sp);
			State = 636;
			Match(Eq);
			State = 637;
			Match(Sp);
			State = 638;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionIdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public ExpressionIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionMemberAccessContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MajaParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public ExpressionMemberAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInvocationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public ExpressionInvocationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryPrefixContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorUnaryPrefixContext expressionOperatorUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionUnaryPrefixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBinaryContext expressionOperatorBinary() {
			return GetRuleContext<ExpressionOperatorBinaryContext>(0);
		}
		public ExpressionBinaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionTypeInitializerContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerContext typeInitializer() {
			return GetRuleContext<TypeInitializerContext>(0);
		}
		public ExpressionTypeInitializerContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionTypeInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionConstContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionConstantContext expressionConstant() {
			return GetRuleContext<ExpressionConstantContext>(0);
		}
		public ExpressionConstContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionConst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionPrecedenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		public ExpressionPrecedenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionPrecedence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 108;
		EnterRecursionRule(_localctx, 108, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
			case String:
				{
				_localctx = new ExpressionConstContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 641;
				expressionConstant();
				}
				break;
			case Not:
			case Minus:
			case BitNot:
				{
				_localctx = new ExpressionUnaryPrefixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 642;
				expressionOperatorUnaryPrefix();
				State = 643;
				expression(6);
				}
				break;
			case ParenOpen:
				{
				_localctx = new ExpressionPrecedenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 645;
				Match(ParenOpen);
				State = 646;
				expression(0);
				State = 647;
				Match(ParenClose);
				}
				break;
			case Identifier:
				{
				_localctx = new ExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 649;
				nameIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 670;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 668;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
					case 1:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 652;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 653;
						Match(Sp);
						State = 654;
						expressionOperatorBinary();
						State = 655;
						Match(Sp);
						State = 656;
						expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionInvocationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 658;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 660;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==AngleOpen) {
							{
							State = 659;
							typeArgumentList();
							}
						}

						State = 662;
						argumentList();
						}
						break;
					case 3:
						{
						_localctx = new ExpressionTypeInitializerContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 663;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 664;
						typeInitializer();
						}
						break;
					case 4:
						{
						_localctx = new ExpressionMemberAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 665;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 666;
						Match(Dot);
						State = 667;
						nameIdentifier();
						}
						break;
					}
					} 
				}
				State = 672;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLiteralContext expressionLiteral() {
			return GetRuleContext<ExpressionLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLiteralBoolContext expressionLiteralBool() {
			return GetRuleContext<ExpressionLiteralBoolContext>(0);
		}
		public ExpressionConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionConstantContext expressionConstant() {
		ExpressionConstantContext _localctx = new ExpressionConstantContext(Context, State);
		EnterRule(_localctx, 110, RULE_expressionConstant);
		try {
			State = 675;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
			case String:
				EnterOuterAlt(_localctx, 1);
				{
				State = 673;
				expressionLiteral();
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 2);
				{
				State = 674;
				expressionLiteralBool();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionRuleContext expressionRule() {
		ExpressionRuleContext _localctx = new ExpressionRuleContext(Context, State);
		EnterRule(_localctx, 112, RULE_expressionRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorArithmeticContext expressionOperatorArithmetic() {
			return GetRuleContext<ExpressionOperatorArithmeticContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorLogicContext expressionOperatorLogic() {
			return GetRuleContext<ExpressionOperatorLogicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorComparisonContext expressionOperatorComparison() {
			return GetRuleContext<ExpressionOperatorComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBitsContext expressionOperatorBits() {
			return GetRuleContext<ExpressionOperatorBitsContext>(0);
		}
		public ExpressionOperatorBinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBinary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBinaryContext expressionOperatorBinary() {
		ExpressionOperatorBinaryContext _localctx = new ExpressionOperatorBinaryContext(Context, State);
		EnterRule(_localctx, 114, RULE_expressionOperatorBinary);
		try {
			State = 683;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 679;
				expressionOperatorArithmetic();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 680;
				expressionOperatorLogic();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 681;
				expressionOperatorComparison();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 682;
				expressionOperatorBits();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorArithmeticUnaryPrefixContext expressionOperatorArithmeticUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorArithmeticUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorLogicUnaryPrefixContext expressionOperatorLogicUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorLogicUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBitsUnaryPrefixContext expressionOperatorBitsUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorBitsUnaryPrefixContext>(0);
		}
		public ExpressionOperatorUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorUnaryPrefixContext expressionOperatorUnaryPrefix() {
		ExpressionOperatorUnaryPrefixContext _localctx = new ExpressionOperatorUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 116, RULE_expressionOperatorUnaryPrefix);
		try {
			State = 688;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Minus:
				EnterOuterAlt(_localctx, 1);
				{
				State = 685;
				expressionOperatorArithmeticUnaryPrefix();
				}
				break;
			case Not:
				EnterOuterAlt(_localctx, 2);
				{
				State = 686;
				expressionOperatorLogicUnaryPrefix();
				}
				break;
			case BitNot:
				EnterOuterAlt(_localctx, 3);
				{
				State = 687;
				expressionOperatorBitsUnaryPrefix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorArithmeticContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MajaParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MajaParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MajaParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MajaParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(MajaParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MajaParser.Power, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Root() { return GetToken(MajaParser.Root, 0); }
		public ExpressionOperatorArithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorArithmetic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorArithmeticContext expressionOperatorArithmetic() {
		ExpressionOperatorArithmeticContext _localctx = new ExpressionOperatorArithmeticContext(Context, State);
		EnterRule(_localctx, 118, RULE_expressionOperatorArithmetic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17873661021126656L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorArithmeticUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MajaParser.Minus, 0); }
		public ExpressionOperatorArithmeticUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorArithmeticUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorArithmeticUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorArithmeticUnaryPrefixContext expressionOperatorArithmeticUnaryPrefix() {
		ExpressionOperatorArithmeticUnaryPrefixContext _localctx = new ExpressionOperatorArithmeticUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 120, RULE_expressionOperatorArithmeticUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			Match(Minus);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorLogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MajaParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MajaParser.Or, 0); }
		public ExpressionOperatorLogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorLogic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorLogicContext expressionOperatorLogic() {
		ExpressionOperatorLogicContext _localctx = new ExpressionOperatorLogicContext(Context, State);
		EnterRule(_localctx, 122, RULE_expressionOperatorLogic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Or) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorLogicUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MajaParser.Not, 0); }
		public ExpressionOperatorLogicUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorLogicUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorLogicUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorLogicUnaryPrefixContext expressionOperatorLogicUnaryPrefix() {
		ExpressionOperatorLogicUnaryPrefixContext _localctx = new ExpressionOperatorLogicUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 124, RULE_expressionOperatorLogicUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			Match(Not);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Neq() { return GetToken(MajaParser.Neq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GtEq() { return GetToken(MajaParser.GtEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LtEq() { return GetToken(MajaParser.LtEq, 0); }
		public ExpressionOperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorComparisonContext expressionOperatorComparison() {
		ExpressionOperatorComparisonContext _localctx = new ExpressionOperatorComparisonContext(Context, State);
		EnterRule(_localctx, 126, RULE_expressionOperatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 131947837784064L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MajaParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MajaParser.BitOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXor_Imm() { return GetToken(MajaParser.BitXor_Imm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitShiftL() { return GetToken(MajaParser.BitShiftL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AngleClose() { return GetTokens(MajaParser.AngleClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose(int i) {
			return GetToken(MajaParser.AngleClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitRollL() { return GetToken(MajaParser.BitRollL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitRollR() { return GetToken(MajaParser.BitRollR, 0); }
		public ExpressionOperatorBitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBitsContext expressionOperatorBits() {
		ExpressionOperatorBitsContext _localctx = new ExpressionOperatorBitsContext(Context, State);
		EnterRule(_localctx, 128, RULE_expressionOperatorBits);
		try {
			State = 711;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BitAnd:
				EnterOuterAlt(_localctx, 1);
				{
				State = 700;
				Match(BitAnd);
				}
				break;
			case BitOr:
				EnterOuterAlt(_localctx, 2);
				{
				State = 701;
				Match(BitOr);
				}
				break;
			case BitXor_Imm:
				EnterOuterAlt(_localctx, 3);
				{
				State = 702;
				Match(BitXor_Imm);
				}
				break;
			case BitShiftL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 703;
				Match(BitShiftL);
				}
				break;
			case AngleClose:
				EnterOuterAlt(_localctx, 5);
				{
				State = 705;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 704;
					Match(AngleClose);
					}
					break;
				}
				State = 707;
				Match(AngleClose);
				State = 708;
				Match(AngleClose);
				}
				break;
			case BitRollL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 709;
				Match(BitRollL);
				}
				break;
			case BitRollR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 710;
				Match(BitRollR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBitsUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MajaParser.BitNot, 0); }
		public ExpressionOperatorBitsUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBitsUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBitsUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBitsUnaryPrefixContext expressionOperatorBitsUnaryPrefix() {
		ExpressionOperatorBitsUnaryPrefixContext _localctx = new ExpressionOperatorBitsUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 130, RULE_expressionOperatorBitsUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			Match(BitNot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLiteralBoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MajaParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MajaParser.False, 0); }
		public ExpressionLiteralBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLiteralBool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteralBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLiteralBoolContext expressionLiteralBool() {
		ExpressionLiteralBoolContext _localctx = new ExpressionLiteralBoolContext(Context, State);
		EnterRule(_localctx, 132, RULE_expressionLiteralBool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExpressionLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLiteralContext expressionLiteral() {
		ExpressionLiteralContext _localctx = new ExpressionLiteralContext(Context, State);
		EnterRule(_localctx, 134, RULE_expressionLiteral);
		try {
			State = 719;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
				EnterOuterAlt(_localctx, 1);
				{
				State = 717;
				number();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 718;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MajaParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MajaParser.Dot, i);
		}
		public NameQualifiedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualified; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualified(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedContext nameQualified() {
		NameQualifiedContext _localctx = new NameQualifiedContext(Context, State);
		EnterRule(_localctx, 136, RULE_nameQualified);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			nameIdentifier();
			State = 726;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 722;
				Match(Dot);
				State = 723;
				nameIdentifier();
				}
				}
				State = 728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListCommaContext nameQualifiedListComma() {
			return GetRuleContext<NameQualifiedListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListIndentContext nameQualifiedListIndent() {
			return GetRuleContext<NameQualifiedListIndentContext>(0);
		}
		public NameQualifiedListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListContext nameQualifiedList() {
		NameQualifiedListContext _localctx = new NameQualifiedListContext(Context, State);
		EnterRule(_localctx, 138, RULE_nameQualifiedList);
		try {
			State = 731;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 729;
				nameQualifiedListComma();
				}
				break;
			case Indent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 730;
				nameQualifiedListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext[] nameQualified() {
			return GetRuleContexts<NameQualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified(int i) {
			return GetRuleContext<NameQualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		public NameQualifiedListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListCommaContext nameQualifiedListComma() {
		NameQualifiedListCommaContext _localctx = new NameQualifiedListCommaContext(Context, State);
		EnterRule(_localctx, 140, RULE_nameQualifiedListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			nameQualified();
			State = 735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 734;
				Match(Sp);
				}
				break;
			}
			State = 746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 737;
				Match(Comma);
				State = 739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 738;
					Match(Sp);
					}
					}
					State = 741;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				State = 743;
				nameQualified();
				}
				}
				State = 748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext[] nameQualified() {
			return GetRuleContexts<NameQualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified(int i) {
			return GetRuleContext<NameQualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NameQualifiedListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListIndentContext nameQualifiedListIndent() {
		NameQualifiedListIndentContext _localctx = new NameQualifiedListIndentContext(Context, State);
		EnterRule(_localctx, 142, RULE_nameQualifiedListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			Match(Indent);
			State = 753;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 750;
				nameQualified();
				State = 751;
				newline();
				}
				}
				State = 755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 757;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MajaParser.Identifier, 0); }
		public NameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierContext nameIdentifier() {
		NameIdentifierContext _localctx = new NameIdentifierContext(Context, State);
		EnterRule(_localctx, 144, RULE_nameIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListCommaContext nameQualifiedListComma() {
			return GetRuleContext<NameQualifiedListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListIndentContext nameQualifiedListIndent() {
			return GetRuleContext<NameQualifiedListIndentContext>(0);
		}
		public NameIdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListContext nameIdentifierList() {
		NameIdentifierListContext _localctx = new NameIdentifierListContext(Context, State);
		EnterRule(_localctx, 146, RULE_nameIdentifierList);
		try {
			State = 763;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 761;
				nameQualifiedListComma();
				}
				break;
			case Indent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 762;
				nameQualifiedListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		public NameIdentifierListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListCommaContext nameIdentifierListComma() {
		NameIdentifierListCommaContext _localctx = new NameIdentifierListCommaContext(Context, State);
		EnterRule(_localctx, 148, RULE_nameIdentifierListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			nameIdentifier();
			State = 767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 766;
				Match(Sp);
				}
			}

			State = 778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 769;
				Match(Comma);
				State = 771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 770;
					Match(Sp);
					}
					}
					State = 773;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				State = 775;
				nameIdentifier();
				}
				}
				State = 780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NameIdentifierListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListIndentContext nameIdentifierListIndent() {
		NameIdentifierListIndentContext _localctx = new NameIdentifierListIndentContext(Context, State);
		EnterRule(_localctx, 150, RULE_nameIdentifierListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			Match(Indent);
			State = 785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 782;
				nameIdentifier();
				State = 783;
				newline();
				}
				}
				State = 787;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 789;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(MajaParser.String, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 152, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberBin() { return GetToken(MajaParser.NumberBin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDec() { return GetToken(MajaParser.NumberDec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDecPrefix() { return GetToken(MajaParser.NumberDecPrefix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberHex() { return GetToken(MajaParser.NumberHex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberOct() { return GetToken(MajaParser.NumberOct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character() { return GetToken(MajaParser.Character, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 154, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 199229440L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(MajaParser.Comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eol() { return GetToken(MajaParser.Eol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 156, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sp) {
				{
				{
				State = 795;
				Match(Sp);
				}
				}
				State = 800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 801;
			Match(Comment);
			State = 802;
			Match(Eol);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(MajaParser.Comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Eol() { return GetTokens(MajaParser.Eol); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eol(int i) {
			return GetToken(MajaParser.Eol, i);
		}
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 158, RULE_newline);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sp) {
				{
				{
				State = 804;
				Match(Sp);
				}
				}
				State = 809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 811;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comment) {
				{
				State = 810;
				Match(Comment);
				}
			}

			State = 814;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 813;
					Match(Eol);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 816;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeSpaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public FreeSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeSpace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreeSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeSpaceContext freeSpace() {
		FreeSpaceContext _localctx = new FreeSpaceContext(Context, State);
		EnterRule(_localctx, 160, RULE_freeSpace);
		int _la;
		try {
			State = 824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 818;
					Match(Sp);
					}
					}
					State = 821;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 823;
				newline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 54: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,71,827,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,1,0,3,0,164,8,0,1,0,1,0,1,0,5,0,169,8,0,
		10,0,12,0,172,9,0,1,0,1,0,1,0,5,0,177,8,0,10,0,12,0,180,9,0,1,1,1,1,1,
		1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,4,4,197,8,4,11,4,12,
		4,198,1,5,1,5,3,5,203,8,5,1,6,1,6,3,6,207,8,6,1,6,1,6,3,6,211,8,6,1,7,
		1,7,1,7,3,7,216,8,7,1,8,1,8,3,8,220,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,3,9,231,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
		11,3,11,244,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,254,8,11,
		1,12,1,12,1,12,3,12,259,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
		15,1,15,3,15,271,8,15,1,15,1,15,1,15,3,15,276,8,15,1,15,1,15,3,15,280,
		8,15,1,15,1,15,1,15,3,15,285,8,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
		16,1,16,1,17,1,17,1,17,1,17,1,17,3,17,301,8,17,1,17,1,17,1,18,1,18,1,18,
		1,18,5,18,309,8,18,10,18,12,18,312,9,18,1,19,1,19,5,19,316,8,19,10,19,
		12,19,319,9,19,1,19,1,19,1,19,4,19,324,8,19,11,19,12,19,325,1,19,1,19,
		1,20,1,20,3,20,332,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,341,8,
		20,1,21,1,21,3,21,345,8,21,1,21,1,21,3,21,349,8,21,1,21,1,21,1,22,1,22,
		1,22,1,22,5,22,357,8,22,10,22,12,22,360,9,22,1,23,1,23,1,23,1,23,4,23,
		366,8,23,11,23,12,23,367,1,23,1,23,1,24,1,24,1,24,1,24,1,24,3,24,377,8,
		24,1,24,1,24,1,25,1,25,3,25,383,8,25,1,25,3,25,386,8,25,1,25,1,25,1,25,
		3,25,391,8,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,4,26,402,8,
		26,11,26,12,26,403,1,27,1,27,1,27,4,27,409,8,27,11,27,12,27,410,1,27,1,
		27,1,27,1,27,1,27,5,27,418,8,27,10,27,12,27,421,9,27,4,27,423,8,27,11,
		27,12,27,424,1,27,1,27,3,27,429,8,27,1,28,1,28,1,28,4,28,434,8,28,11,28,
		12,28,435,1,29,1,29,1,29,4,29,441,8,29,11,29,12,29,442,1,30,1,30,3,30,
		447,8,30,1,31,1,31,1,31,1,31,1,31,3,31,454,8,31,1,31,1,31,1,32,1,32,1,
		32,1,32,5,32,462,8,32,10,32,12,32,465,9,32,1,33,1,33,5,33,469,8,33,10,
		33,12,33,472,9,33,1,33,1,33,1,33,4,33,477,8,33,11,33,12,33,478,1,33,1,
		33,1,34,1,34,1,34,3,34,486,8,34,1,35,1,35,1,35,1,35,1,35,3,35,493,8,35,
		1,36,1,36,1,36,1,36,1,36,1,36,3,36,501,8,36,1,37,1,37,3,37,505,8,37,1,
		37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,514,8,37,1,38,1,38,1,38,1,38,1,38,
		3,38,521,8,38,1,38,1,38,1,39,1,39,1,39,1,39,5,39,529,8,39,10,39,12,39,
		532,9,39,1,40,1,40,1,40,1,40,4,40,538,8,40,11,40,12,40,539,1,40,1,40,1,
		41,1,41,3,41,546,8,41,1,42,1,42,1,42,1,42,3,42,552,8,42,1,43,1,43,1,43,
		1,43,1,43,5,43,559,8,43,10,43,12,43,562,9,43,1,43,1,43,1,44,1,44,1,44,
		1,44,4,44,570,8,44,11,44,12,44,571,1,44,1,44,1,45,1,45,1,45,1,45,1,45,
		1,45,1,46,1,46,1,46,1,46,1,46,3,46,587,8,46,1,47,1,47,1,48,1,48,3,48,593,
		8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,602,8,48,1,49,1,49,1,49,1,
		50,1,50,3,50,609,8,50,1,51,1,51,3,51,613,8,51,1,51,1,51,1,51,1,51,3,51,
		619,8,51,1,51,1,51,1,51,3,51,624,8,51,1,52,1,52,3,52,628,8,52,1,52,1,52,
		1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,
		1,54,1,54,1,54,1,54,1,54,3,54,651,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
		54,1,54,3,54,661,8,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,669,8,54,10,54,
		12,54,672,9,54,1,55,1,55,3,55,676,8,55,1,56,1,56,1,57,1,57,1,57,1,57,3,
		57,684,8,57,1,58,1,58,1,58,3,58,689,8,58,1,59,1,59,1,60,1,60,1,61,1,61,
		1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,3,64,706,8,64,1,64,1,64,1,
		64,1,64,3,64,712,8,64,1,65,1,65,1,66,1,66,1,67,1,67,3,67,720,8,67,1,68,
		1,68,1,68,5,68,725,8,68,10,68,12,68,728,9,68,1,69,1,69,3,69,732,8,69,1,
		70,1,70,3,70,736,8,70,1,70,1,70,4,70,740,8,70,11,70,12,70,741,1,70,5,70,
		745,8,70,10,70,12,70,748,9,70,1,71,1,71,1,71,1,71,4,71,754,8,71,11,71,
		12,71,755,1,71,1,71,1,72,1,72,1,73,1,73,3,73,764,8,73,1,74,1,74,3,74,768,
		8,74,1,74,1,74,4,74,772,8,74,11,74,12,74,773,1,74,5,74,777,8,74,10,74,
		12,74,780,9,74,1,75,1,75,1,75,1,75,4,75,786,8,75,11,75,12,75,787,1,75,
		1,75,1,76,1,76,1,77,1,77,1,78,5,78,797,8,78,10,78,12,78,800,9,78,1,78,
		1,78,1,78,1,79,5,79,806,8,79,10,79,12,79,809,9,79,1,79,3,79,812,8,79,1,
		79,4,79,815,8,79,11,79,12,79,816,1,80,4,80,820,8,80,11,80,12,80,821,1,
		80,3,80,825,8,80,1,80,0,1,108,81,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
		76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
		118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
		154,156,158,160,0,5,1,0,47,53,1,0,19,20,2,0,31,32,43,46,1,0,15,16,2,0,
		21,25,27,27,862,0,163,1,0,0,0,2,181,1,0,0,0,4,185,1,0,0,0,6,189,1,0,0,
		0,8,196,1,0,0,0,10,202,1,0,0,0,12,206,1,0,0,0,14,215,1,0,0,0,16,219,1,
		0,0,0,18,221,1,0,0,0,20,232,1,0,0,0,22,243,1,0,0,0,24,255,1,0,0,0,26,260,
		1,0,0,0,28,266,1,0,0,0,30,268,1,0,0,0,32,291,1,0,0,0,34,295,1,0,0,0,36,
		304,1,0,0,0,38,313,1,0,0,0,40,329,1,0,0,0,42,342,1,0,0,0,44,352,1,0,0,
		0,46,361,1,0,0,0,48,376,1,0,0,0,50,380,1,0,0,0,52,401,1,0,0,0,54,428,1,
		0,0,0,56,433,1,0,0,0,58,440,1,0,0,0,60,444,1,0,0,0,62,448,1,0,0,0,64,457,
		1,0,0,0,66,466,1,0,0,0,68,485,1,0,0,0,70,487,1,0,0,0,72,494,1,0,0,0,74,
		502,1,0,0,0,76,515,1,0,0,0,78,524,1,0,0,0,80,533,1,0,0,0,82,545,1,0,0,
		0,84,551,1,0,0,0,86,553,1,0,0,0,88,565,1,0,0,0,90,575,1,0,0,0,92,581,1,
		0,0,0,94,588,1,0,0,0,96,590,1,0,0,0,98,603,1,0,0,0,100,608,1,0,0,0,102,
		610,1,0,0,0,104,625,1,0,0,0,106,634,1,0,0,0,108,650,1,0,0,0,110,675,1,
		0,0,0,112,677,1,0,0,0,114,683,1,0,0,0,116,688,1,0,0,0,118,690,1,0,0,0,
		120,692,1,0,0,0,122,694,1,0,0,0,124,696,1,0,0,0,126,698,1,0,0,0,128,711,
		1,0,0,0,130,713,1,0,0,0,132,715,1,0,0,0,134,719,1,0,0,0,136,721,1,0,0,
		0,138,731,1,0,0,0,140,733,1,0,0,0,142,749,1,0,0,0,144,759,1,0,0,0,146,
		763,1,0,0,0,148,765,1,0,0,0,150,781,1,0,0,0,152,791,1,0,0,0,154,793,1,
		0,0,0,156,798,1,0,0,0,158,807,1,0,0,0,160,824,1,0,0,0,162,164,3,2,1,0,
		163,162,1,0,0,0,163,164,1,0,0,0,164,170,1,0,0,0,165,169,3,6,3,0,166,169,
		3,4,2,0,167,169,3,158,79,0,168,165,1,0,0,0,168,166,1,0,0,0,168,167,1,0,
		0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,178,1,0,0,0,172,
		170,1,0,0,0,173,177,3,10,5,0,174,177,3,14,7,0,175,177,3,158,79,0,176,173,
		1,0,0,0,176,174,1,0,0,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,
		0,178,179,1,0,0,0,179,1,1,0,0,0,180,178,1,0,0,0,181,182,5,4,0,0,182,183,
		3,160,80,0,183,184,3,136,68,0,184,3,1,0,0,0,185,186,5,5,0,0,186,187,3,
		160,80,0,187,188,3,138,69,0,188,5,1,0,0,0,189,190,5,6,0,0,190,191,3,160,
		80,0,191,192,3,138,69,0,192,7,1,0,0,0,193,197,3,14,7,0,194,197,3,10,5,
		0,195,197,3,158,79,0,196,193,1,0,0,0,196,194,1,0,0,0,196,195,1,0,0,0,197,
		198,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,9,1,0,0,0,200,203,3,12,
		6,0,201,203,3,100,50,0,202,200,1,0,0,0,202,201,1,0,0,0,203,11,1,0,0,0,
		204,205,5,5,0,0,205,207,5,70,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,210,
		1,0,0,0,208,211,3,30,15,0,209,211,3,50,25,0,210,208,1,0,0,0,210,209,1,
		0,0,0,211,13,1,0,0,0,212,216,3,16,8,0,213,216,3,26,13,0,214,216,3,28,14,
		0,215,212,1,0,0,0,215,213,1,0,0,0,215,214,1,0,0,0,216,15,1,0,0,0,217,220,
		3,24,12,0,218,220,3,18,9,0,219,217,1,0,0,0,219,218,1,0,0,0,220,17,1,0,
		0,0,221,222,5,12,0,0,222,223,5,70,0,0,223,224,3,108,54,0,224,225,3,158,
		79,0,225,226,5,1,0,0,226,227,3,8,4,0,227,230,5,2,0,0,228,231,3,20,10,0,
		229,231,3,22,11,0,230,228,1,0,0,0,230,229,1,0,0,0,230,231,1,0,0,0,231,
		19,1,0,0,0,232,233,5,13,0,0,233,234,3,158,79,0,234,235,5,1,0,0,235,236,
		3,8,4,0,236,237,5,2,0,0,237,21,1,0,0,0,238,239,5,13,0,0,239,240,3,160,
		80,0,240,241,5,12,0,0,241,244,1,0,0,0,242,244,5,14,0,0,243,238,1,0,0,0,
		243,242,1,0,0,0,244,245,1,0,0,0,245,246,5,70,0,0,246,247,3,108,54,0,247,
		248,3,158,79,0,248,249,5,1,0,0,249,250,3,8,4,0,250,253,5,2,0,0,251,254,
		3,20,10,0,252,254,3,22,11,0,253,251,1,0,0,0,253,252,1,0,0,0,253,254,1,
		0,0,0,254,23,1,0,0,0,255,258,5,8,0,0,256,257,5,70,0,0,257,259,3,108,54,
		0,258,256,1,0,0,0,258,259,1,0,0,0,259,25,1,0,0,0,260,261,3,144,72,0,261,
		262,5,70,0,0,262,263,5,43,0,0,263,264,5,70,0,0,264,265,3,108,54,0,265,
		27,1,0,0,0,266,267,3,108,54,0,267,29,1,0,0,0,268,270,3,144,72,0,269,271,
		5,70,0,0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,5,38,
		0,0,273,275,3,160,80,0,274,276,3,62,31,0,275,274,1,0,0,0,275,276,1,0,0,
		0,276,277,1,0,0,0,277,284,3,34,17,0,278,280,5,70,0,0,279,278,1,0,0,0,279,
		280,1,0,0,0,280,281,1,0,0,0,281,282,5,38,0,0,282,283,5,70,0,0,283,285,
		3,60,30,0,284,279,1,0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,287,3,158,
		79,0,287,288,5,1,0,0,288,289,3,8,4,0,289,290,5,2,0,0,290,31,1,0,0,0,291,
		292,5,1,0,0,292,293,3,30,15,0,293,294,5,2,0,0,294,33,1,0,0,0,295,300,5,
		29,0,0,296,301,3,36,18,0,297,298,3,158,79,0,298,299,3,38,19,0,299,301,
		1,0,0,0,300,296,1,0,0,0,300,297,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,
		0,302,303,5,30,0,0,303,35,1,0,0,0,304,310,3,40,20,0,305,306,5,69,0,0,306,
		307,5,70,0,0,307,309,3,40,20,0,308,305,1,0,0,0,309,312,1,0,0,0,310,308,
		1,0,0,0,310,311,1,0,0,0,311,37,1,0,0,0,312,310,1,0,0,0,313,323,5,1,0,0,
		314,316,3,156,78,0,315,314,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,
		318,1,0,0,0,318,320,1,0,0,0,319,317,1,0,0,0,320,321,3,40,20,0,321,322,
		3,158,79,0,322,324,1,0,0,0,323,317,1,0,0,0,324,325,1,0,0,0,325,323,1,0,
		0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,328,5,2,0,0,328,39,1,0,0,0,329,
		331,3,144,72,0,330,332,5,70,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,
		1,0,0,0,333,334,5,38,0,0,334,335,5,70,0,0,335,340,3,60,30,0,336,337,5,
		70,0,0,337,338,5,43,0,0,338,339,5,70,0,0,339,341,3,108,54,0,340,336,1,
		0,0,0,340,341,1,0,0,0,341,41,1,0,0,0,342,344,5,29,0,0,343,345,3,158,79,
		0,344,343,1,0,0,0,344,345,1,0,0,0,345,348,1,0,0,0,346,349,3,44,22,0,347,
		349,3,46,23,0,348,346,1,0,0,0,348,347,1,0,0,0,348,349,1,0,0,0,349,350,
		1,0,0,0,350,351,5,30,0,0,351,43,1,0,0,0,352,358,3,48,24,0,353,354,5,69,
		0,0,354,355,5,70,0,0,355,357,3,48,24,0,356,353,1,0,0,0,357,360,1,0,0,0,
		358,356,1,0,0,0,358,359,1,0,0,0,359,45,1,0,0,0,360,358,1,0,0,0,361,365,
		5,1,0,0,362,363,3,48,24,0,363,364,3,158,79,0,364,366,1,0,0,0,365,362,1,
		0,0,0,366,367,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,
		369,370,5,2,0,0,370,47,1,0,0,0,371,372,3,144,72,0,372,373,5,70,0,0,373,
		374,5,43,0,0,374,375,5,70,0,0,375,377,1,0,0,0,376,371,1,0,0,0,376,377,
		1,0,0,0,377,378,1,0,0,0,378,379,3,108,54,0,379,49,1,0,0,0,380,382,3,144,
		72,0,381,383,3,62,31,0,382,381,1,0,0,0,382,383,1,0,0,0,383,390,1,0,0,0,
		384,386,5,70,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,388,
		5,38,0,0,388,389,5,70,0,0,389,391,3,60,30,0,390,385,1,0,0,0,390,391,1,
		0,0,0,391,392,1,0,0,0,392,393,3,158,79,0,393,394,5,1,0,0,394,395,3,52,
		26,0,395,396,5,2,0,0,396,51,1,0,0,0,397,402,3,54,27,0,398,402,3,56,28,
		0,399,402,3,58,29,0,400,402,3,158,79,0,401,397,1,0,0,0,401,398,1,0,0,0,
		401,399,1,0,0,0,401,400,1,0,0,0,402,403,1,0,0,0,403,401,1,0,0,0,403,404,
		1,0,0,0,404,53,1,0,0,0,405,406,3,92,46,0,406,407,3,158,79,0,407,409,1,
		0,0,0,408,405,1,0,0,0,409,410,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,
		411,429,1,0,0,0,412,419,3,94,47,0,413,414,5,69,0,0,414,415,3,160,80,0,
		415,416,3,94,47,0,416,418,1,0,0,0,417,413,1,0,0,0,418,421,1,0,0,0,419,
		417,1,0,0,0,419,420,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,422,412,1,
		0,0,0,423,424,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,
		426,427,3,158,79,0,427,429,1,0,0,0,428,408,1,0,0,0,428,422,1,0,0,0,429,
		55,1,0,0,0,430,431,3,96,48,0,431,432,3,158,79,0,432,434,1,0,0,0,433,430,
		1,0,0,0,434,435,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,57,1,0,0,0,
		437,438,3,98,49,0,438,439,3,158,79,0,439,441,1,0,0,0,440,437,1,0,0,0,441,
		442,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,59,1,0,0,0,444,446,3,144,
		72,0,445,447,3,76,38,0,446,445,1,0,0,0,446,447,1,0,0,0,447,61,1,0,0,0,
		448,453,5,31,0,0,449,454,3,64,32,0,450,451,3,158,79,0,451,452,3,66,33,
		0,452,454,1,0,0,0,453,449,1,0,0,0,453,450,1,0,0,0,454,455,1,0,0,0,455,
		456,5,32,0,0,456,63,1,0,0,0,457,463,3,68,34,0,458,459,5,69,0,0,459,460,
		5,70,0,0,460,462,3,68,34,0,461,458,1,0,0,0,462,465,1,0,0,0,463,461,1,0,
		0,0,463,464,1,0,0,0,464,65,1,0,0,0,465,463,1,0,0,0,466,476,5,1,0,0,467,
		469,3,156,78,0,468,467,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,
		1,0,0,0,471,473,1,0,0,0,472,470,1,0,0,0,473,474,3,68,34,0,474,475,3,158,
		79,0,475,477,1,0,0,0,476,470,1,0,0,0,477,478,1,0,0,0,478,476,1,0,0,0,478,
		479,1,0,0,0,479,480,1,0,0,0,480,481,5,2,0,0,481,67,1,0,0,0,482,486,3,70,
		35,0,483,486,3,72,36,0,484,486,3,74,37,0,485,482,1,0,0,0,485,483,1,0,0,
		0,485,484,1,0,0,0,486,69,1,0,0,0,487,492,3,60,30,0,488,489,5,70,0,0,489,
		490,5,43,0,0,490,491,5,70,0,0,491,493,3,60,30,0,492,488,1,0,0,0,492,493,
		1,0,0,0,493,71,1,0,0,0,494,495,5,37,0,0,495,500,3,60,30,0,496,497,5,70,
		0,0,497,498,5,43,0,0,498,499,5,70,0,0,499,501,3,60,30,0,500,496,1,0,0,
		0,500,501,1,0,0,0,501,73,1,0,0,0,502,504,3,144,72,0,503,505,5,70,0,0,504,
		503,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,507,5,38,0,0,507,508,5,
		70,0,0,508,513,3,60,30,0,509,510,5,70,0,0,510,511,5,43,0,0,511,512,5,70,
		0,0,512,514,3,108,54,0,513,509,1,0,0,0,513,514,1,0,0,0,514,75,1,0,0,0,
		515,520,5,31,0,0,516,521,3,78,39,0,517,518,3,158,79,0,518,519,3,80,40,
		0,519,521,1,0,0,0,520,516,1,0,0,0,520,517,1,0,0,0,521,522,1,0,0,0,522,
		523,5,32,0,0,523,77,1,0,0,0,524,530,3,82,41,0,525,526,5,69,0,0,526,527,
		5,70,0,0,527,529,3,82,41,0,528,525,1,0,0,0,529,532,1,0,0,0,530,528,1,0,
		0,0,530,531,1,0,0,0,531,79,1,0,0,0,532,530,1,0,0,0,533,537,5,1,0,0,534,
		535,3,82,41,0,535,536,3,158,79,0,536,538,1,0,0,0,537,534,1,0,0,0,538,539,
		1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,5,2,0,
		0,542,81,1,0,0,0,543,546,3,60,30,0,544,546,3,108,54,0,545,543,1,0,0,0,
		545,544,1,0,0,0,546,83,1,0,0,0,547,552,3,86,43,0,548,549,3,158,79,0,549,
		550,3,88,44,0,550,552,1,0,0,0,551,547,1,0,0,0,551,548,1,0,0,0,552,85,1,
		0,0,0,553,554,5,35,0,0,554,560,3,90,45,0,555,556,5,69,0,0,556,557,5,70,
		0,0,557,559,3,90,45,0,558,555,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,
		560,561,1,0,0,0,561,563,1,0,0,0,562,560,1,0,0,0,563,564,5,36,0,0,564,87,
		1,0,0,0,565,569,5,1,0,0,566,567,3,90,45,0,567,568,3,158,79,0,568,570,1,
		0,0,0,569,566,1,0,0,0,570,571,1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,
		572,573,1,0,0,0,573,574,5,2,0,0,574,89,1,0,0,0,575,576,3,144,72,0,576,
		577,5,70,0,0,577,578,5,43,0,0,578,579,5,70,0,0,579,580,3,108,54,0,580,
		91,1,0,0,0,581,586,3,144,72,0,582,583,5,70,0,0,583,584,5,43,0,0,584,585,
		5,70,0,0,585,587,3,110,55,0,586,582,1,0,0,0,586,587,1,0,0,0,587,93,1,0,
		0,0,588,589,3,144,72,0,589,95,1,0,0,0,590,592,3,144,72,0,591,593,5,70,
		0,0,592,591,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,595,5,38,0,0,595,
		596,5,70,0,0,596,601,3,60,30,0,597,598,5,70,0,0,598,599,5,43,0,0,599,600,
		5,70,0,0,600,602,3,108,54,0,601,597,1,0,0,0,601,602,1,0,0,0,602,97,1,0,
		0,0,603,604,5,37,0,0,604,605,3,112,56,0,605,99,1,0,0,0,606,609,3,102,51,
		0,607,609,3,104,52,0,608,606,1,0,0,0,608,607,1,0,0,0,609,101,1,0,0,0,610,
		612,3,144,72,0,611,613,5,70,0,0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,
		1,0,0,0,614,615,5,38,0,0,615,616,5,70,0,0,616,623,3,60,30,0,617,619,5,
		70,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,621,5,43,0,
		0,621,622,5,70,0,0,622,624,3,108,54,0,623,618,1,0,0,0,623,624,1,0,0,0,
		624,103,1,0,0,0,625,627,3,144,72,0,626,628,5,70,0,0,627,626,1,0,0,0,627,
		628,1,0,0,0,628,629,1,0,0,0,629,630,5,38,0,0,630,631,5,43,0,0,631,632,
		5,70,0,0,632,633,3,108,54,0,633,105,1,0,0,0,634,635,3,144,72,0,635,636,
		5,70,0,0,636,637,5,43,0,0,637,638,5,70,0,0,638,639,3,108,54,0,639,107,
		1,0,0,0,640,641,6,54,-1,0,641,651,3,110,55,0,642,643,3,116,58,0,643,644,
		3,108,54,6,644,651,1,0,0,0,645,646,5,29,0,0,646,647,3,108,54,0,647,648,
		5,30,0,0,648,651,1,0,0,0,649,651,3,144,72,0,650,640,1,0,0,0,650,642,1,
		0,0,0,650,645,1,0,0,0,650,649,1,0,0,0,651,670,1,0,0,0,652,653,10,7,0,0,
		653,654,5,70,0,0,654,655,3,114,57,0,655,656,5,70,0,0,656,657,3,108,54,
		8,657,669,1,0,0,0,658,660,10,5,0,0,659,661,3,76,38,0,660,659,1,0,0,0,660,
		661,1,0,0,0,661,662,1,0,0,0,662,669,3,42,21,0,663,664,10,4,0,0,664,669,
		3,84,42,0,665,666,10,1,0,0,666,667,5,40,0,0,667,669,3,144,72,0,668,652,
		1,0,0,0,668,658,1,0,0,0,668,663,1,0,0,0,668,665,1,0,0,0,669,672,1,0,0,
		0,670,668,1,0,0,0,670,671,1,0,0,0,671,109,1,0,0,0,672,670,1,0,0,0,673,
		676,3,134,67,0,674,676,3,132,66,0,675,673,1,0,0,0,675,674,1,0,0,0,676,
		111,1,0,0,0,677,678,3,108,54,0,678,113,1,0,0,0,679,684,3,118,59,0,680,
		684,3,122,61,0,681,684,3,126,63,0,682,684,3,128,64,0,683,679,1,0,0,0,683,
		680,1,0,0,0,683,681,1,0,0,0,683,682,1,0,0,0,684,115,1,0,0,0,685,689,3,
		120,60,0,686,689,3,124,62,0,687,689,3,130,65,0,688,685,1,0,0,0,688,686,
		1,0,0,0,688,687,1,0,0,0,689,117,1,0,0,0,690,691,7,0,0,0,691,119,1,0,0,
		0,692,693,5,48,0,0,693,121,1,0,0,0,694,695,7,1,0,0,695,123,1,0,0,0,696,
		697,5,18,0,0,697,125,1,0,0,0,698,699,7,2,0,0,699,127,1,0,0,0,700,712,5,
		54,0,0,701,712,5,55,0,0,702,712,5,57,0,0,703,712,5,58,0,0,704,706,5,32,
		0,0,705,704,1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,708,5,32,0,0,708,
		712,5,32,0,0,709,712,5,59,0,0,710,712,5,60,0,0,711,700,1,0,0,0,711,701,
		1,0,0,0,711,702,1,0,0,0,711,703,1,0,0,0,711,705,1,0,0,0,711,709,1,0,0,
		0,711,710,1,0,0,0,712,129,1,0,0,0,713,714,5,56,0,0,714,131,1,0,0,0,715,
		716,7,3,0,0,716,133,1,0,0,0,717,720,3,154,77,0,718,720,3,152,76,0,719,
		717,1,0,0,0,719,718,1,0,0,0,720,135,1,0,0,0,721,726,3,144,72,0,722,723,
		5,40,0,0,723,725,3,144,72,0,724,722,1,0,0,0,725,728,1,0,0,0,726,724,1,
		0,0,0,726,727,1,0,0,0,727,137,1,0,0,0,728,726,1,0,0,0,729,732,3,140,70,
		0,730,732,3,142,71,0,731,729,1,0,0,0,731,730,1,0,0,0,732,139,1,0,0,0,733,
		735,3,136,68,0,734,736,5,70,0,0,735,734,1,0,0,0,735,736,1,0,0,0,736,746,
		1,0,0,0,737,739,5,69,0,0,738,740,5,70,0,0,739,738,1,0,0,0,740,741,1,0,
		0,0,741,739,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,745,3,136,68,0,
		744,737,1,0,0,0,745,748,1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,141,
		1,0,0,0,748,746,1,0,0,0,749,753,5,1,0,0,750,751,3,136,68,0,751,752,3,158,
		79,0,752,754,1,0,0,0,753,750,1,0,0,0,754,755,1,0,0,0,755,753,1,0,0,0,755,
		756,1,0,0,0,756,757,1,0,0,0,757,758,5,2,0,0,758,143,1,0,0,0,759,760,5,
		26,0,0,760,145,1,0,0,0,761,764,3,140,70,0,762,764,3,142,71,0,763,761,1,
		0,0,0,763,762,1,0,0,0,764,147,1,0,0,0,765,767,3,144,72,0,766,768,5,70,
		0,0,767,766,1,0,0,0,767,768,1,0,0,0,768,778,1,0,0,0,769,771,5,69,0,0,770,
		772,5,70,0,0,771,770,1,0,0,0,772,773,1,0,0,0,773,771,1,0,0,0,773,774,1,
		0,0,0,774,775,1,0,0,0,775,777,3,144,72,0,776,769,1,0,0,0,777,780,1,0,0,
		0,778,776,1,0,0,0,778,779,1,0,0,0,779,149,1,0,0,0,780,778,1,0,0,0,781,
		785,5,1,0,0,782,783,3,144,72,0,783,784,3,158,79,0,784,786,1,0,0,0,785,
		782,1,0,0,0,786,787,1,0,0,0,787,785,1,0,0,0,787,788,1,0,0,0,788,789,1,
		0,0,0,789,790,5,2,0,0,790,151,1,0,0,0,791,792,5,28,0,0,792,153,1,0,0,0,
		793,794,7,4,0,0,794,155,1,0,0,0,795,797,5,70,0,0,796,795,1,0,0,0,797,800,
		1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,801,1,0,0,0,800,798,1,0,0,
		0,801,802,5,3,0,0,802,803,5,71,0,0,803,157,1,0,0,0,804,806,5,70,0,0,805,
		804,1,0,0,0,806,809,1,0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,811,1,
		0,0,0,809,807,1,0,0,0,810,812,5,3,0,0,811,810,1,0,0,0,811,812,1,0,0,0,
		812,814,1,0,0,0,813,815,5,71,0,0,814,813,1,0,0,0,815,816,1,0,0,0,816,814,
		1,0,0,0,816,817,1,0,0,0,817,159,1,0,0,0,818,820,5,70,0,0,819,818,1,0,0,
		0,820,821,1,0,0,0,821,819,1,0,0,0,821,822,1,0,0,0,822,825,1,0,0,0,823,
		825,3,158,79,0,824,819,1,0,0,0,824,823,1,0,0,0,825,161,1,0,0,0,94,163,
		168,170,176,178,196,198,202,206,210,215,219,230,243,253,258,270,275,279,
		284,300,310,317,325,331,340,344,348,358,367,376,382,385,390,401,403,410,
		419,424,428,435,442,446,453,463,470,478,485,492,500,504,513,520,530,539,
		545,551,560,571,586,592,601,608,612,618,623,627,650,660,668,670,675,683,
		688,705,711,719,726,731,735,741,746,755,763,767,773,778,787,798,807,811,
		816,821,824
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Maja.Compiler.Parser
