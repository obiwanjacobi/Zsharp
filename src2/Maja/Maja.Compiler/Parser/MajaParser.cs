//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Maja.Compiler/MajaParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Maja.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MajaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Indent=1, Dedent=2, Comment=3, Mod=4, Pub=5, Use=6, Self=7, Ret=8, Brk=9, 
		Cnt=10, Loop=11, If=12, Else=13, Elif=14, True=15, False=16, In=17, Not=18, 
		And=19, Or=20, NumberBin=21, NumberOct=22, NumberDec=23, NumberDecPrefix=24, 
		NumberHex=25, Identifier=26, Character=27, String=28, ParenOpen=29, ParenClose=30, 
		AngleOpen=31, AngleClose=32, BracketOpen=33, BracketClose=34, CurlyOpen=35, 
		CurlyClose=36, Hash=37, Colon=38, SemiColon=39, Dot=40, Range=41, Spread=42, 
		Eq=43, Neq=44, GtEq=45, LtEq=46, Plus=47, Minus=48, Multiply=49, Power=50, 
		Divide=51, Root=52, Modulo=53, BitAnd=54, BitOr=55, BitNot=56, BitXor_Imm=57, 
		BitShiftL=58, BitRollL=59, BitRollR=60, Question=61, Dollar=62, At=63, 
		Error=64, StrQuote=65, CharQuote=66, BackTick=67, Discard=68, Comma=69, 
		Sp=70, Eol=71;
	public const int
		RULE_compilationUnit = 0, RULE_directiveMod = 1, RULE_directivePub = 2, 
		RULE_directiveUse = 3, RULE_codeBlock = 4, RULE_declarationMembers = 5, 
		RULE_statement = 6, RULE_statementFlow = 7, RULE_statementIf = 8, RULE_statementElse = 9, 
		RULE_statementElseIf = 10, RULE_statementRet = 11, RULE_statementAssignment = 12, 
		RULE_statementExpression = 13, RULE_declarationFunction = 14, RULE_declarationFunctionLocal = 15, 
		RULE_parameterList = 16, RULE_parameterListComma = 17, RULE_parameterListIndent = 18, 
		RULE_parameter = 19, RULE_argumentList = 20, RULE_argumentListComma = 21, 
		RULE_argumentListIndent = 22, RULE_argument = 23, RULE_declarationType = 24, 
		RULE_declarationTypeMemberList = 25, RULE_declarationTypeMemberListEnum = 26, 
		RULE_declarationTypeMemberListField = 27, RULE_declarationTypeMemberListRule = 28, 
		RULE_type = 29, RULE_typeParameterList = 30, RULE_typeParameterListComma = 31, 
		RULE_typeParameterListIndent = 32, RULE_typeParameter = 33, RULE_typeParameterGeneric = 34, 
		RULE_typeParameterTemplate = 35, RULE_typeParameterValue = 36, RULE_typeArgumentList = 37, 
		RULE_typeArgumentListComma = 38, RULE_typeArgumentListIndent = 39, RULE_typeArgument = 40, 
		RULE_typeInitializer = 41, RULE_typeInitializerComma = 42, RULE_typeInitializerIndent = 43, 
		RULE_typeInitializerField = 44, RULE_memberEnumValue = 45, RULE_memberEnum = 46, 
		RULE_memberField = 47, RULE_memberRule = 48, RULE_declarationVariable = 49, 
		RULE_declarationVariableTyped = 50, RULE_declarationVariableInferred = 51, 
		RULE_variableAssignment = 52, RULE_expression = 53, RULE_expressionConstant = 54, 
		RULE_expressionRule = 55, RULE_expressionOperatorBinary = 56, RULE_expressionOperatorUnaryPrefix = 57, 
		RULE_expressionOperatorArithmetic = 58, RULE_expressionOperatorArithmeticUnaryPrefix = 59, 
		RULE_expressionOperatorLogic = 60, RULE_expressionOperatorLogicUnaryPrefix = 61, 
		RULE_expressionOperatorComparison = 62, RULE_expressionOperatorBits = 63, 
		RULE_expressionOperatorBitsUnaryPrefix = 64, RULE_expressionLiteralBool = 65, 
		RULE_expressionLiteral = 66, RULE_nameQualified = 67, RULE_nameQualifiedList = 68, 
		RULE_nameQualifiedListComma = 69, RULE_nameQualifiedListIndent = 70, RULE_nameIdentifier = 71, 
		RULE_nameIdentifierList = 72, RULE_nameIdentifierListComma = 73, RULE_nameIdentifierListIndent = 74, 
		RULE_string = 75, RULE_number = 76, RULE_comment = 77, RULE_newline = 78, 
		RULE_freeSpace = 79;
	public static readonly string[] ruleNames = {
		"compilationUnit", "directiveMod", "directivePub", "directiveUse", "codeBlock", 
		"declarationMembers", "statement", "statementFlow", "statementIf", "statementElse", 
		"statementElseIf", "statementRet", "statementAssignment", "statementExpression", 
		"declarationFunction", "declarationFunctionLocal", "parameterList", "parameterListComma", 
		"parameterListIndent", "parameter", "argumentList", "argumentListComma", 
		"argumentListIndent", "argument", "declarationType", "declarationTypeMemberList", 
		"declarationTypeMemberListEnum", "declarationTypeMemberListField", "declarationTypeMemberListRule", 
		"type", "typeParameterList", "typeParameterListComma", "typeParameterListIndent", 
		"typeParameter", "typeParameterGeneric", "typeParameterTemplate", "typeParameterValue", 
		"typeArgumentList", "typeArgumentListComma", "typeArgumentListIndent", 
		"typeArgument", "typeInitializer", "typeInitializerComma", "typeInitializerIndent", 
		"typeInitializerField", "memberEnumValue", "memberEnum", "memberField", 
		"memberRule", "declarationVariable", "declarationVariableTyped", "declarationVariableInferred", 
		"variableAssignment", "expression", "expressionConstant", "expressionRule", 
		"expressionOperatorBinary", "expressionOperatorUnaryPrefix", "expressionOperatorArithmetic", 
		"expressionOperatorArithmeticUnaryPrefix", "expressionOperatorLogic", 
		"expressionOperatorLogicUnaryPrefix", "expressionOperatorComparison", 
		"expressionOperatorBits", "expressionOperatorBitsUnaryPrefix", "expressionLiteralBool", 
		"expressionLiteral", "nameQualified", "nameQualifiedList", "nameQualifiedListComma", 
		"nameQualifiedListIndent", "nameIdentifier", "nameIdentifierList", "nameIdentifierListComma", 
		"nameIdentifierListIndent", "string", "number", "comment", "newline", 
		"freeSpace"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'mod'", "'pub'", "'use'", "'self'", "'ret'", 
		"'brk'", "'cnt'", "'loop'", "'if'", "'else'", "'elif'", "'true'", "'false'", 
		"'in'", "'not'", "'and'", "'or'", null, null, null, null, null, null, 
		null, null, "'('", "')'", "'<'", "'>'", "'['", "']'", "'{'", "'}'", "'#'", 
		"':'", "';'", "'.'", "'..'", "'...'", "'='", "'<>'", "'>='", "'=<'", "'+'", 
		"'-'", "'*'", "'**'", "'/'", "'//'", "'%'", "'&'", "'|'", "'~'", "'^'", 
		"'<<'", "'|<'", "'>|'", "'?'", "'$'", "'@'", "'!'", "'\"'", "'''", "'`'", 
		"'_'", "','", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Indent", "Dedent", "Comment", "Mod", "Pub", "Use", "Self", "Ret", 
		"Brk", "Cnt", "Loop", "If", "Else", "Elif", "True", "False", "In", "Not", 
		"And", "Or", "NumberBin", "NumberOct", "NumberDec", "NumberDecPrefix", 
		"NumberHex", "Identifier", "Character", "String", "ParenOpen", "ParenClose", 
		"AngleOpen", "AngleClose", "BracketOpen", "BracketClose", "CurlyOpen", 
		"CurlyClose", "Hash", "Colon", "SemiColon", "Dot", "Range", "Spread", 
		"Eq", "Neq", "GtEq", "LtEq", "Plus", "Minus", "Multiply", "Power", "Divide", 
		"Root", "Modulo", "BitAnd", "BitOr", "BitNot", "BitXor_Imm", "BitShiftL", 
		"BitRollL", "BitRollR", "Question", "Dollar", "At", "Error", "StrQuote", 
		"CharQuote", "BackTick", "Discard", "Comma", "Sp", "Eol"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MajaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MajaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MajaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MajaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveModContext directiveMod() {
			return GetRuleContext<DirectiveModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveUseContext[] directiveUse() {
			return GetRuleContexts<DirectiveUseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveUseContext directiveUse(int i) {
			return GetRuleContext<DirectiveUseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivePubContext[] directivePub() {
			return GetRuleContexts<DirectivePubContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivePubContext directivePub(int i) {
			return GetRuleContext<DirectivePubContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationMembersContext[] declarationMembers() {
			return GetRuleContexts<DeclarationMembersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationMembersContext declarationMembers(int i) {
			return GetRuleContext<DeclarationMembersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mod) {
				{
				State = 160;
				directiveMod();
				}
			}

			State = 168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 166;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Use:
						{
						State = 163;
						directiveUse();
						}
						break;
					case Pub:
						{
						State = 164;
						directivePub();
						}
						break;
					case Comment:
					case Sp:
					case Eol:
						{
						State = 165;
						newline();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72339070086648072L) != 0) || _la==Sp || _la==Eol) {
				{
				State = 174;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 171;
					declarationMembers();
					}
					break;
				case 2:
					{
					State = 172;
					statement();
					}
					break;
				case 3:
					{
					State = 173;
					newline();
					}
					break;
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(MajaParser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified() {
			return GetRuleContext<NameQualifiedContext>(0);
		}
		public DirectiveModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveModContext directiveMod() {
		DirectiveModContext _localctx = new DirectiveModContext(Context, State);
		EnterRule(_localctx, 2, RULE_directiveMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(Mod);
			State = 180;
			freeSpace();
			State = 181;
			nameQualified();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivePubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pub() { return GetToken(MajaParser.Pub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListContext nameQualifiedList() {
			return GetRuleContext<NameQualifiedListContext>(0);
		}
		public DirectivePubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directivePub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectivePub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivePubContext directivePub() {
		DirectivePubContext _localctx = new DirectivePubContext(Context, State);
		EnterRule(_localctx, 4, RULE_directivePub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(Pub);
			State = 184;
			freeSpace();
			State = 185;
			nameQualifiedList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Use() { return GetToken(MajaParser.Use, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListContext nameQualifiedList() {
			return GetRuleContext<NameQualifiedListContext>(0);
		}
		public DirectiveUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveUseContext directiveUse() {
		DirectiveUseContext _localctx = new DirectiveUseContext(Context, State);
		EnterRule(_localctx, 6, RULE_directiveUse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(Use);
			State = 188;
			freeSpace();
			State = 189;
			nameQualifiedList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationMembersContext[] declarationMembers() {
			return GetRuleContexts<DeclarationMembersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationMembersContext declarationMembers(int i) {
			return GetRuleContext<DeclarationMembersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_codeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 194;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 191;
					statement();
					}
					break;
				case 2:
					{
					State = 192;
					declarationMembers();
					}
					break;
				case 3:
					{
					State = 193;
					newline();
					}
					break;
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72339070086648072L) != 0) || _la==Sp || _la==Eol );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationFunctionContext declarationFunction() {
			return GetRuleContext<DeclarationFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeContext declarationType() {
			return GetRuleContext<DeclarationTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableContext declarationVariable() {
			return GetRuleContext<DeclarationVariableContext>(0);
		}
		public DeclarationMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationMembers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationMembers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationMembersContext declarationMembers() {
		DeclarationMembersContext _localctx = new DeclarationMembersContext(Context, State);
		EnterRule(_localctx, 10, RULE_declarationMembers);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				declarationFunction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				declarationType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 200;
				declarationVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementFlowContext statementFlow() {
			return GetRuleContext<StatementFlowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementAssignmentContext statementAssignment() {
			return GetRuleContext<StatementAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203;
				statementFlow();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204;
				statementAssignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 205;
				statementExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementRetContext statementRet() {
			return GetRuleContext<StatementRetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementIfContext statementIf() {
			return GetRuleContext<StatementIfContext>(0);
		}
		public StatementFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFlow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementFlowContext statementFlow() {
		StatementFlowContext _localctx = new StatementFlowContext(Context, State);
		EnterRule(_localctx, 14, RULE_statementFlow);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ret:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				statementRet();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				statementIf();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MajaParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseContext statementElse() {
			return GetRuleContext<StatementElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseIfContext statementElseIf() {
			return GetRuleContext<StatementElseIfContext>(0);
		}
		public StatementIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementIfContext statementIf() {
		StatementIfContext _localctx = new StatementIfContext(Context, State);
		EnterRule(_localctx, 16, RULE_statementIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(If);
			State = 213;
			Match(Sp);
			State = 214;
			expression(0);
			State = 215;
			newline();
			State = 216;
			Match(Indent);
			State = 217;
			codeBlock();
			State = 218;
			Match(Dedent);
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 219;
				statementElse();
				}
				break;
			case 2:
				{
				State = 220;
				statementElseIf();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MajaParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		public StatementElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementElse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementElseContext statementElse() {
		StatementElseContext _localctx = new StatementElseContext(Context, State);
		EnterRule(_localctx, 18, RULE_statementElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(Else);
			State = 224;
			newline();
			State = 225;
			Match(Indent);
			State = 226;
			codeBlock();
			State = 227;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementElseIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MajaParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MajaParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Elif() { return GetToken(MajaParser.Elif, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseContext statementElse() {
			return GetRuleContext<StatementElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseIfContext statementElseIf() {
			return GetRuleContext<StatementElseIfContext>(0);
		}
		public StatementElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementElseIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementElseIfContext statementElseIf() {
		StatementElseIfContext _localctx = new StatementElseIfContext(Context, State);
		EnterRule(_localctx, 20, RULE_statementElseIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Else:
				{
				State = 229;
				Match(Else);
				State = 230;
				freeSpace();
				State = 231;
				Match(If);
				}
				break;
			case Elif:
				{
				State = 233;
				Match(Elif);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 236;
			Match(Sp);
			State = 237;
			expression(0);
			State = 238;
			newline();
			State = 239;
			Match(Indent);
			State = 240;
			codeBlock();
			State = 241;
			Match(Dedent);
			State = 244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 242;
				statementElse();
				}
				break;
			case 2:
				{
				State = 243;
				statementElseIf();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementRetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ret() { return GetToken(MajaParser.Ret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementRetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementRet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementRet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementRetContext statementRet() {
		StatementRetContext _localctx = new StatementRetContext(Context, State);
		EnterRule(_localctx, 22, RULE_statementRet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(Ret);
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 247;
				Match(Sp);
				State = 248;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementAssignmentContext statementAssignment() {
		StatementAssignmentContext _localctx = new StatementAssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_statementAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			nameIdentifier();
			State = 252;
			Match(Sp);
			State = 253;
			Match(Eq);
			State = 254;
			Match(Sp);
			State = 255;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_statementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(MajaParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(MajaParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DeclarationFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationFunctionContext declarationFunction() {
		DeclarationFunctionContext _localctx = new DeclarationFunctionContext(Context, State);
		EnterRule(_localctx, 28, RULE_declarationFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			nameIdentifier();
			State = 260;
			Match(Colon);
			State = 261;
			freeSpace();
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 262;
				typeParameterList();
				}
			}

			State = 265;
			parameterList();
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 266;
				Match(Colon);
				State = 267;
				Match(Sp);
				State = 268;
				type();
				}
			}

			State = 271;
			newline();
			State = 272;
			Match(Indent);
			State = 273;
			codeBlock();
			State = 274;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationFunctionLocalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationFunctionContext declarationFunction() {
			return GetRuleContext<DeclarationFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		public DeclarationFunctionLocalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationFunctionLocal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationFunctionLocal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationFunctionLocalContext declarationFunctionLocal() {
		DeclarationFunctionLocalContext _localctx = new DeclarationFunctionLocalContext(Context, State);
		EnterRule(_localctx, 30, RULE_declarationFunctionLocal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(Indent);
			State = 277;
			declarationFunction();
			State = 278;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListCommaContext parameterListComma() {
			return GetRuleContext<ParameterListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListIndentContext parameterListIndent() {
			return GetRuleContext<ParameterListIndentContext>(0);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 32, RULE_parameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(ParenOpen);
			State = 285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 281;
				parameterListComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 282;
				newline();
				State = 283;
				parameterListIndent();
				}
				break;
			case ParenClose:
				break;
			default:
				break;
			}
			State = 287;
			Match(ParenClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public ParameterListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListCommaContext parameterListComma() {
		ParameterListCommaContext _localctx = new ParameterListCommaContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameterListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			parameter();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 290;
				Match(Comma);
				State = 291;
				Match(Sp);
				State = 292;
				parameter();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public ParameterListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListIndentContext parameterListIndent() {
		ParameterListIndentContext _localctx = new ParameterListIndentContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameterListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(Indent);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comment || _la==Sp) {
					{
					{
					State = 299;
					comment();
					}
					}
					State = 304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 305;
				parameter();
				State = 306;
				newline();
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Comment || _la==Identifier || _la==Sp );
			State = 312;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			nameIdentifier();
			State = 315;
			Match(Colon);
			State = 316;
			Match(Sp);
			State = 317;
			type();
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Eq) {
				{
				State = 318;
				Match(Eq);
				State = 319;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListCommaContext argumentListComma() {
			return GetRuleContext<ArgumentListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListIndentContext argumentListIndent() {
			return GetRuleContext<ArgumentListIndentContext>(0);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 40, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(ParenOpen);
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comment || _la==Sp || _la==Eol) {
				{
				State = 323;
				newline();
				}
			}

			State = 328;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case Not:
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Identifier:
			case Character:
			case String:
			case ParenOpen:
			case Minus:
			case BitNot:
				{
				State = 326;
				argumentListComma();
				}
				break;
			case Indent:
				{
				State = 327;
				argumentListIndent();
				}
				break;
			case ParenClose:
				break;
			default:
				break;
			}
			State = 330;
			Match(ParenClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public ArgumentListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListCommaContext argumentListComma() {
		ArgumentListCommaContext _localctx = new ArgumentListCommaContext(Context, State);
		EnterRule(_localctx, 42, RULE_argumentListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			argument();
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 333;
				Match(Comma);
				State = 334;
				Match(Sp);
				State = 335;
				argument();
				}
				}
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public ArgumentListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListIndentContext argumentListIndent() {
		ArgumentListIndentContext _localctx = new ArgumentListIndentContext(Context, State);
		EnterRule(_localctx, 44, RULE_argumentListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(Indent);
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 342;
				argument();
				State = 343;
				newline();
				}
				}
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72339070086643712L) != 0) );
			State = 349;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 46, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 351;
				nameIdentifier();
				State = 352;
				Match(Eq);
				}
				break;
			}
			State = 356;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListContext declarationTypeMemberList() {
			return GetRuleContext<DeclarationTypeMemberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DeclarationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeContext declarationType() {
		DeclarationTypeContext _localctx = new DeclarationTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_declarationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			nameIdentifier();
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 359;
				typeParameterList();
				}
			}

			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 362;
				Match(Colon);
				State = 363;
				Match(Sp);
				State = 364;
				type();
				}
			}

			State = 367;
			newline();
			State = 368;
			Match(Indent);
			State = 369;
			declarationTypeMemberList();
			State = 370;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListEnumContext[] declarationTypeMemberListEnum() {
			return GetRuleContexts<DeclarationTypeMemberListEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListEnumContext declarationTypeMemberListEnum(int i) {
			return GetRuleContext<DeclarationTypeMemberListEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListFieldContext[] declarationTypeMemberListField() {
			return GetRuleContexts<DeclarationTypeMemberListFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListFieldContext declarationTypeMemberListField(int i) {
			return GetRuleContext<DeclarationTypeMemberListFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListRuleContext[] declarationTypeMemberListRule() {
			return GetRuleContexts<DeclarationTypeMemberListRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListRuleContext declarationTypeMemberListRule(int i) {
			return GetRuleContext<DeclarationTypeMemberListRuleContext>(i);
		}
		public DeclarationTypeMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListContext declarationTypeMemberList() {
		DeclarationTypeMemberListContext _localctx = new DeclarationTypeMemberListContext(Context, State);
		EnterRule(_localctx, 50, RULE_declarationTypeMemberList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 375;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 372;
					declarationTypeMemberListEnum();
					}
					break;
				case 2:
					{
					State = 373;
					declarationTypeMemberListField();
					}
					break;
				case 3:
					{
					State = 374;
					declarationTypeMemberListRule();
					}
					break;
				}
				}
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier || _la==Hash );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumValueContext[] memberEnumValue() {
			return GetRuleContexts<MemberEnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumValueContext memberEnumValue(int i) {
			return GetRuleContext<MemberEnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumContext[] memberEnum() {
			return GetRuleContexts<MemberEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumContext memberEnum(int i) {
			return GetRuleContext<MemberEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext[] freeSpace() {
			return GetRuleContexts<FreeSpaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace(int i) {
			return GetRuleContext<FreeSpaceContext>(i);
		}
		public DeclarationTypeMemberListEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberListEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberListEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListEnumContext declarationTypeMemberListEnum() {
		DeclarationTypeMemberListEnumContext _localctx = new DeclarationTypeMemberListEnumContext(Context, State);
		EnterRule(_localctx, 52, RULE_declarationTypeMemberListEnum);
		int _la;
		try {
			int _alt;
			State = 402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 382;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 379;
						memberEnumValue();
						State = 380;
						newline();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 384;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 386;
					memberEnum();
					State = 393;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 387;
						Match(Comma);
						State = 388;
						freeSpace();
						State = 389;
						memberEnum();
						}
						}
						State = 395;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 398;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Identifier );
				State = 400;
				newline();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberFieldContext[] memberField() {
			return GetRuleContexts<MemberFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberFieldContext memberField(int i) {
			return GetRuleContext<MemberFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public DeclarationTypeMemberListFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberListField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberListField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListFieldContext declarationTypeMemberListField() {
		DeclarationTypeMemberListFieldContext _localctx = new DeclarationTypeMemberListFieldContext(Context, State);
		EnterRule(_localctx, 54, RULE_declarationTypeMemberListField);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 404;
					memberField();
					State = 405;
					newline();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 409;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberRuleContext[] memberRule() {
			return GetRuleContexts<MemberRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberRuleContext memberRule(int i) {
			return GetRuleContext<MemberRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public DeclarationTypeMemberListRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberListRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberListRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListRuleContext declarationTypeMemberListRule() {
		DeclarationTypeMemberListRuleContext _localctx = new DeclarationTypeMemberListRuleContext(Context, State);
		EnterRule(_localctx, 56, RULE_declarationTypeMemberListRule);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 411;
					memberRule();
					State = 412;
					newline();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 416;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			nameIdentifier();
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 419;
				typeArgumentList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListCommaContext typeParameterListComma() {
			return GetRuleContext<TypeParameterListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListIndentContext typeParameterListIndent() {
			return GetRuleContext<TypeParameterListIndentContext>(0);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeParameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(AngleOpen);
			State = 427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case Hash:
				{
				State = 423;
				typeParameterListComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 424;
				newline();
				State = 425;
				typeParameterListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 429;
			Match(AngleClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public TypeParameterListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListCommaContext typeParameterListComma() {
		TypeParameterListCommaContext _localctx = new TypeParameterListCommaContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeParameterListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			typeParameter();
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 432;
				Match(Comma);
				State = 433;
				Match(Sp);
				State = 434;
				typeParameter();
				}
				}
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public TypeParameterListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListIndentContext typeParameterListIndent() {
		TypeParameterListIndentContext _localctx = new TypeParameterListIndentContext(Context, State);
		EnterRule(_localctx, 64, RULE_typeParameterListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(Indent);
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comment || _la==Sp) {
					{
					{
					State = 441;
					comment();
					}
					}
					State = 446;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 447;
				typeParameter();
				State = 448;
				newline();
				}
				}
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 137506062344L) != 0) || _la==Sp );
			State = 454;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterGenericContext typeParameterGeneric() {
			return GetRuleContext<TypeParameterGenericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterTemplateContext typeParameterTemplate() {
			return GetRuleContext<TypeParameterTemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterValueContext typeParameterValue() {
			return GetRuleContext<TypeParameterValueContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeParameter);
		try {
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456;
				typeParameterGeneric();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 457;
				typeParameterTemplate();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 458;
				typeParameterValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		public TypeParameterGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterGenericContext typeParameterGeneric() {
		TypeParameterGenericContext _localctx = new TypeParameterGenericContext(Context, State);
		EnterRule(_localctx, 68, RULE_typeParameterGeneric);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			nameIdentifier();
			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 462;
				Match(Colon);
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sp) {
					{
					State = 463;
					Match(Sp);
					}
				}

				State = 466;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterTemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		public TypeParameterTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterTemplate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterTemplateContext typeParameterTemplate() {
		TypeParameterTemplateContext _localctx = new TypeParameterTemplateContext(Context, State);
		EnterRule(_localctx, 70, RULE_typeParameterTemplate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			Match(Hash);
			State = 470;
			nameIdentifier();
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 471;
				Match(Colon);
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sp) {
					{
					State = 472;
					Match(Sp);
					}
				}

				State = 475;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeParameterValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterValueContext typeParameterValue() {
		TypeParameterValueContext _localctx = new TypeParameterValueContext(Context, State);
		EnterRule(_localctx, 72, RULE_typeParameterValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			nameIdentifier();
			State = 479;
			Match(Colon);
			State = 480;
			Match(Sp);
			State = 481;
			type();
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Eq) {
				{
				State = 482;
				Match(Eq);
				State = 483;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListCommaContext typeArgumentListComma() {
			return GetRuleContext<TypeArgumentListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListIndentContext typeArgumentListIndent() {
			return GetRuleContext<TypeArgumentListIndentContext>(0);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeArgumentList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(AngleOpen);
			State = 489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case Not:
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Identifier:
			case Character:
			case String:
			case ParenOpen:
			case Minus:
			case BitNot:
				{
				State = 487;
				typeArgumentListComma();
				}
				break;
			case Indent:
				{
				State = 488;
				typeArgumentListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 491;
			Match(AngleClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public TypeArgumentListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListCommaContext typeArgumentListComma() {
		TypeArgumentListCommaContext _localctx = new TypeArgumentListCommaContext(Context, State);
		EnterRule(_localctx, 76, RULE_typeArgumentListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			typeArgument();
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 494;
				Match(Comma);
				State = 495;
				Match(Sp);
				State = 496;
				typeArgument();
				}
				}
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public TypeArgumentListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListIndentContext typeArgumentListIndent() {
		TypeArgumentListIndentContext _localctx = new TypeArgumentListIndentContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeArgumentListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			Match(Indent);
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 503;
				typeArgument();
				State = 504;
				newline();
				}
				}
				State = 508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72339070086643712L) != 0) );
			State = 510;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeArgument);
		try {
			State = 514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 512;
				type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 513;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerCommaContext typeInitializerComma() {
			return GetRuleContext<TypeInitializerCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerIndentContext typeInitializerIndent() {
			return GetRuleContext<TypeInitializerIndentContext>(0);
		}
		public TypeInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerContext typeInitializer() {
		TypeInitializerContext _localctx = new TypeInitializerContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeInitializer);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CurlyOpen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516;
				typeInitializerComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 517;
				newline();
				State = 518;
				typeInitializerIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyOpen() { return GetToken(MajaParser.CurlyOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext[] typeInitializerField() {
			return GetRuleContexts<TypeInitializerFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext typeInitializerField(int i) {
			return GetRuleContext<TypeInitializerFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyClose() { return GetToken(MajaParser.CurlyClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public TypeInitializerCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializerComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializerComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerCommaContext typeInitializerComma() {
		TypeInitializerCommaContext _localctx = new TypeInitializerCommaContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeInitializerComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			Match(CurlyOpen);
			State = 523;
			typeInitializerField();
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 524;
				Match(Comma);
				State = 525;
				Match(Sp);
				State = 526;
				typeInitializerField();
				}
				}
				State = 531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 532;
			Match(CurlyClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext[] typeInitializerField() {
			return GetRuleContexts<TypeInitializerFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext typeInitializerField(int i) {
			return GetRuleContext<TypeInitializerFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public TypeInitializerIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializerIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializerIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerIndentContext typeInitializerIndent() {
		TypeInitializerIndentContext _localctx = new TypeInitializerIndentContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeInitializerIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			Match(Indent);
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 535;
				typeInitializerField();
				State = 536;
				newline();
				}
				}
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 542;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeInitializerFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializerField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializerField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerFieldContext typeInitializerField() {
		TypeInitializerFieldContext _localctx = new TypeInitializerFieldContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeInitializerField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			nameIdentifier();
			State = 545;
			Match(Sp);
			State = 546;
			Match(Eq);
			State = 547;
			Match(Sp);
			State = 548;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberEnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionConstantContext expressionConstant() {
			return GetRuleContext<ExpressionConstantContext>(0);
		}
		public MemberEnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberEnumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberEnumValueContext memberEnumValue() {
		MemberEnumValueContext _localctx = new MemberEnumValueContext(Context, State);
		EnterRule(_localctx, 90, RULE_memberEnumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			nameIdentifier();
			State = 555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 551;
				Match(Sp);
				State = 552;
				Match(Eq);
				State = 553;
				Match(Sp);
				State = 554;
				expressionConstant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public MemberEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberEnumContext memberEnum() {
		MemberEnumContext _localctx = new MemberEnumContext(Context, State);
		EnterRule(_localctx, 92, RULE_memberEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemberFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberFieldContext memberField() {
		MemberFieldContext _localctx = new MemberFieldContext(Context, State);
		EnterRule(_localctx, 94, RULE_memberField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			nameIdentifier();
			State = 560;
			Match(Colon);
			State = 561;
			Match(Sp);
			State = 562;
			type();
			State = 567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 563;
				Match(Sp);
				State = 564;
				Match(Eq);
				State = 565;
				Match(Sp);
				State = 566;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionRuleContext expressionRule() {
			return GetRuleContext<ExpressionRuleContext>(0);
		}
		public MemberRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberRuleContext memberRule() {
		MemberRuleContext _localctx = new MemberRuleContext(Context, State);
		EnterRule(_localctx, 96, RULE_memberRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			Match(Hash);
			State = 570;
			nameIdentifier();
			State = 571;
			Match(Sp);
			State = 572;
			expressionRule();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableTypedContext declarationVariableTyped() {
			return GetRuleContext<DeclarationVariableTypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableInferredContext declarationVariableInferred() {
			return GetRuleContext<DeclarationVariableInferredContext>(0);
		}
		public DeclarationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableContext declarationVariable() {
		DeclarationVariableContext _localctx = new DeclarationVariableContext(Context, State);
		EnterRule(_localctx, 98, RULE_declarationVariable);
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 574;
				declarationVariableTyped();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 575;
				declarationVariableInferred();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableTypedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationVariableTypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariableTyped; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariableTyped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableTypedContext declarationVariableTyped() {
		DeclarationVariableTypedContext _localctx = new DeclarationVariableTypedContext(Context, State);
		EnterRule(_localctx, 100, RULE_declarationVariableTyped);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			nameIdentifier();
			State = 579;
			Match(Colon);
			State = 580;
			Match(Sp);
			State = 581;
			type();
			State = 586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 582;
				Match(Sp);
				State = 583;
				Match(Eq);
				State = 584;
				Match(Sp);
				State = 585;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableInferredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationVariableInferredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariableInferred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariableInferred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableInferredContext declarationVariableInferred() {
		DeclarationVariableInferredContext _localctx = new DeclarationVariableInferredContext(Context, State);
		EnterRule(_localctx, 102, RULE_declarationVariableInferred);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			nameIdentifier();
			State = 589;
			Match(Sp);
			State = 590;
			Match(Colon);
			State = 591;
			Match(Eq);
			State = 592;
			Match(Sp);
			State = 593;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 104, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			nameIdentifier();
			State = 596;
			Match(Sp);
			State = 597;
			Match(Eq);
			State = 598;
			Match(Sp);
			State = 599;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionIdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public ExpressionIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionMemberAccessContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MajaParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public ExpressionMemberAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInvocationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public ExpressionInvocationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryPrefixContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorUnaryPrefixContext expressionOperatorUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionUnaryPrefixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBinaryContext expressionOperatorBinary() {
			return GetRuleContext<ExpressionOperatorBinaryContext>(0);
		}
		public ExpressionBinaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionTypeInitializerContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerContext typeInitializer() {
			return GetRuleContext<TypeInitializerContext>(0);
		}
		public ExpressionTypeInitializerContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionTypeInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionConstContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionConstantContext expressionConstant() {
			return GetRuleContext<ExpressionConstantContext>(0);
		}
		public ExpressionConstContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionConst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionPrecedenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		public ExpressionPrecedenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionPrecedence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 106;
		EnterRecursionRule(_localctx, 106, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
			case String:
				{
				_localctx = new ExpressionConstContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 602;
				expressionConstant();
				}
				break;
			case Not:
			case Minus:
			case BitNot:
				{
				_localctx = new ExpressionUnaryPrefixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 603;
				expressionOperatorUnaryPrefix();
				State = 604;
				expression(6);
				}
				break;
			case ParenOpen:
				{
				_localctx = new ExpressionPrecedenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 606;
				Match(ParenOpen);
				State = 607;
				expression(0);
				State = 608;
				Match(ParenClose);
				}
				break;
			case Identifier:
				{
				_localctx = new ExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 610;
				nameIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 631;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 629;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
					case 1:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 613;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 614;
						Match(Sp);
						State = 615;
						expressionOperatorBinary();
						State = 616;
						Match(Sp);
						State = 617;
						expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionInvocationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 619;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 621;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==AngleOpen) {
							{
							State = 620;
							typeArgumentList();
							}
						}

						State = 623;
						argumentList();
						}
						break;
					case 3:
						{
						_localctx = new ExpressionTypeInitializerContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 624;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 625;
						typeInitializer();
						}
						break;
					case 4:
						{
						_localctx = new ExpressionMemberAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 626;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 627;
						Match(Dot);
						State = 628;
						nameIdentifier();
						}
						break;
					}
					} 
				}
				State = 633;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLiteralContext expressionLiteral() {
			return GetRuleContext<ExpressionLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLiteralBoolContext expressionLiteralBool() {
			return GetRuleContext<ExpressionLiteralBoolContext>(0);
		}
		public ExpressionConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionConstantContext expressionConstant() {
		ExpressionConstantContext _localctx = new ExpressionConstantContext(Context, State);
		EnterRule(_localctx, 108, RULE_expressionConstant);
		try {
			State = 636;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
			case String:
				EnterOuterAlt(_localctx, 1);
				{
				State = 634;
				expressionLiteral();
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 2);
				{
				State = 635;
				expressionLiteralBool();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MajaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionRuleContext expressionRule() {
		ExpressionRuleContext _localctx = new ExpressionRuleContext(Context, State);
		EnterRule(_localctx, 110, RULE_expressionRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			Match(Hash);
			State = 639;
			Match(Identifier);
			State = 640;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorArithmeticContext expressionOperatorArithmetic() {
			return GetRuleContext<ExpressionOperatorArithmeticContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorLogicContext expressionOperatorLogic() {
			return GetRuleContext<ExpressionOperatorLogicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorComparisonContext expressionOperatorComparison() {
			return GetRuleContext<ExpressionOperatorComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBitsContext expressionOperatorBits() {
			return GetRuleContext<ExpressionOperatorBitsContext>(0);
		}
		public ExpressionOperatorBinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBinary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBinaryContext expressionOperatorBinary() {
		ExpressionOperatorBinaryContext _localctx = new ExpressionOperatorBinaryContext(Context, State);
		EnterRule(_localctx, 112, RULE_expressionOperatorBinary);
		try {
			State = 646;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 642;
				expressionOperatorArithmetic();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 643;
				expressionOperatorLogic();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 644;
				expressionOperatorComparison();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 645;
				expressionOperatorBits();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorArithmeticUnaryPrefixContext expressionOperatorArithmeticUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorArithmeticUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorLogicUnaryPrefixContext expressionOperatorLogicUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorLogicUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBitsUnaryPrefixContext expressionOperatorBitsUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorBitsUnaryPrefixContext>(0);
		}
		public ExpressionOperatorUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorUnaryPrefixContext expressionOperatorUnaryPrefix() {
		ExpressionOperatorUnaryPrefixContext _localctx = new ExpressionOperatorUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 114, RULE_expressionOperatorUnaryPrefix);
		try {
			State = 651;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Minus:
				EnterOuterAlt(_localctx, 1);
				{
				State = 648;
				expressionOperatorArithmeticUnaryPrefix();
				}
				break;
			case Not:
				EnterOuterAlt(_localctx, 2);
				{
				State = 649;
				expressionOperatorLogicUnaryPrefix();
				}
				break;
			case BitNot:
				EnterOuterAlt(_localctx, 3);
				{
				State = 650;
				expressionOperatorBitsUnaryPrefix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorArithmeticContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MajaParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MajaParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MajaParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MajaParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(MajaParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MajaParser.Power, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Root() { return GetToken(MajaParser.Root, 0); }
		public ExpressionOperatorArithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorArithmetic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorArithmeticContext expressionOperatorArithmetic() {
		ExpressionOperatorArithmeticContext _localctx = new ExpressionOperatorArithmeticContext(Context, State);
		EnterRule(_localctx, 116, RULE_expressionOperatorArithmetic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17873661021126656L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorArithmeticUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MajaParser.Minus, 0); }
		public ExpressionOperatorArithmeticUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorArithmeticUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorArithmeticUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorArithmeticUnaryPrefixContext expressionOperatorArithmeticUnaryPrefix() {
		ExpressionOperatorArithmeticUnaryPrefixContext _localctx = new ExpressionOperatorArithmeticUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 118, RULE_expressionOperatorArithmeticUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			Match(Minus);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorLogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MajaParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MajaParser.Or, 0); }
		public ExpressionOperatorLogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorLogic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorLogicContext expressionOperatorLogic() {
		ExpressionOperatorLogicContext _localctx = new ExpressionOperatorLogicContext(Context, State);
		EnterRule(_localctx, 120, RULE_expressionOperatorLogic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Or) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorLogicUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MajaParser.Not, 0); }
		public ExpressionOperatorLogicUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorLogicUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorLogicUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorLogicUnaryPrefixContext expressionOperatorLogicUnaryPrefix() {
		ExpressionOperatorLogicUnaryPrefixContext _localctx = new ExpressionOperatorLogicUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 122, RULE_expressionOperatorLogicUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			Match(Not);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Neq() { return GetToken(MajaParser.Neq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GtEq() { return GetToken(MajaParser.GtEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LtEq() { return GetToken(MajaParser.LtEq, 0); }
		public ExpressionOperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorComparisonContext expressionOperatorComparison() {
		ExpressionOperatorComparisonContext _localctx = new ExpressionOperatorComparisonContext(Context, State);
		EnterRule(_localctx, 124, RULE_expressionOperatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 131947837784064L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MajaParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MajaParser.BitOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXor_Imm() { return GetToken(MajaParser.BitXor_Imm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitShiftL() { return GetToken(MajaParser.BitShiftL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AngleClose() { return GetTokens(MajaParser.AngleClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose(int i) {
			return GetToken(MajaParser.AngleClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitRollL() { return GetToken(MajaParser.BitRollL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitRollR() { return GetToken(MajaParser.BitRollR, 0); }
		public ExpressionOperatorBitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBitsContext expressionOperatorBits() {
		ExpressionOperatorBitsContext _localctx = new ExpressionOperatorBitsContext(Context, State);
		EnterRule(_localctx, 126, RULE_expressionOperatorBits);
		try {
			State = 674;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BitAnd:
				EnterOuterAlt(_localctx, 1);
				{
				State = 663;
				Match(BitAnd);
				}
				break;
			case BitOr:
				EnterOuterAlt(_localctx, 2);
				{
				State = 664;
				Match(BitOr);
				}
				break;
			case BitXor_Imm:
				EnterOuterAlt(_localctx, 3);
				{
				State = 665;
				Match(BitXor_Imm);
				}
				break;
			case BitShiftL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 666;
				Match(BitShiftL);
				}
				break;
			case AngleClose:
				EnterOuterAlt(_localctx, 5);
				{
				State = 668;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 667;
					Match(AngleClose);
					}
					break;
				}
				State = 670;
				Match(AngleClose);
				State = 671;
				Match(AngleClose);
				}
				break;
			case BitRollL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 672;
				Match(BitRollL);
				}
				break;
			case BitRollR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 673;
				Match(BitRollR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBitsUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MajaParser.BitNot, 0); }
		public ExpressionOperatorBitsUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBitsUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBitsUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBitsUnaryPrefixContext expressionOperatorBitsUnaryPrefix() {
		ExpressionOperatorBitsUnaryPrefixContext _localctx = new ExpressionOperatorBitsUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 128, RULE_expressionOperatorBitsUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(BitNot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLiteralBoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MajaParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MajaParser.False, 0); }
		public ExpressionLiteralBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLiteralBool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteralBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLiteralBoolContext expressionLiteralBool() {
		ExpressionLiteralBoolContext _localctx = new ExpressionLiteralBoolContext(Context, State);
		EnterRule(_localctx, 130, RULE_expressionLiteralBool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExpressionLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLiteralContext expressionLiteral() {
		ExpressionLiteralContext _localctx = new ExpressionLiteralContext(Context, State);
		EnterRule(_localctx, 132, RULE_expressionLiteral);
		try {
			State = 682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
				EnterOuterAlt(_localctx, 1);
				{
				State = 680;
				number();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 681;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MajaParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MajaParser.Dot, i);
		}
		public NameQualifiedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualified; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualified(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedContext nameQualified() {
		NameQualifiedContext _localctx = new NameQualifiedContext(Context, State);
		EnterRule(_localctx, 134, RULE_nameQualified);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			nameIdentifier();
			State = 689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 685;
				Match(Dot);
				State = 686;
				nameIdentifier();
				}
				}
				State = 691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListCommaContext nameQualifiedListComma() {
			return GetRuleContext<NameQualifiedListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListIndentContext nameQualifiedListIndent() {
			return GetRuleContext<NameQualifiedListIndentContext>(0);
		}
		public NameQualifiedListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListContext nameQualifiedList() {
		NameQualifiedListContext _localctx = new NameQualifiedListContext(Context, State);
		EnterRule(_localctx, 136, RULE_nameQualifiedList);
		try {
			State = 694;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 692;
				nameQualifiedListComma();
				}
				break;
			case Indent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 693;
				nameQualifiedListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext[] nameQualified() {
			return GetRuleContexts<NameQualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified(int i) {
			return GetRuleContext<NameQualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		public NameQualifiedListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListCommaContext nameQualifiedListComma() {
		NameQualifiedListCommaContext _localctx = new NameQualifiedListCommaContext(Context, State);
		EnterRule(_localctx, 138, RULE_nameQualifiedListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			nameQualified();
			State = 698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 697;
				Match(Sp);
				}
				break;
			}
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 700;
				Match(Comma);
				State = 702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 701;
					Match(Sp);
					}
					}
					State = 704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				State = 706;
				nameQualified();
				}
				}
				State = 711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext[] nameQualified() {
			return GetRuleContexts<NameQualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified(int i) {
			return GetRuleContext<NameQualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NameQualifiedListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListIndentContext nameQualifiedListIndent() {
		NameQualifiedListIndentContext _localctx = new NameQualifiedListIndentContext(Context, State);
		EnterRule(_localctx, 140, RULE_nameQualifiedListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			Match(Indent);
			State = 716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 713;
				nameQualified();
				State = 714;
				newline();
				}
				}
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 720;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MajaParser.Identifier, 0); }
		public NameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierContext nameIdentifier() {
		NameIdentifierContext _localctx = new NameIdentifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_nameIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListCommaContext nameQualifiedListComma() {
			return GetRuleContext<NameQualifiedListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListIndentContext nameQualifiedListIndent() {
			return GetRuleContext<NameQualifiedListIndentContext>(0);
		}
		public NameIdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListContext nameIdentifierList() {
		NameIdentifierListContext _localctx = new NameIdentifierListContext(Context, State);
		EnterRule(_localctx, 144, RULE_nameIdentifierList);
		try {
			State = 726;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 724;
				nameQualifiedListComma();
				}
				break;
			case Indent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 725;
				nameQualifiedListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		public NameIdentifierListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListCommaContext nameIdentifierListComma() {
		NameIdentifierListCommaContext _localctx = new NameIdentifierListCommaContext(Context, State);
		EnterRule(_localctx, 146, RULE_nameIdentifierListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			nameIdentifier();
			State = 730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 729;
				Match(Sp);
				}
			}

			State = 741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 732;
				Match(Comma);
				State = 734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 733;
					Match(Sp);
					}
					}
					State = 736;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				State = 738;
				nameIdentifier();
				}
				}
				State = 743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NameIdentifierListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListIndentContext nameIdentifierListIndent() {
		NameIdentifierListIndentContext _localctx = new NameIdentifierListIndentContext(Context, State);
		EnterRule(_localctx, 148, RULE_nameIdentifierListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			Match(Indent);
			State = 748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 745;
				nameIdentifier();
				State = 746;
				newline();
				}
				}
				State = 750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 752;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(MajaParser.String, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 150, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberBin() { return GetToken(MajaParser.NumberBin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDec() { return GetToken(MajaParser.NumberDec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDecPrefix() { return GetToken(MajaParser.NumberDecPrefix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberHex() { return GetToken(MajaParser.NumberHex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberOct() { return GetToken(MajaParser.NumberOct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character() { return GetToken(MajaParser.Character, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 152, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 199229440L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(MajaParser.Comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eol() { return GetToken(MajaParser.Eol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 154, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sp) {
				{
				{
				State = 758;
				Match(Sp);
				}
				}
				State = 763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 764;
			Match(Comment);
			State = 765;
			Match(Eol);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(MajaParser.Comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Eol() { return GetTokens(MajaParser.Eol); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eol(int i) {
			return GetToken(MajaParser.Eol, i);
		}
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 156, RULE_newline);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sp) {
				{
				{
				State = 767;
				Match(Sp);
				}
				}
				State = 772;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 774;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comment) {
				{
				State = 773;
				Match(Comment);
				}
			}

			State = 777;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 776;
					Match(Eol);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 779;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeSpaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public FreeSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeSpace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreeSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeSpaceContext freeSpace() {
		FreeSpaceContext _localctx = new FreeSpaceContext(Context, State);
		EnterRule(_localctx, 158, RULE_freeSpace);
		int _la;
		try {
			State = 787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 781;
					Match(Sp);
					}
					}
					State = 784;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 786;
				newline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 53: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,71,790,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,1,0,3,0,162,8,0,1,0,1,0,1,0,5,0,167,8,0,10,0,12,0,
		170,9,0,1,0,1,0,1,0,5,0,175,8,0,10,0,12,0,178,9,0,1,1,1,1,1,1,1,1,1,2,
		1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,4,4,195,8,4,11,4,12,4,196,1,5,
		1,5,1,5,3,5,202,8,5,1,6,1,6,1,6,3,6,207,8,6,1,7,1,7,3,7,211,8,7,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,222,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
		1,10,1,10,1,10,1,10,3,10,235,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,3,10,245,8,10,1,11,1,11,1,11,3,11,250,8,11,1,12,1,12,1,12,1,12,1,12,
		1,12,1,13,1,13,1,14,1,14,1,14,1,14,3,14,264,8,14,1,14,1,14,1,14,1,14,3,
		14,270,8,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
		1,16,1,16,3,16,286,8,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,294,8,17,10,
		17,12,17,297,9,17,1,18,1,18,5,18,301,8,18,10,18,12,18,304,9,18,1,18,1,
		18,1,18,4,18,309,8,18,11,18,12,18,310,1,18,1,18,1,19,1,19,1,19,1,19,1,
		19,1,19,3,19,321,8,19,1,20,1,20,3,20,325,8,20,1,20,1,20,3,20,329,8,20,
		1,20,1,20,1,21,1,21,1,21,1,21,5,21,337,8,21,10,21,12,21,340,9,21,1,22,
		1,22,1,22,1,22,4,22,346,8,22,11,22,12,22,347,1,22,1,22,1,23,1,23,1,23,
		3,23,355,8,23,1,23,1,23,1,24,1,24,3,24,361,8,24,1,24,1,24,1,24,3,24,366,
		8,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,4,25,376,8,25,11,25,12,25,
		377,1,26,1,26,1,26,4,26,383,8,26,11,26,12,26,384,1,26,1,26,1,26,1,26,1,
		26,5,26,392,8,26,10,26,12,26,395,9,26,4,26,397,8,26,11,26,12,26,398,1,
		26,1,26,3,26,403,8,26,1,27,1,27,1,27,4,27,408,8,27,11,27,12,27,409,1,28,
		1,28,1,28,4,28,415,8,28,11,28,12,28,416,1,29,1,29,3,29,421,8,29,1,30,1,
		30,1,30,1,30,1,30,3,30,428,8,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,436,
		8,31,10,31,12,31,439,9,31,1,32,1,32,5,32,443,8,32,10,32,12,32,446,9,32,
		1,32,1,32,1,32,4,32,451,8,32,11,32,12,32,452,1,32,1,32,1,33,1,33,1,33,
		3,33,460,8,33,1,34,1,34,1,34,3,34,465,8,34,1,34,3,34,468,8,34,1,35,1,35,
		1,35,1,35,3,35,474,8,35,1,35,3,35,477,8,35,1,36,1,36,1,36,1,36,1,36,1,
		36,3,36,485,8,36,1,37,1,37,1,37,3,37,490,8,37,1,37,1,37,1,38,1,38,1,38,
		1,38,5,38,498,8,38,10,38,12,38,501,9,38,1,39,1,39,1,39,1,39,4,39,507,8,
		39,11,39,12,39,508,1,39,1,39,1,40,1,40,3,40,515,8,40,1,41,1,41,1,41,1,
		41,3,41,521,8,41,1,42,1,42,1,42,1,42,1,42,5,42,528,8,42,10,42,12,42,531,
		9,42,1,42,1,42,1,43,1,43,1,43,1,43,4,43,539,8,43,11,43,12,43,540,1,43,
		1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,3,45,556,8,
		45,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,568,8,47,1,48,
		1,48,1,48,1,48,1,48,1,49,1,49,3,49,577,8,49,1,50,1,50,1,50,1,50,1,50,1,
		50,1,50,1,50,3,50,587,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,
		1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
		3,53,612,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,622,8,53,1,
		53,1,53,1,53,1,53,1,53,1,53,5,53,630,8,53,10,53,12,53,633,9,53,1,54,1,
		54,3,54,637,8,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,3,56,647,8,56,
		1,57,1,57,1,57,3,57,652,8,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,
		62,1,62,1,63,1,63,1,63,1,63,1,63,3,63,669,8,63,1,63,1,63,1,63,1,63,3,63,
		675,8,63,1,64,1,64,1,65,1,65,1,66,1,66,3,66,683,8,66,1,67,1,67,1,67,5,
		67,688,8,67,10,67,12,67,691,9,67,1,68,1,68,3,68,695,8,68,1,69,1,69,3,69,
		699,8,69,1,69,1,69,4,69,703,8,69,11,69,12,69,704,1,69,5,69,708,8,69,10,
		69,12,69,711,9,69,1,70,1,70,1,70,1,70,4,70,717,8,70,11,70,12,70,718,1,
		70,1,70,1,71,1,71,1,72,1,72,3,72,727,8,72,1,73,1,73,3,73,731,8,73,1,73,
		1,73,4,73,735,8,73,11,73,12,73,736,1,73,5,73,740,8,73,10,73,12,73,743,
		9,73,1,74,1,74,1,74,1,74,4,74,749,8,74,11,74,12,74,750,1,74,1,74,1,75,
		1,75,1,76,1,76,1,77,5,77,760,8,77,10,77,12,77,763,9,77,1,77,1,77,1,77,
		1,78,5,78,769,8,78,10,78,12,78,772,9,78,1,78,3,78,775,8,78,1,78,4,78,778,
		8,78,11,78,12,78,779,1,79,4,79,783,8,79,11,79,12,79,784,1,79,3,79,788,
		8,79,1,79,0,1,106,80,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
		84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
		124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
		0,5,1,0,47,53,1,0,19,20,2,0,31,32,43,46,1,0,15,16,2,0,21,25,27,27,817,
		0,161,1,0,0,0,2,179,1,0,0,0,4,183,1,0,0,0,6,187,1,0,0,0,8,194,1,0,0,0,
		10,201,1,0,0,0,12,206,1,0,0,0,14,210,1,0,0,0,16,212,1,0,0,0,18,223,1,0,
		0,0,20,234,1,0,0,0,22,246,1,0,0,0,24,251,1,0,0,0,26,257,1,0,0,0,28,259,
		1,0,0,0,30,276,1,0,0,0,32,280,1,0,0,0,34,289,1,0,0,0,36,298,1,0,0,0,38,
		314,1,0,0,0,40,322,1,0,0,0,42,332,1,0,0,0,44,341,1,0,0,0,46,354,1,0,0,
		0,48,358,1,0,0,0,50,375,1,0,0,0,52,402,1,0,0,0,54,407,1,0,0,0,56,414,1,
		0,0,0,58,418,1,0,0,0,60,422,1,0,0,0,62,431,1,0,0,0,64,440,1,0,0,0,66,459,
		1,0,0,0,68,461,1,0,0,0,70,469,1,0,0,0,72,478,1,0,0,0,74,486,1,0,0,0,76,
		493,1,0,0,0,78,502,1,0,0,0,80,514,1,0,0,0,82,520,1,0,0,0,84,522,1,0,0,
		0,86,534,1,0,0,0,88,544,1,0,0,0,90,550,1,0,0,0,92,557,1,0,0,0,94,559,1,
		0,0,0,96,569,1,0,0,0,98,576,1,0,0,0,100,578,1,0,0,0,102,588,1,0,0,0,104,
		595,1,0,0,0,106,611,1,0,0,0,108,636,1,0,0,0,110,638,1,0,0,0,112,646,1,
		0,0,0,114,651,1,0,0,0,116,653,1,0,0,0,118,655,1,0,0,0,120,657,1,0,0,0,
		122,659,1,0,0,0,124,661,1,0,0,0,126,674,1,0,0,0,128,676,1,0,0,0,130,678,
		1,0,0,0,132,682,1,0,0,0,134,684,1,0,0,0,136,694,1,0,0,0,138,696,1,0,0,
		0,140,712,1,0,0,0,142,722,1,0,0,0,144,726,1,0,0,0,146,728,1,0,0,0,148,
		744,1,0,0,0,150,754,1,0,0,0,152,756,1,0,0,0,154,761,1,0,0,0,156,770,1,
		0,0,0,158,787,1,0,0,0,160,162,3,2,1,0,161,160,1,0,0,0,161,162,1,0,0,0,
		162,168,1,0,0,0,163,167,3,6,3,0,164,167,3,4,2,0,165,167,3,156,78,0,166,
		163,1,0,0,0,166,164,1,0,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,
		0,0,0,168,169,1,0,0,0,169,176,1,0,0,0,170,168,1,0,0,0,171,175,3,10,5,0,
		172,175,3,12,6,0,173,175,3,156,78,0,174,171,1,0,0,0,174,172,1,0,0,0,174,
		173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,1,1,0,
		0,0,178,176,1,0,0,0,179,180,5,4,0,0,180,181,3,158,79,0,181,182,3,134,67,
		0,182,3,1,0,0,0,183,184,5,5,0,0,184,185,3,158,79,0,185,186,3,136,68,0,
		186,5,1,0,0,0,187,188,5,6,0,0,188,189,3,158,79,0,189,190,3,136,68,0,190,
		7,1,0,0,0,191,195,3,12,6,0,192,195,3,10,5,0,193,195,3,156,78,0,194,191,
		1,0,0,0,194,192,1,0,0,0,194,193,1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,
		0,196,197,1,0,0,0,197,9,1,0,0,0,198,202,3,28,14,0,199,202,3,48,24,0,200,
		202,3,98,49,0,201,198,1,0,0,0,201,199,1,0,0,0,201,200,1,0,0,0,202,11,1,
		0,0,0,203,207,3,14,7,0,204,207,3,24,12,0,205,207,3,26,13,0,206,203,1,0,
		0,0,206,204,1,0,0,0,206,205,1,0,0,0,207,13,1,0,0,0,208,211,3,22,11,0,209,
		211,3,16,8,0,210,208,1,0,0,0,210,209,1,0,0,0,211,15,1,0,0,0,212,213,5,
		12,0,0,213,214,5,70,0,0,214,215,3,106,53,0,215,216,3,156,78,0,216,217,
		5,1,0,0,217,218,3,8,4,0,218,221,5,2,0,0,219,222,3,18,9,0,220,222,3,20,
		10,0,221,219,1,0,0,0,221,220,1,0,0,0,221,222,1,0,0,0,222,17,1,0,0,0,223,
		224,5,13,0,0,224,225,3,156,78,0,225,226,5,1,0,0,226,227,3,8,4,0,227,228,
		5,2,0,0,228,19,1,0,0,0,229,230,5,13,0,0,230,231,3,158,79,0,231,232,5,12,
		0,0,232,235,1,0,0,0,233,235,5,14,0,0,234,229,1,0,0,0,234,233,1,0,0,0,235,
		236,1,0,0,0,236,237,5,70,0,0,237,238,3,106,53,0,238,239,3,156,78,0,239,
		240,5,1,0,0,240,241,3,8,4,0,241,244,5,2,0,0,242,245,3,18,9,0,243,245,3,
		20,10,0,244,242,1,0,0,0,244,243,1,0,0,0,244,245,1,0,0,0,245,21,1,0,0,0,
		246,249,5,8,0,0,247,248,5,70,0,0,248,250,3,106,53,0,249,247,1,0,0,0,249,
		250,1,0,0,0,250,23,1,0,0,0,251,252,3,142,71,0,252,253,5,70,0,0,253,254,
		5,43,0,0,254,255,5,70,0,0,255,256,3,106,53,0,256,25,1,0,0,0,257,258,3,
		106,53,0,258,27,1,0,0,0,259,260,3,142,71,0,260,261,5,38,0,0,261,263,3,
		158,79,0,262,264,3,60,30,0,263,262,1,0,0,0,263,264,1,0,0,0,264,265,1,0,
		0,0,265,269,3,32,16,0,266,267,5,38,0,0,267,268,5,70,0,0,268,270,3,58,29,
		0,269,266,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,272,3,156,78,0,272,
		273,5,1,0,0,273,274,3,8,4,0,274,275,5,2,0,0,275,29,1,0,0,0,276,277,5,1,
		0,0,277,278,3,28,14,0,278,279,5,2,0,0,279,31,1,0,0,0,280,285,5,29,0,0,
		281,286,3,34,17,0,282,283,3,156,78,0,283,284,3,36,18,0,284,286,1,0,0,0,
		285,281,1,0,0,0,285,282,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,288,
		5,30,0,0,288,33,1,0,0,0,289,295,3,38,19,0,290,291,5,69,0,0,291,292,5,70,
		0,0,292,294,3,38,19,0,293,290,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,
		295,296,1,0,0,0,296,35,1,0,0,0,297,295,1,0,0,0,298,308,5,1,0,0,299,301,
		3,154,77,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,
		0,0,303,305,1,0,0,0,304,302,1,0,0,0,305,306,3,38,19,0,306,307,3,156,78,
		0,307,309,1,0,0,0,308,302,1,0,0,0,309,310,1,0,0,0,310,308,1,0,0,0,310,
		311,1,0,0,0,311,312,1,0,0,0,312,313,5,2,0,0,313,37,1,0,0,0,314,315,3,142,
		71,0,315,316,5,38,0,0,316,317,5,70,0,0,317,320,3,58,29,0,318,319,5,43,
		0,0,319,321,3,106,53,0,320,318,1,0,0,0,320,321,1,0,0,0,321,39,1,0,0,0,
		322,324,5,29,0,0,323,325,3,156,78,0,324,323,1,0,0,0,324,325,1,0,0,0,325,
		328,1,0,0,0,326,329,3,42,21,0,327,329,3,44,22,0,328,326,1,0,0,0,328,327,
		1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,331,5,30,0,0,331,41,1,0,0,
		0,332,338,3,46,23,0,333,334,5,69,0,0,334,335,5,70,0,0,335,337,3,46,23,
		0,336,333,1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,
		43,1,0,0,0,340,338,1,0,0,0,341,345,5,1,0,0,342,343,3,46,23,0,343,344,3,
		156,78,0,344,346,1,0,0,0,345,342,1,0,0,0,346,347,1,0,0,0,347,345,1,0,0,
		0,347,348,1,0,0,0,348,349,1,0,0,0,349,350,5,2,0,0,350,45,1,0,0,0,351,352,
		3,142,71,0,352,353,5,43,0,0,353,355,1,0,0,0,354,351,1,0,0,0,354,355,1,
		0,0,0,355,356,1,0,0,0,356,357,3,106,53,0,357,47,1,0,0,0,358,360,3,142,
		71,0,359,361,3,60,30,0,360,359,1,0,0,0,360,361,1,0,0,0,361,365,1,0,0,0,
		362,363,5,38,0,0,363,364,5,70,0,0,364,366,3,58,29,0,365,362,1,0,0,0,365,
		366,1,0,0,0,366,367,1,0,0,0,367,368,3,156,78,0,368,369,5,1,0,0,369,370,
		3,50,25,0,370,371,5,2,0,0,371,49,1,0,0,0,372,376,3,52,26,0,373,376,3,54,
		27,0,374,376,3,56,28,0,375,372,1,0,0,0,375,373,1,0,0,0,375,374,1,0,0,0,
		376,377,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,51,1,0,0,0,379,380,
		3,90,45,0,380,381,3,156,78,0,381,383,1,0,0,0,382,379,1,0,0,0,383,384,1,
		0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,403,1,0,0,0,386,393,3,92,46,
		0,387,388,5,69,0,0,388,389,3,158,79,0,389,390,3,92,46,0,390,392,1,0,0,
		0,391,387,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,
		397,1,0,0,0,395,393,1,0,0,0,396,386,1,0,0,0,397,398,1,0,0,0,398,396,1,
		0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,401,3,156,78,0,401,403,1,0,0,
		0,402,382,1,0,0,0,402,396,1,0,0,0,403,53,1,0,0,0,404,405,3,94,47,0,405,
		406,3,156,78,0,406,408,1,0,0,0,407,404,1,0,0,0,408,409,1,0,0,0,409,407,
		1,0,0,0,409,410,1,0,0,0,410,55,1,0,0,0,411,412,3,96,48,0,412,413,3,156,
		78,0,413,415,1,0,0,0,414,411,1,0,0,0,415,416,1,0,0,0,416,414,1,0,0,0,416,
		417,1,0,0,0,417,57,1,0,0,0,418,420,3,142,71,0,419,421,3,74,37,0,420,419,
		1,0,0,0,420,421,1,0,0,0,421,59,1,0,0,0,422,427,5,31,0,0,423,428,3,62,31,
		0,424,425,3,156,78,0,425,426,3,64,32,0,426,428,1,0,0,0,427,423,1,0,0,0,
		427,424,1,0,0,0,428,429,1,0,0,0,429,430,5,32,0,0,430,61,1,0,0,0,431,437,
		3,66,33,0,432,433,5,69,0,0,433,434,5,70,0,0,434,436,3,66,33,0,435,432,
		1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,63,1,0,0,0,
		439,437,1,0,0,0,440,450,5,1,0,0,441,443,3,154,77,0,442,441,1,0,0,0,443,
		446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,447,1,0,0,0,446,444,1,
		0,0,0,447,448,3,66,33,0,448,449,3,156,78,0,449,451,1,0,0,0,450,444,1,0,
		0,0,451,452,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,
		455,5,2,0,0,455,65,1,0,0,0,456,460,3,68,34,0,457,460,3,70,35,0,458,460,
		3,72,36,0,459,456,1,0,0,0,459,457,1,0,0,0,459,458,1,0,0,0,460,67,1,0,0,
		0,461,467,3,142,71,0,462,464,5,38,0,0,463,465,5,70,0,0,464,463,1,0,0,0,
		464,465,1,0,0,0,465,466,1,0,0,0,466,468,3,58,29,0,467,462,1,0,0,0,467,
		468,1,0,0,0,468,69,1,0,0,0,469,470,5,37,0,0,470,476,3,142,71,0,471,473,
		5,38,0,0,472,474,5,70,0,0,473,472,1,0,0,0,473,474,1,0,0,0,474,475,1,0,
		0,0,475,477,3,58,29,0,476,471,1,0,0,0,476,477,1,0,0,0,477,71,1,0,0,0,478,
		479,3,142,71,0,479,480,5,38,0,0,480,481,5,70,0,0,481,484,3,58,29,0,482,
		483,5,43,0,0,483,485,3,106,53,0,484,482,1,0,0,0,484,485,1,0,0,0,485,73,
		1,0,0,0,486,489,5,31,0,0,487,490,3,76,38,0,488,490,3,78,39,0,489,487,1,
		0,0,0,489,488,1,0,0,0,490,491,1,0,0,0,491,492,5,32,0,0,492,75,1,0,0,0,
		493,499,3,80,40,0,494,495,5,69,0,0,495,496,5,70,0,0,496,498,3,80,40,0,
		497,494,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,77,
		1,0,0,0,501,499,1,0,0,0,502,506,5,1,0,0,503,504,3,80,40,0,504,505,3,156,
		78,0,505,507,1,0,0,0,506,503,1,0,0,0,507,508,1,0,0,0,508,506,1,0,0,0,508,
		509,1,0,0,0,509,510,1,0,0,0,510,511,5,2,0,0,511,79,1,0,0,0,512,515,3,58,
		29,0,513,515,3,106,53,0,514,512,1,0,0,0,514,513,1,0,0,0,515,81,1,0,0,0,
		516,521,3,84,42,0,517,518,3,156,78,0,518,519,3,86,43,0,519,521,1,0,0,0,
		520,516,1,0,0,0,520,517,1,0,0,0,521,83,1,0,0,0,522,523,5,35,0,0,523,529,
		3,88,44,0,524,525,5,69,0,0,525,526,5,70,0,0,526,528,3,88,44,0,527,524,
		1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,532,1,0,0,
		0,531,529,1,0,0,0,532,533,5,36,0,0,533,85,1,0,0,0,534,538,5,1,0,0,535,
		536,3,88,44,0,536,537,3,156,78,0,537,539,1,0,0,0,538,535,1,0,0,0,539,540,
		1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,543,5,2,0,
		0,543,87,1,0,0,0,544,545,3,142,71,0,545,546,5,70,0,0,546,547,5,43,0,0,
		547,548,5,70,0,0,548,549,3,106,53,0,549,89,1,0,0,0,550,555,3,142,71,0,
		551,552,5,70,0,0,552,553,5,43,0,0,553,554,5,70,0,0,554,556,3,108,54,0,
		555,551,1,0,0,0,555,556,1,0,0,0,556,91,1,0,0,0,557,558,3,142,71,0,558,
		93,1,0,0,0,559,560,3,142,71,0,560,561,5,38,0,0,561,562,5,70,0,0,562,567,
		3,58,29,0,563,564,5,70,0,0,564,565,5,43,0,0,565,566,5,70,0,0,566,568,3,
		106,53,0,567,563,1,0,0,0,567,568,1,0,0,0,568,95,1,0,0,0,569,570,5,37,0,
		0,570,571,3,142,71,0,571,572,5,70,0,0,572,573,3,110,55,0,573,97,1,0,0,
		0,574,577,3,100,50,0,575,577,3,102,51,0,576,574,1,0,0,0,576,575,1,0,0,
		0,577,99,1,0,0,0,578,579,3,142,71,0,579,580,5,38,0,0,580,581,5,70,0,0,
		581,586,3,58,29,0,582,583,5,70,0,0,583,584,5,43,0,0,584,585,5,70,0,0,585,
		587,3,106,53,0,586,582,1,0,0,0,586,587,1,0,0,0,587,101,1,0,0,0,588,589,
		3,142,71,0,589,590,5,70,0,0,590,591,5,38,0,0,591,592,5,43,0,0,592,593,
		5,70,0,0,593,594,3,106,53,0,594,103,1,0,0,0,595,596,3,142,71,0,596,597,
		5,70,0,0,597,598,5,43,0,0,598,599,5,70,0,0,599,600,3,106,53,0,600,105,
		1,0,0,0,601,602,6,53,-1,0,602,612,3,108,54,0,603,604,3,114,57,0,604,605,
		3,106,53,6,605,612,1,0,0,0,606,607,5,29,0,0,607,608,3,106,53,0,608,609,
		5,30,0,0,609,612,1,0,0,0,610,612,3,142,71,0,611,601,1,0,0,0,611,603,1,
		0,0,0,611,606,1,0,0,0,611,610,1,0,0,0,612,631,1,0,0,0,613,614,10,7,0,0,
		614,615,5,70,0,0,615,616,3,112,56,0,616,617,5,70,0,0,617,618,3,106,53,
		8,618,630,1,0,0,0,619,621,10,5,0,0,620,622,3,74,37,0,621,620,1,0,0,0,621,
		622,1,0,0,0,622,623,1,0,0,0,623,630,3,40,20,0,624,625,10,4,0,0,625,630,
		3,82,41,0,626,627,10,1,0,0,627,628,5,40,0,0,628,630,3,142,71,0,629,613,
		1,0,0,0,629,619,1,0,0,0,629,624,1,0,0,0,629,626,1,0,0,0,630,633,1,0,0,
		0,631,629,1,0,0,0,631,632,1,0,0,0,632,107,1,0,0,0,633,631,1,0,0,0,634,
		637,3,132,66,0,635,637,3,130,65,0,636,634,1,0,0,0,636,635,1,0,0,0,637,
		109,1,0,0,0,638,639,5,37,0,0,639,640,5,26,0,0,640,641,3,106,53,0,641,111,
		1,0,0,0,642,647,3,116,58,0,643,647,3,120,60,0,644,647,3,124,62,0,645,647,
		3,126,63,0,646,642,1,0,0,0,646,643,1,0,0,0,646,644,1,0,0,0,646,645,1,0,
		0,0,647,113,1,0,0,0,648,652,3,118,59,0,649,652,3,122,61,0,650,652,3,128,
		64,0,651,648,1,0,0,0,651,649,1,0,0,0,651,650,1,0,0,0,652,115,1,0,0,0,653,
		654,7,0,0,0,654,117,1,0,0,0,655,656,5,48,0,0,656,119,1,0,0,0,657,658,7,
		1,0,0,658,121,1,0,0,0,659,660,5,18,0,0,660,123,1,0,0,0,661,662,7,2,0,0,
		662,125,1,0,0,0,663,675,5,54,0,0,664,675,5,55,0,0,665,675,5,57,0,0,666,
		675,5,58,0,0,667,669,5,32,0,0,668,667,1,0,0,0,668,669,1,0,0,0,669,670,
		1,0,0,0,670,671,5,32,0,0,671,675,5,32,0,0,672,675,5,59,0,0,673,675,5,60,
		0,0,674,663,1,0,0,0,674,664,1,0,0,0,674,665,1,0,0,0,674,666,1,0,0,0,674,
		668,1,0,0,0,674,672,1,0,0,0,674,673,1,0,0,0,675,127,1,0,0,0,676,677,5,
		56,0,0,677,129,1,0,0,0,678,679,7,3,0,0,679,131,1,0,0,0,680,683,3,152,76,
		0,681,683,3,150,75,0,682,680,1,0,0,0,682,681,1,0,0,0,683,133,1,0,0,0,684,
		689,3,142,71,0,685,686,5,40,0,0,686,688,3,142,71,0,687,685,1,0,0,0,688,
		691,1,0,0,0,689,687,1,0,0,0,689,690,1,0,0,0,690,135,1,0,0,0,691,689,1,
		0,0,0,692,695,3,138,69,0,693,695,3,140,70,0,694,692,1,0,0,0,694,693,1,
		0,0,0,695,137,1,0,0,0,696,698,3,134,67,0,697,699,5,70,0,0,698,697,1,0,
		0,0,698,699,1,0,0,0,699,709,1,0,0,0,700,702,5,69,0,0,701,703,5,70,0,0,
		702,701,1,0,0,0,703,704,1,0,0,0,704,702,1,0,0,0,704,705,1,0,0,0,705,706,
		1,0,0,0,706,708,3,134,67,0,707,700,1,0,0,0,708,711,1,0,0,0,709,707,1,0,
		0,0,709,710,1,0,0,0,710,139,1,0,0,0,711,709,1,0,0,0,712,716,5,1,0,0,713,
		714,3,134,67,0,714,715,3,156,78,0,715,717,1,0,0,0,716,713,1,0,0,0,717,
		718,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,721,5,
		2,0,0,721,141,1,0,0,0,722,723,5,26,0,0,723,143,1,0,0,0,724,727,3,138,69,
		0,725,727,3,140,70,0,726,724,1,0,0,0,726,725,1,0,0,0,727,145,1,0,0,0,728,
		730,3,142,71,0,729,731,5,70,0,0,730,729,1,0,0,0,730,731,1,0,0,0,731,741,
		1,0,0,0,732,734,5,69,0,0,733,735,5,70,0,0,734,733,1,0,0,0,735,736,1,0,
		0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,740,3,142,71,0,
		739,732,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,741,742,1,0,0,0,742,147,
		1,0,0,0,743,741,1,0,0,0,744,748,5,1,0,0,745,746,3,142,71,0,746,747,3,156,
		78,0,747,749,1,0,0,0,748,745,1,0,0,0,749,750,1,0,0,0,750,748,1,0,0,0,750,
		751,1,0,0,0,751,752,1,0,0,0,752,753,5,2,0,0,753,149,1,0,0,0,754,755,5,
		28,0,0,755,151,1,0,0,0,756,757,7,4,0,0,757,153,1,0,0,0,758,760,5,70,0,
		0,759,758,1,0,0,0,760,763,1,0,0,0,761,759,1,0,0,0,761,762,1,0,0,0,762,
		764,1,0,0,0,763,761,1,0,0,0,764,765,5,3,0,0,765,766,5,71,0,0,766,155,1,
		0,0,0,767,769,5,70,0,0,768,767,1,0,0,0,769,772,1,0,0,0,770,768,1,0,0,0,
		770,771,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,773,775,5,3,0,0,774,773,
		1,0,0,0,774,775,1,0,0,0,775,777,1,0,0,0,776,778,5,71,0,0,777,776,1,0,0,
		0,778,779,1,0,0,0,779,777,1,0,0,0,779,780,1,0,0,0,780,157,1,0,0,0,781,
		783,5,70,0,0,782,781,1,0,0,0,783,784,1,0,0,0,784,782,1,0,0,0,784,785,1,
		0,0,0,785,788,1,0,0,0,786,788,3,156,78,0,787,782,1,0,0,0,787,786,1,0,0,
		0,788,159,1,0,0,0,85,161,166,168,174,176,194,196,201,206,210,221,234,244,
		249,263,269,285,295,302,310,320,324,328,338,347,354,360,365,375,377,384,
		393,398,402,409,416,420,427,437,444,452,459,464,467,473,476,484,489,499,
		508,514,520,529,540,555,567,576,586,611,621,629,631,636,646,651,668,674,
		682,689,694,698,704,709,718,726,730,736,741,750,761,770,774,779,784,787
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Maja.Compiler.Parser
