//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\My\MyProjects\Zsharp\src2\Maja\Maja.Compiler\MajaParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Maja.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class MajaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Indent=1, Dedent=2, CmmentStart=3, CommentWarning=4, Comment=5, Mod=6, 
		Pub=7, Use=8, Self=9, Ret=10, Brk=11, Cnt=12, Loop=13, If=14, Else=15, 
		Elif=16, True=17, False=18, In=19, Not=20, And=21, Or=22, NumberBin=23, 
		NumberOct=24, NumberDec=25, NumberDecPrefix=26, NumberHex=27, Identifier=28, 
		Character=29, String=30, ParenOpen=31, ParenClose=32, AngleOpen=33, AngleClose=34, 
		BracketOpen=35, BracketClose=36, Hash=37, Colon=38, Dot=39, Range=40, 
		Spread=41, Eq=42, Neq=43, GtEq=44, LtEq=45, Plus=46, Minus=47, Multiply=48, 
		Power=49, Divide=50, Root=51, Modulo=52, BitAnd=53, BitOr=54, BitNot=55, 
		BitXor_Imm=56, BitShiftL=57, BitRollL=58, BitRollR=59, Question=60, Dollar=61, 
		At=62, Error=63, StrQuote=64, CharQuote=65, BackTick=66, Discard=67, Comma=68, 
		Sp=69, Eol=70;
	public const int
		RULE_compilationUnit = 0, RULE_pubDecl = 1, RULE_useDecl = 2, RULE_codeBlock = 3, 
		RULE_membersDecl = 4, RULE_statement = 5, RULE_statementFlow = 6, RULE_statementRet = 7, 
		RULE_statementExpression = 8, RULE_functionDecl = 9, RULE_functionDeclLocal = 10, 
		RULE_parameterList = 11, RULE_parameter = 12, RULE_argumentList = 13, 
		RULE_argument = 14, RULE_typeDecl = 15, RULE_typeDeclMembers = 16, RULE_type = 17, 
		RULE_typeParameterList = 18, RULE_typeParameter = 19, RULE_parameterGeneric = 20, 
		RULE_parameterTemplate = 21, RULE_parameterValue = 22, RULE_typeArgumentList = 23, 
		RULE_typeArgument = 24, RULE_memberEnum = 25, RULE_memberField = 26, RULE_memberRule = 27, 
		RULE_variableDecl = 28, RULE_variableDeclTyped = 29, RULE_variableDeclInferred = 30, 
		RULE_variableAssignment = 31, RULE_expression = 32, RULE_expressionConstant = 33, 
		RULE_expressionRule = 34, RULE_expressionOperatorBinary = 35, RULE_expressionOperatorUnaryPrefix = 36, 
		RULE_expressionOperatorArithmetic = 37, RULE_expressionOperatorArithmeticUnaryPrefix = 38, 
		RULE_expressionOperatorLogic = 39, RULE_expressionOperatorLogicUnaryPrefix = 40, 
		RULE_expressionOperatorComparison = 41, RULE_expressionOperatorBits = 42, 
		RULE_expressionOperatorBitsUnaryPrefix = 43, RULE_expressionOperatorAssignment = 44, 
		RULE_expressionLiteralBool = 45, RULE_expressionLiteral = 46, RULE_nameQualified = 47, 
		RULE_nameQualifiedList = 48, RULE_nameQualifiedListComma = 49, RULE_nameQualifiedListIndent = 50, 
		RULE_nameIdentifier = 51, RULE_nameIdentifierList = 52, RULE_nameIdentifierListComma = 53, 
		RULE_nameIdentifierListIndent = 54, RULE_string = 55, RULE_number = 56, 
		RULE_newline = 57, RULE_freeSpace = 58;
	public static readonly string[] ruleNames = {
		"compilationUnit", "pubDecl", "useDecl", "codeBlock", "membersDecl", "statement", 
		"statementFlow", "statementRet", "statementExpression", "functionDecl", 
		"functionDeclLocal", "parameterList", "parameter", "argumentList", "argument", 
		"typeDecl", "typeDeclMembers", "type", "typeParameterList", "typeParameter", 
		"parameterGeneric", "parameterTemplate", "parameterValue", "typeArgumentList", 
		"typeArgument", "memberEnum", "memberField", "memberRule", "variableDecl", 
		"variableDeclTyped", "variableDeclInferred", "variableAssignment", "expression", 
		"expressionConstant", "expressionRule", "expressionOperatorBinary", "expressionOperatorUnaryPrefix", 
		"expressionOperatorArithmetic", "expressionOperatorArithmeticUnaryPrefix", 
		"expressionOperatorLogic", "expressionOperatorLogicUnaryPrefix", "expressionOperatorComparison", 
		"expressionOperatorBits", "expressionOperatorBitsUnaryPrefix", "expressionOperatorAssignment", 
		"expressionLiteralBool", "expressionLiteral", "nameQualified", "nameQualifiedList", 
		"nameQualifiedListComma", "nameQualifiedListIndent", "nameIdentifier", 
		"nameIdentifierList", "nameIdentifierListComma", "nameIdentifierListIndent", 
		"string", "number", "newline", "freeSpace"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'#_'", "'##'", null, "'mod'", "'pub'", "'use'", "'self'", 
		"'ret'", "'brk'", "'cnt'", "'loop'", "'if'", "'else'", "'elif'", "'true'", 
		"'false'", "'in'", "'not'", "'and'", "'or'", null, null, null, null, null, 
		null, null, null, "'('", "')'", "'<'", "'>'", "'['", "']'", "'#'", "':'", 
		"'.'", "'..'", "'...'", "'='", "'<>'", "'>='", "'=<'", "'+'", "'-'", "'*'", 
		"'**'", "'/'", "'//'", "'%'", "'&'", "'|'", "'~'", "'^'", "'<<'", "'|<'", 
		"'>|'", "'?'", "'$'", "'@'", "'!'", "'\"'", "'''", "'`'", "'_'", "','", 
		"' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Indent", "Dedent", "CmmentStart", "CommentWarning", "Comment", 
		"Mod", "Pub", "Use", "Self", "Ret", "Brk", "Cnt", "Loop", "If", "Else", 
		"Elif", "True", "False", "In", "Not", "And", "Or", "NumberBin", "NumberOct", 
		"NumberDec", "NumberDecPrefix", "NumberHex", "Identifier", "Character", 
		"String", "ParenOpen", "ParenClose", "AngleOpen", "AngleClose", "BracketOpen", 
		"BracketClose", "Hash", "Colon", "Dot", "Range", "Spread", "Eq", "Neq", 
		"GtEq", "LtEq", "Plus", "Minus", "Multiply", "Power", "Divide", "Root", 
		"Modulo", "BitAnd", "BitOr", "BitNot", "BitXor_Imm", "BitShiftL", "BitRollL", 
		"BitRollR", "Question", "Dollar", "At", "Error", "StrQuote", "CharQuote", 
		"BackTick", "Discard", "Comma", "Sp", "Eol"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MajaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MajaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MajaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MajaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UseDeclContext[] useDecl() {
			return GetRuleContexts<UseDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDeclContext useDecl(int i) {
			return GetRuleContext<UseDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PubDeclContext[] pubDecl() {
			return GetRuleContexts<PubDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PubDeclContext pubDecl(int i) {
			return GetRuleContext<PubDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MembersDeclContext[] membersDecl() {
			return GetRuleContexts<MembersDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MembersDeclContext membersDecl(int i) {
			return GetRuleContext<MembersDeclContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 121;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Use:
						{
						State = 118;
						useDecl();
						}
						break;
					case Pub:
						{
						State = 119;
						pubDecl();
						}
						break;
					case Comment:
					case Sp:
					case Eol:
						{
						State = 120;
						newline();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 125;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comment || _la==Identifier || _la==Sp || _la==Eol) {
				{
				State = 128;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 126;
					membersDecl();
					}
					break;
				case Comment:
				case Sp:
				case Eol:
					{
					State = 127;
					newline();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PubDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pub() { return GetToken(MajaParser.Pub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListContext nameQualifiedList() {
			return GetRuleContext<NameQualifiedListContext>(0);
		}
		public PubDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pubDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPubDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PubDeclContext pubDecl() {
		PubDeclContext _localctx = new PubDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_pubDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(Pub);
			State = 134;
			freeSpace();
			State = 135;
			nameQualifiedList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Use() { return GetToken(MajaParser.Use, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified() {
			return GetRuleContext<NameQualifiedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public UseDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseDeclContext useDecl() {
		UseDeclContext _localctx = new UseDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_useDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(Use);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 138;
				Match(Sp);
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Sp );
			State = 143;
			nameQualified();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MembersDeclContext[] membersDecl() {
			return GetRuleContexts<MembersDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MembersDeclContext membersDecl(int i) {
			return GetRuleContext<MembersDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_codeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 148;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 145;
					statement();
					}
					break;
				case 2:
					{
					State = 146;
					membersDecl();
					}
					break;
				case 3:
					{
					State = 147;
					newline();
					}
					break;
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Comment) | (1L << Ret) | (1L << True) | (1L << False) | (1L << Not) | (1L << NumberBin) | (1L << NumberOct) | (1L << NumberDec) | (1L << NumberDecPrefix) | (1L << NumberHex) | (1L << Identifier) | (1L << Character) | (1L << String) | (1L << ParenOpen) | (1L << Minus) | (1L << BitNot))) != 0) || _la==Sp || _la==Eol );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MembersDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext typeDecl() {
			return GetRuleContext<TypeDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclContext variableDecl() {
			return GetRuleContext<VariableDeclContext>(0);
		}
		public MembersDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_membersDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMembersDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MembersDeclContext membersDecl() {
		MembersDeclContext _localctx = new MembersDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_membersDecl);
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				functionDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				typeDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 154;
				variableDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementFlowContext statementFlow() {
			return GetRuleContext<StatementFlowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ret:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				statementFlow();
				}
				break;
			case True:
			case False:
			case Not:
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Identifier:
			case Character:
			case String:
			case ParenOpen:
			case Minus:
			case BitNot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				statementExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementRetContext statementRet() {
			return GetRuleContext<StatementRetContext>(0);
		}
		public StatementFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFlow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementFlowContext statementFlow() {
		StatementFlowContext _localctx = new StatementFlowContext(Context, State);
		EnterRule(_localctx, 12, RULE_statementFlow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			statementRet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementRetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ret() { return GetToken(MajaParser.Ret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementRetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementRet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementRet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementRetContext statementRet() {
		StatementRetContext _localctx = new StatementRetContext(Context, State);
		EnterRule(_localctx, 14, RULE_statementRet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(Ret);
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 164;
				Match(Sp);
				State = 165;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_statementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(MajaParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(MajaParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			nameIdentifier();
			State = 171;
			Match(Colon);
			State = 172;
			Match(Sp);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 173;
				typeParameterList();
				}
			}

			State = 176;
			parameterList();
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 177;
				Match(Colon);
				State = 178;
				Match(Sp);
				State = 179;
				type();
				}
			}

			State = 182;
			newline();
			State = 183;
			Match(Indent);
			State = 184;
			codeBlock();
			State = 185;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclLocalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		public FunctionDeclLocalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclLocal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclLocal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclLocalContext functionDeclLocal() {
		FunctionDeclLocalContext _localctx = new FunctionDeclLocalContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionDeclLocal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(Indent);
			State = 188;
			functionDecl();
			State = 189;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(ParenOpen);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 192;
				parameter();
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 193;
					Match(Comma);
					State = 194;
					Match(Sp);
					State = 195;
					parameter();
					}
					}
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 203;
			Match(ParenClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			nameIdentifier();
			State = 206;
			Match(Colon);
			State = 207;
			Match(Sp);
			State = 208;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 26, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(ParenOpen);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << True) | (1L << False) | (1L << Not) | (1L << NumberBin) | (1L << NumberOct) | (1L << NumberDec) | (1L << NumberDecPrefix) | (1L << NumberHex) | (1L << Identifier) | (1L << Character) | (1L << String) | (1L << ParenOpen) | (1L << Minus) | (1L << BitNot))) != 0)) {
				{
				State = 211;
				argument();
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 212;
					Match(Comma);
					State = 213;
					Match(Sp);
					State = 214;
					argument();
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 222;
			Match(ParenClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 28, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 224;
				nameIdentifier();
				State = 225;
				Match(Eq);
				}
				break;
			}
			State = 229;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Discard() { return GetToken(MajaParser.Discard, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclMembersContext typeDeclMembers() {
			return GetRuleContext<TypeDeclMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			nameIdentifier();
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 232;
				typeParameterList();
				}
			}

			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 235;
				Match(Colon);
				State = 236;
				Match(Sp);
				State = 237;
				type();
				}
			}

			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Discard:
				{
				State = 240;
				Match(Discard);
				State = 241;
				newline();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 242;
				newline();
				State = 243;
				Match(Indent);
				State = 244;
				typeDeclMembers();
				State = 245;
				Match(Dedent);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumContext[] memberEnum() {
			return GetRuleContexts<MemberEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumContext memberEnum(int i) {
			return GetRuleContext<MemberEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberFieldContext[] memberField() {
			return GetRuleContexts<MemberFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberFieldContext memberField(int i) {
			return GetRuleContext<MemberFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberRuleContext[] memberRule() {
			return GetRuleContexts<MemberRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberRuleContext memberRule(int i) {
			return GetRuleContext<MemberRuleContext>(i);
		}
		public TypeDeclMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclMembers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclMembers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclMembersContext typeDeclMembers() {
		TypeDeclMembersContext _localctx = new TypeDeclMembersContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeDeclMembers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 252;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 249;
					memberEnum();
					}
					break;
				case 2:
					{
					State = 250;
					memberField();
					}
					break;
				case 3:
					{
					State = 251;
					memberRule();
					}
					break;
				}
				State = 254;
				newline();
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier || _la==Hash );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			nameIdentifier();
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 261;
				typeArgumentList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(AngleOpen);
			State = 265;
			typeParameter();
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 266;
				Match(Comma);
				State = 267;
				Match(Sp);
				State = 268;
				typeParameter();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274;
			Match(AngleClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterGenericContext parameterGeneric() {
			return GetRuleContext<ParameterGenericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterTemplateContext parameterTemplate() {
			return GetRuleContext<ParameterTemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterValueContext parameterValue() {
			return GetRuleContext<ParameterValueContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 38, RULE_typeParameter);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				parameterGeneric();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				parameterTemplate();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278;
				parameterValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public ParameterGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterGenericContext parameterGeneric() {
		ParameterGenericContext _localctx = new ParameterGenericContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameterGeneric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterTemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public ParameterTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterTemplate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterTemplateContext parameterTemplate() {
		ParameterTemplateContext _localctx = new ParameterTemplateContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameterTemplate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(Hash);
			State = 284;
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterValueContext parameterValue() {
		ParameterValueContext _localctx = new ParameterValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 46, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(AngleOpen);
			State = 289;
			typeArgument();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 290;
				Match(Comma);
				State = 291;
				Match(Sp);
				State = 292;
				typeArgument();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 298;
			Match(AngleClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 48, RULE_typeArgument);
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300;
				nameIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionConstantContext expressionConstant() {
			return GetRuleContext<ExpressionConstantContext>(0);
		}
		public MemberEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberEnumContext memberEnum() {
		MemberEnumContext _localctx = new MemberEnumContext(Context, State);
		EnterRule(_localctx, 50, RULE_memberEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			nameIdentifier();
			State = 309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 305;
				Match(Sp);
				State = 306;
				Match(Eq);
				State = 307;
				Match(Sp);
				State = 308;
				expressionConstant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MemberFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberFieldContext memberField() {
		MemberFieldContext _localctx = new MemberFieldContext(Context, State);
		EnterRule(_localctx, 52, RULE_memberField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			nameIdentifier();
			State = 312;
			Match(Colon);
			State = 313;
			Match(Sp);
			State = 314;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionRuleContext expressionRule() {
			return GetRuleContext<ExpressionRuleContext>(0);
		}
		public MemberRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberRuleContext memberRule() {
		MemberRuleContext _localctx = new MemberRuleContext(Context, State);
		EnterRule(_localctx, 54, RULE_memberRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(Hash);
			State = 317;
			nameIdentifier();
			State = 318;
			Match(Sp);
			State = 319;
			expressionRule();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclTypedContext variableDeclTyped() {
			return GetRuleContext<VariableDeclTypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclInferredContext variableDeclInferred() {
			return GetRuleContext<VariableDeclInferredContext>(0);
		}
		public VariableDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclContext variableDecl() {
		VariableDeclContext _localctx = new VariableDeclContext(Context, State);
		EnterRule(_localctx, 56, RULE_variableDecl);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321;
				variableDeclTyped();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322;
				variableDeclInferred();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclTypedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclTypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclTyped; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclTyped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclTypedContext variableDeclTyped() {
		VariableDeclTypedContext _localctx = new VariableDeclTypedContext(Context, State);
		EnterRule(_localctx, 58, RULE_variableDeclTyped);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			nameIdentifier();
			State = 326;
			Match(Colon);
			State = 327;
			Match(Sp);
			State = 328;
			type();
			State = 333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 329;
				Match(Sp);
				State = 330;
				Match(Eq);
				State = 331;
				Match(Sp);
				State = 332;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclInferredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclInferredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclInferred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclInferred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclInferredContext variableDeclInferred() {
		VariableDeclInferredContext _localctx = new VariableDeclInferredContext(Context, State);
		EnterRule(_localctx, 60, RULE_variableDeclInferred);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			nameIdentifier();
			State = 336;
			Match(Sp);
			State = 337;
			Match(Colon);
			State = 338;
			Match(Eq);
			State = 339;
			Match(Sp);
			State = 340;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 62, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			nameIdentifier();
			State = 343;
			Match(Sp);
			State = 344;
			Match(Eq);
			State = 345;
			Match(Sp);
			State = 346;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionIdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public ExpressionIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInvocationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ExpressionInvocationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryPrefixContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorUnaryPrefixContext expressionOperatorUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionUnaryPrefixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBinaryContext expressionOperatorBinary() {
			return GetRuleContext<ExpressionOperatorBinaryContext>(0);
		}
		public ExpressionBinaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionConstContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionConstantContext expressionConstant() {
			return GetRuleContext<ExpressionConstantContext>(0);
		}
		public ExpressionConstContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionConst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionPrecedenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		public ExpressionPrecedenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionPrecedence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
			case String:
				{
				_localctx = new ExpressionConstContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 349;
				expressionConstant();
				}
				break;
			case Not:
			case Minus:
			case BitNot:
				{
				_localctx = new ExpressionUnaryPrefixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 350;
				expressionOperatorUnaryPrefix();
				State = 351;
				expression(4);
				}
				break;
			case ParenOpen:
				{
				_localctx = new ExpressionPrecedenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 353;
				Match(ParenOpen);
				State = 354;
				expression(0);
				State = 355;
				Match(ParenClose);
				}
				break;
			case Identifier:
				{
				_localctx = new ExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 357;
				nameIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 370;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 368;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 360;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 361;
						Match(Sp);
						State = 362;
						expressionOperatorBinary();
						State = 363;
						Match(Sp);
						State = 364;
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionInvocationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 366;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 367;
						argumentList();
						}
						break;
					}
					} 
				}
				State = 372;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLiteralContext expressionLiteral() {
			return GetRuleContext<ExpressionLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLiteralBoolContext expressionLiteralBool() {
			return GetRuleContext<ExpressionLiteralBoolContext>(0);
		}
		public ExpressionConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionConstantContext expressionConstant() {
		ExpressionConstantContext _localctx = new ExpressionConstantContext(Context, State);
		EnterRule(_localctx, 66, RULE_expressionConstant);
		try {
			State = 375;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
			case String:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373;
				expressionLiteral();
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374;
				expressionLiteralBool();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionRuleContext : ParserRuleContext {
		public ExpressionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionRuleContext expressionRule() {
		ExpressionRuleContext _localctx = new ExpressionRuleContext(Context, State);
		EnterRule(_localctx, 68, RULE_expressionRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorArithmeticContext expressionOperatorArithmetic() {
			return GetRuleContext<ExpressionOperatorArithmeticContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorLogicContext expressionOperatorLogic() {
			return GetRuleContext<ExpressionOperatorLogicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorComparisonContext expressionOperatorComparison() {
			return GetRuleContext<ExpressionOperatorComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBitsContext expressionOperatorBits() {
			return GetRuleContext<ExpressionOperatorBitsContext>(0);
		}
		public ExpressionOperatorBinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBinary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBinaryContext expressionOperatorBinary() {
		ExpressionOperatorBinaryContext _localctx = new ExpressionOperatorBinaryContext(Context, State);
		EnterRule(_localctx, 70, RULE_expressionOperatorBinary);
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379;
				expressionOperatorArithmetic();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380;
				expressionOperatorLogic();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 381;
				expressionOperatorComparison();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 382;
				expressionOperatorBits();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorArithmeticUnaryPrefixContext expressionOperatorArithmeticUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorArithmeticUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorLogicUnaryPrefixContext expressionOperatorLogicUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorLogicUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBitsUnaryPrefixContext expressionOperatorBitsUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorBitsUnaryPrefixContext>(0);
		}
		public ExpressionOperatorUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorUnaryPrefixContext expressionOperatorUnaryPrefix() {
		ExpressionOperatorUnaryPrefixContext _localctx = new ExpressionOperatorUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 72, RULE_expressionOperatorUnaryPrefix);
		try {
			State = 388;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Minus:
				EnterOuterAlt(_localctx, 1);
				{
				State = 385;
				expressionOperatorArithmeticUnaryPrefix();
				}
				break;
			case Not:
				EnterOuterAlt(_localctx, 2);
				{
				State = 386;
				expressionOperatorLogicUnaryPrefix();
				}
				break;
			case BitNot:
				EnterOuterAlt(_localctx, 3);
				{
				State = 387;
				expressionOperatorBitsUnaryPrefix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorArithmeticContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MajaParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MajaParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MajaParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MajaParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(MajaParser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MajaParser.Power, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Root() { return GetToken(MajaParser.Root, 0); }
		public ExpressionOperatorArithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorArithmetic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorArithmeticContext expressionOperatorArithmetic() {
		ExpressionOperatorArithmeticContext _localctx = new ExpressionOperatorArithmeticContext(Context, State);
		EnterRule(_localctx, 74, RULE_expressionOperatorArithmetic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Mod) | (1L << Plus) | (1L << Minus) | (1L << Multiply) | (1L << Power) | (1L << Divide) | (1L << Root))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorArithmeticUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MajaParser.Minus, 0); }
		public ExpressionOperatorArithmeticUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorArithmeticUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorArithmeticUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorArithmeticUnaryPrefixContext expressionOperatorArithmeticUnaryPrefix() {
		ExpressionOperatorArithmeticUnaryPrefixContext _localctx = new ExpressionOperatorArithmeticUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 76, RULE_expressionOperatorArithmeticUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(Minus);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorLogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MajaParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MajaParser.Or, 0); }
		public ExpressionOperatorLogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorLogic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorLogicContext expressionOperatorLogic() {
		ExpressionOperatorLogicContext _localctx = new ExpressionOperatorLogicContext(Context, State);
		EnterRule(_localctx, 78, RULE_expressionOperatorLogic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Or) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorLogicUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MajaParser.Not, 0); }
		public ExpressionOperatorLogicUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorLogicUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorLogicUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorLogicUnaryPrefixContext expressionOperatorLogicUnaryPrefix() {
		ExpressionOperatorLogicUnaryPrefixContext _localctx = new ExpressionOperatorLogicUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 80, RULE_expressionOperatorLogicUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(Not);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Neq() { return GetToken(MajaParser.Neq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GtEq() { return GetToken(MajaParser.GtEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LtEq() { return GetToken(MajaParser.LtEq, 0); }
		public ExpressionOperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorComparisonContext expressionOperatorComparison() {
		ExpressionOperatorComparisonContext _localctx = new ExpressionOperatorComparisonContext(Context, State);
		EnterRule(_localctx, 82, RULE_expressionOperatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AngleOpen) | (1L << AngleClose) | (1L << Eq) | (1L << Neq) | (1L << GtEq) | (1L << LtEq))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MajaParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MajaParser.BitOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXor_Imm() { return GetToken(MajaParser.BitXor_Imm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitShiftL() { return GetToken(MajaParser.BitShiftL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AngleClose() { return GetTokens(MajaParser.AngleClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose(int i) {
			return GetToken(MajaParser.AngleClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MajaParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitRollL() { return GetToken(MajaParser.BitRollL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitRollR() { return GetToken(MajaParser.BitRollR, 0); }
		public ExpressionOperatorBitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBitsContext expressionOperatorBits() {
		ExpressionOperatorBitsContext _localctx = new ExpressionOperatorBitsContext(Context, State);
		EnterRule(_localctx, 84, RULE_expressionOperatorBits);
		int _la;
		try {
			State = 411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BitAnd:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				Match(BitAnd);
				}
				break;
			case BitOr:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401;
				Match(BitOr);
				}
				break;
			case BitXor_Imm:
				EnterOuterAlt(_localctx, 3);
				{
				State = 402;
				Match(BitXor_Imm);
				}
				break;
			case BitShiftL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 403;
				Match(BitShiftL);
				}
				break;
			case AngleClose:
			case Minus:
				EnterOuterAlt(_localctx, 5);
				{
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Minus) {
					{
					State = 404;
					Match(Minus);
					}
				}

				State = 407;
				Match(AngleClose);
				State = 408;
				Match(AngleClose);
				}
				break;
			case BitRollL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 409;
				Match(BitRollL);
				}
				break;
			case BitRollR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 410;
				Match(BitRollR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBitsUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MajaParser.BitNot, 0); }
		public ExpressionOperatorBitsUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBitsUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBitsUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBitsUnaryPrefixContext expressionOperatorBitsUnaryPrefix() {
		ExpressionOperatorBitsUnaryPrefixContext _localctx = new ExpressionOperatorBitsUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 86, RULE_expressionOperatorBitsUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(BitNot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		public ExpressionOperatorAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorAssignmentContext expressionOperatorAssignment() {
		ExpressionOperatorAssignmentContext _localctx = new ExpressionOperatorAssignmentContext(Context, State);
		EnterRule(_localctx, 88, RULE_expressionOperatorAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(Eq);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLiteralBoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MajaParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MajaParser.False, 0); }
		public ExpressionLiteralBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLiteralBool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteralBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLiteralBoolContext expressionLiteralBool() {
		ExpressionLiteralBoolContext _localctx = new ExpressionLiteralBoolContext(Context, State);
		EnterRule(_localctx, 90, RULE_expressionLiteralBool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExpressionLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLiteralContext expressionLiteral() {
		ExpressionLiteralContext _localctx = new ExpressionLiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_expressionLiteral);
		try {
			State = 421;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
				EnterOuterAlt(_localctx, 1);
				{
				State = 419;
				number();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 420;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MajaParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MajaParser.Dot, i);
		}
		public NameQualifiedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualified; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualified(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedContext nameQualified() {
		NameQualifiedContext _localctx = new NameQualifiedContext(Context, State);
		EnterRule(_localctx, 94, RULE_nameQualified);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			nameIdentifier();
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 424;
				Match(Dot);
				State = 425;
				nameIdentifier();
				}
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Dot );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListCommaContext nameQualifiedListComma() {
			return GetRuleContext<NameQualifiedListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListIndentContext nameQualifiedListIndent() {
			return GetRuleContext<NameQualifiedListIndentContext>(0);
		}
		public NameQualifiedListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListContext nameQualifiedList() {
		NameQualifiedListContext _localctx = new NameQualifiedListContext(Context, State);
		EnterRule(_localctx, 96, RULE_nameQualifiedList);
		try {
			State = 432;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430;
				nameQualifiedListComma();
				}
				break;
			case Indent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431;
				nameQualifiedListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext[] nameQualified() {
			return GetRuleContexts<NameQualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified(int i) {
			return GetRuleContext<NameQualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		public NameQualifiedListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListCommaContext nameQualifiedListComma() {
		NameQualifiedListCommaContext _localctx = new NameQualifiedListCommaContext(Context, State);
		EnterRule(_localctx, 98, RULE_nameQualifiedListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			nameQualified();
			State = 436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 435;
				Match(Sp);
				}
				break;
			}
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 438;
				Match(Comma);
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 439;
					Match(Sp);
					}
					}
					State = 442;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				State = 444;
				nameQualified();
				}
				}
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext[] nameQualified() {
			return GetRuleContexts<NameQualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified(int i) {
			return GetRuleContext<NameQualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NameQualifiedListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListIndentContext nameQualifiedListIndent() {
		NameQualifiedListIndentContext _localctx = new NameQualifiedListIndentContext(Context, State);
		EnterRule(_localctx, 100, RULE_nameQualifiedListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(Indent);
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 451;
				nameQualified();
				State = 452;
				newline();
				}
				}
				State = 456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 458;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MajaParser.Identifier, 0); }
		public NameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierContext nameIdentifier() {
		NameIdentifierContext _localctx = new NameIdentifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_nameIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListCommaContext nameQualifiedListComma() {
			return GetRuleContext<NameQualifiedListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListIndentContext nameQualifiedListIndent() {
			return GetRuleContext<NameQualifiedListIndentContext>(0);
		}
		public NameIdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListContext nameIdentifierList() {
		NameIdentifierListContext _localctx = new NameIdentifierListContext(Context, State);
		EnterRule(_localctx, 104, RULE_nameIdentifierList);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 462;
				nameQualifiedListComma();
				}
				break;
			case Indent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463;
				nameQualifiedListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		public NameIdentifierListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListCommaContext nameIdentifierListComma() {
		NameIdentifierListCommaContext _localctx = new NameIdentifierListCommaContext(Context, State);
		EnterRule(_localctx, 106, RULE_nameIdentifierListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			nameIdentifier();
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 467;
				Match(Sp);
				}
			}

			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 470;
				Match(Comma);
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 471;
					Match(Sp);
					}
					}
					State = 474;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				State = 476;
				nameIdentifier();
				}
				}
				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NameIdentifierListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListIndentContext nameIdentifierListIndent() {
		NameIdentifierListIndentContext _localctx = new NameIdentifierListIndentContext(Context, State);
		EnterRule(_localctx, 108, RULE_nameIdentifierListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(Indent);
			State = 486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 483;
				nameIdentifier();
				State = 484;
				newline();
				}
				}
				State = 488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 490;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(MajaParser.String, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 110, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberBin() { return GetToken(MajaParser.NumberBin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDec() { return GetToken(MajaParser.NumberDec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDecPrefix() { return GetToken(MajaParser.NumberDecPrefix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberHex() { return GetToken(MajaParser.NumberHex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberOct() { return GetToken(MajaParser.NumberOct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character() { return GetToken(MajaParser.Character, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 112, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NumberBin) | (1L << NumberOct) | (1L << NumberDec) | (1L << NumberDecPrefix) | (1L << NumberHex) | (1L << Character))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eol() { return GetToken(MajaParser.Eol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(MajaParser.Comment, 0); }
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 114, RULE_newline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sp) {
				{
				{
				State = 496;
				Match(Sp);
				}
				}
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comment) {
				{
				State = 502;
				Match(Comment);
				}
			}

			State = 505;
			Match(Eol);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeSpaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eol() { return GetToken(MajaParser.Eol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(MajaParser.Comment, 0); }
		public FreeSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeSpace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreeSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeSpaceContext freeSpace() {
		FreeSpaceContext _localctx = new FreeSpaceContext(Context, State);
		EnterRule(_localctx, 116, RULE_freeSpace);
		int _la;
		try {
			State = 516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Sp:
				EnterOuterAlt(_localctx, 1);
				{
				State = 508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 507;
					Match(Sp);
					}
					}
					State = 510;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				}
				break;
			case Comment:
			case Eol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comment) {
					{
					State = 512;
					Match(Comment);
					}
				}

				State = 515;
				Match(Eol);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'H', '\x209', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '|', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x7F', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\x83', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x86', '\v', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x6', '\x4', '\x8E', '\n', '\x4', '\r', '\x4', '\xE', 
		'\x4', '\x8F', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x6', '\x5', '\x97', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 
		'\x98', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x9E', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xA2', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\xA9', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xB1', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xB7', '\n', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xC7', '\n', 
		'\r', '\f', '\r', '\xE', '\r', '\xCA', '\v', '\r', '\x5', '\r', '\xCC', 
		'\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xDA', '\n', '\xF', '\f', 
		'\xF', '\xE', '\xF', '\xDD', '\v', '\xF', '\x5', '\xF', '\xDF', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xE6', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xEC', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xF1', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xFA', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xFF', '\n', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x6', '\x12', '\x103', '\n', '\x12', '\r', 
		'\x12', '\xE', '\x12', '\x104', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x109', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\a', '\x14', '\x110', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\x113', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x11A', '\n', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x128', '\n', '\x19', '\f', 
		'\x19', '\xE', '\x19', '\x12B', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x131', '\n', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x138', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x146', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x150', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x5', '\"', '\x169', '\n', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\a', '\"', '\x173', '\n', '\"', '\f', '\"', '\xE', 
		'\"', '\x176', '\v', '\"', '\x3', '#', '\x3', '#', '\x5', '#', '\x17A', 
		'\n', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x5', '%', '\x182', '\n', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x5', '&', '\x187', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', 
		'+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x5', ',', '\x198', '\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x5', ',', '\x19E', '\n', ',', '\x3', '-', '\x3', '-', '\x3', 
		'.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x5', '\x30', '\x1A8', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x6', '\x31', '\x1AD', '\n', '\x31', '\r', '\x31', '\xE', '\x31', 
		'\x1AE', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x1B3', '\n', '\x32', 
		'\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x1B7', '\n', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x6', '\x33', '\x1BB', '\n', '\x33', '\r', '\x33', 
		'\xE', '\x33', '\x1BC', '\x3', '\x33', '\a', '\x33', '\x1C0', '\n', '\x33', 
		'\f', '\x33', '\xE', '\x33', '\x1C3', '\v', '\x33', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x6', '\x34', '\x1C9', '\n', '\x34', 
		'\r', '\x34', '\xE', '\x34', '\x1CA', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x1D3', 
		'\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x1D7', '\n', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x6', '\x37', '\x1DB', '\n', '\x37', 
		'\r', '\x37', '\xE', '\x37', '\x1DC', '\x3', '\x37', '\a', '\x37', '\x1E0', 
		'\n', '\x37', '\f', '\x37', '\xE', '\x37', '\x1E3', '\v', '\x37', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x6', '\x38', '\x1E9', 
		'\n', '\x38', '\r', '\x38', '\xE', '\x38', '\x1EA', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ';', 
		'\a', ';', '\x1F4', '\n', ';', '\f', ';', '\xE', ';', '\x1F7', '\v', ';', 
		'\x3', ';', '\x5', ';', '\x1FA', '\n', ';', '\x3', ';', '\x3', ';', '\x3', 
		'<', '\x6', '<', '\x1FF', '\n', '<', '\r', '<', '\xE', '<', '\x200', '\x3', 
		'<', '\x5', '<', '\x204', '\n', '<', '\x3', '<', '\x5', '<', '\x207', 
		'\n', '<', '\x3', '<', '\x2', '\x3', '\x42', '=', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', '\x2', '\a', '\x4', '\x2', 
		'\b', '\b', '\x30', '\x35', '\x3', '\x2', '\x17', '\x18', '\x4', '\x2', 
		'#', '$', ',', '/', '\x3', '\x2', '\x13', '\x14', '\x4', '\x2', '\x19', 
		'\x1D', '\x1F', '\x1F', '\x2', '\x213', '\x2', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x87', '\x3', '\x2', '\x2', '\x2', '\x6', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x96', '\x3', '\x2', '\x2', '\x2', '\n', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x10', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xAA', '\x3', '\x2', '\x2', '\x2', '\x14', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xE9', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '$', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x10A', '\x3', '\x2', '\x2', '\x2', '(', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x11B', '\x3', '\x2', '\x2', '\x2', ',', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x122', '\x3', '\x2', '\x2', '\x2', '\x32', '\x130', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x132', '\x3', '\x2', '\x2', '\x2', '\x36', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		':', '\x145', '\x3', '\x2', '\x2', '\x2', '<', '\x147', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x151', '\x3', '\x2', '\x2', '\x2', '@', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x179', '\x3', '\x2', '\x2', '\x2', '\x46', '\x17B', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x181', '\x3', '\x2', '\x2', '\x2', 'J', '\x186', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x18A', '\x3', '\x2', '\x2', '\x2', 'P', '\x18C', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x18E', '\x3', '\x2', '\x2', '\x2', 'T', '\x190', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x19F', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1A1', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x1A3', '\x3', '\x2', '\x2', '\x2', '^', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x64', '\x1B4', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x1C4', '\x3', '\x2', '\x2', '\x2', 'h', '\x1CE', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x1D2', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x1D4', '\x3', '\x2', '\x2', '\x2', 'n', '\x1E4', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x1EE', '\x3', '\x2', '\x2', '\x2', 'r', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x1F5', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x206', '\x3', '\x2', '\x2', '\x2', 'x', '|', '\x5', '\x6', '\x4', 
		'\x2', 'y', '|', '\x5', '\x4', '\x3', '\x2', 'z', '|', '\x5', 't', ';', 
		'\x2', '{', 'x', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', 
		'\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x84', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x83', '\x5', '\n', '\x6', '\x2', '\x81', 
		'\x83', '\x5', 't', ';', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\a', '\t', 
		'\x2', '\x2', '\x88', '\x89', '\x5', 'v', '<', '\x2', '\x89', '\x8A', 
		'\x5', '\x62', '\x32', '\x2', '\x8A', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x8D', '\a', '\n', '\x2', '\x2', '\x8C', '\x8E', '\a', 'G', '\x2', 
		'\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x92', '\x5', '`', '\x31', '\x2', '\x92', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x97', '\x5', '\f', '\a', '\x2', '\x94', 
		'\x97', '\x5', '\n', '\x6', '\x2', '\x95', '\x97', '\x5', 't', ';', '\x2', 
		'\x96', '\x93', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9E', '\x5', '\x14', '\v', '\x2', '\x9B', '\x9E', 
		'\x5', ' ', '\x11', '\x2', '\x9C', '\x9E', '\x5', ':', '\x1E', '\x2', 
		'\x9D', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', '\x5', '\xE', '\b', '\x2', 
		'\xA0', '\xA2', '\x5', '\x12', '\n', '\x2', '\xA1', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x5', '\x10', '\t', '\x2', 
		'\xA4', '\xF', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA8', '\a', '\f', 
		'\x2', '\x2', '\xA6', '\xA7', '\a', 'G', '\x2', '\x2', '\xA7', '\xA9', 
		'\x5', '\x42', '\"', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xAB', '\x5', '\x42', '\"', '\x2', '\xAB', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x5', 'h', '\x35', '\x2', 
		'\xAD', '\xAE', '\a', '(', '\x2', '\x2', '\xAE', '\xB0', '\a', 'G', '\x2', 
		'\x2', '\xAF', '\xB1', '\x5', '&', '\x14', '\x2', '\xB0', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB6', '\x5', '\x18', '\r', 
		'\x2', '\xB3', '\xB4', '\a', '(', '\x2', '\x2', '\xB4', '\xB5', '\a', 
		'G', '\x2', '\x2', '\xB5', '\xB7', '\x5', '$', '\x13', '\x2', '\xB6', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x5', 
		't', ';', '\x2', '\xB9', '\xBA', '\a', '\x3', '\x2', '\x2', '\xBA', '\xBB', 
		'\x5', '\b', '\x5', '\x2', '\xBB', '\xBC', '\a', '\x4', '\x2', '\x2', 
		'\xBC', '\x15', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x3', 
		'\x2', '\x2', '\xBE', '\xBF', '\x5', '\x14', '\v', '\x2', '\xBF', '\xC0', 
		'\a', '\x4', '\x2', '\x2', '\xC0', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xCB', '\a', '!', '\x2', '\x2', '\xC2', '\xC8', '\x5', '\x1A', 
		'\xE', '\x2', '\xC3', '\xC4', '\a', '\x46', '\x2', '\x2', '\xC4', '\xC5', 
		'\a', 'G', '\x2', '\x2', '\xC5', '\xC7', '\x5', '\x1A', '\xE', '\x2', 
		'\xC6', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', '\"', '\x2', '\x2', 
		'\xCE', '\x19', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x5', 'h', 
		'\x35', '\x2', '\xD0', '\xD1', '\a', '(', '\x2', '\x2', '\xD1', '\xD2', 
		'\a', 'G', '\x2', '\x2', '\xD2', '\xD3', '\x5', '$', '\x13', '\x2', '\xD3', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xDE', '\a', '!', '\x2', 
		'\x2', '\xD5', '\xDB', '\x5', '\x1E', '\x10', '\x2', '\xD6', '\xD7', '\a', 
		'\x46', '\x2', '\x2', '\xD7', '\xD8', '\a', 'G', '\x2', '\x2', '\xD8', 
		'\xDA', '\x5', '\x1E', '\x10', '\x2', '\xD9', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xE1', '\a', '\"', '\x2', '\x2', '\xE1', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE3', '\x5', 'h', '\x35', '\x2', '\xE3', '\xE4', '\a', 
		',', '\x2', '\x2', '\xE4', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x5', 
		'\x42', '\"', '\x2', '\xE8', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEB', '\x5', 'h', '\x35', '\x2', '\xEA', '\xEC', '\x5', '&', '\x14', 
		'\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEE', '\a', '(', '\x2', '\x2', '\xEE', '\xEF', '\a', 'G', '\x2', '\x2', 
		'\xEF', '\xF1', '\x5', '$', '\x13', '\x2', '\xF0', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x45', '\x2', '\x2', 
		'\xF3', '\xFA', '\x5', 't', ';', '\x2', '\xF4', '\xF5', '\x5', 't', ';', 
		'\x2', '\xF5', '\xF6', '\a', '\x3', '\x2', '\x2', '\xF6', '\xF7', '\x5', 
		'\"', '\x12', '\x2', '\xF7', '\xF8', '\a', '\x4', '\x2', '\x2', '\xF8', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xFA', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xFF', '\x5', '\x34', '\x1B', '\x2', '\xFC', 
		'\xFF', '\x5', '\x36', '\x1C', '\x2', '\xFD', '\xFF', '\x5', '\x38', '\x1D', 
		'\x2', '\xFE', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\x5', 't', ';', 
		'\x2', '\x101', '\x103', '\x3', '\x2', '\x2', '\x2', '\x102', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '#', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x108', '\x5', 'h', '\x35', '\x2', '\x107', '\x109', '\x5', '\x30', '\x19', 
		'\x2', '\x108', '\x107', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10B', '\a', '#', '\x2', '\x2', '\x10B', '\x111', '\x5', '(', 
		'\x15', '\x2', '\x10C', '\x10D', '\a', '\x46', '\x2', '\x2', '\x10D', 
		'\x10E', '\a', 'G', '\x2', '\x2', '\x10E', '\x110', '\x5', '(', '\x15', 
		'\x2', '\x10F', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x110', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x115', '\a', '$', '\x2', '\x2', '\x115', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x11A', '\x5', '*', '\x16', '\x2', '\x117', '\x11A', 
		'\x5', ',', '\x17', '\x2', '\x118', '\x11A', '\x5', '.', '\x18', '\x2', 
		'\x119', '\x116', '\x3', '\x2', '\x2', '\x2', '\x119', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		')', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x5', 'h', '\x35', 
		'\x2', '\x11C', '+', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', 
		'\'', '\x2', '\x2', '\x11E', '\x11F', '\x5', 'h', '\x35', '\x2', '\x11F', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x5', '\x42', '\"', 
		'\x2', '\x121', '/', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\a', 
		'#', '\x2', '\x2', '\x123', '\x129', '\x5', '\x32', '\x1A', '\x2', '\x124', 
		'\x125', '\a', '\x46', '\x2', '\x2', '\x125', '\x126', '\a', 'G', '\x2', 
		'\x2', '\x126', '\x128', '\x5', '\x32', '\x1A', '\x2', '\x127', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\a', '$', '\x2', 
		'\x2', '\x12D', '\x31', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x131', 
		'\x5', 'h', '\x35', '\x2', '\x12F', '\x131', '\x5', '\x42', '\"', '\x2', 
		'\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x33', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x137', '\x5', 'h', '\x35', '\x2', '\x133', '\x134', '\a', 'G', '\x2', 
		'\x2', '\x134', '\x135', '\a', ',', '\x2', '\x2', '\x135', '\x136', '\a', 
		'G', '\x2', '\x2', '\x136', '\x138', '\x5', '\x44', '#', '\x2', '\x137', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\x35', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', 
		'\x5', 'h', '\x35', '\x2', '\x13A', '\x13B', '\a', '(', '\x2', '\x2', 
		'\x13B', '\x13C', '\a', 'G', '\x2', '\x2', '\x13C', '\x13D', '\x5', '$', 
		'\x13', '\x2', '\x13D', '\x37', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', 
		'\a', '\'', '\x2', '\x2', '\x13F', '\x140', '\x5', 'h', '\x35', '\x2', 
		'\x140', '\x141', '\a', 'G', '\x2', '\x2', '\x141', '\x142', '\x5', '\x46', 
		'$', '\x2', '\x142', '\x39', '\x3', '\x2', '\x2', '\x2', '\x143', '\x146', 
		'\x5', '<', '\x1F', '\x2', '\x144', '\x146', '\x5', '>', ' ', '\x2', '\x145', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x145', '\x144', '\x3', '\x2', '\x2', 
		'\x2', '\x146', ';', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\x5', 
		'h', '\x35', '\x2', '\x148', '\x149', '\a', '(', '\x2', '\x2', '\x149', 
		'\x14A', '\a', 'G', '\x2', '\x2', '\x14A', '\x14F', '\x5', '$', '\x13', 
		'\x2', '\x14B', '\x14C', '\a', 'G', '\x2', '\x2', '\x14C', '\x14D', '\a', 
		',', '\x2', '\x2', '\x14D', '\x14E', '\a', 'G', '\x2', '\x2', '\x14E', 
		'\x150', '\x5', '\x42', '\"', '\x2', '\x14F', '\x14B', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', '\x150', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x152', '\x5', 'h', '\x35', '\x2', '\x152', 
		'\x153', '\a', 'G', '\x2', '\x2', '\x153', '\x154', '\a', '(', '\x2', 
		'\x2', '\x154', '\x155', '\a', ',', '\x2', '\x2', '\x155', '\x156', '\a', 
		'G', '\x2', '\x2', '\x156', '\x157', '\x5', '\x42', '\"', '\x2', '\x157', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x5', 'h', '\x35', 
		'\x2', '\x159', '\x15A', '\a', 'G', '\x2', '\x2', '\x15A', '\x15B', '\a', 
		',', '\x2', '\x2', '\x15B', '\x15C', '\a', 'G', '\x2', '\x2', '\x15C', 
		'\x15D', '\x5', '\x42', '\"', '\x2', '\x15D', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x15F', '\b', '\"', '\x1', '\x2', '\x15F', '\x169', '\x5', 
		'\x44', '#', '\x2', '\x160', '\x161', '\x5', 'J', '&', '\x2', '\x161', 
		'\x162', '\x5', '\x42', '\"', '\x6', '\x162', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x164', '\a', '!', '\x2', '\x2', '\x164', '\x165', '\x5', 
		'\x42', '\"', '\x2', '\x165', '\x166', '\a', '\"', '\x2', '\x2', '\x166', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x167', '\x169', '\x5', 'h', '\x35', 
		'\x2', '\x168', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x168', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x174', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x16B', '\f', '\a', '\x2', '\x2', '\x16B', 
		'\x16C', '\a', 'G', '\x2', '\x2', '\x16C', '\x16D', '\x5', 'H', '%', '\x2', 
		'\x16D', '\x16E', '\a', 'G', '\x2', '\x2', '\x16E', '\x16F', '\x5', '\x42', 
		'\"', '\b', '\x16F', '\x173', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', 
		'\f', '\x4', '\x2', '\x2', '\x171', '\x173', '\x5', '\x1C', '\xF', '\x2', 
		'\x172', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x172', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x176', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x172', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\x3', '\x2', '\x2', 
		'\x2', '\x175', '\x43', '\x3', '\x2', '\x2', '\x2', '\x176', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x17A', '\x5', '^', '\x30', '\x2', 
		'\x178', '\x17A', '\x5', '\\', '/', '\x2', '\x179', '\x177', '\x3', '\x2', 
		'\x2', '\x2', '\x179', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', 'G', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x182', '\x5', 'L', 
		'\'', '\x2', '\x17E', '\x182', '\x5', 'P', ')', '\x2', '\x17F', '\x182', 
		'\x5', 'T', '+', '\x2', '\x180', '\x182', '\x5', 'V', ',', '\x2', '\x181', 
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\x181', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x181', '\x180', 
		'\x3', '\x2', '\x2', '\x2', '\x182', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x187', '\x5', 'N', '(', '\x2', '\x184', '\x187', '\x5', 'R', 
		'*', '\x2', '\x185', '\x187', '\x5', 'X', '-', '\x2', '\x186', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x185', '\x3', '\x2', '\x2', '\x2', '\x187', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x188', '\x189', '\t', '\x2', '\x2', '\x2', '\x189', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', '\a', '\x31', '\x2', '\x2', 
		'\x18B', 'O', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\t', '\x3', 
		'\x2', '\x2', '\x18D', 'Q', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', 
		'\a', '\x16', '\x2', '\x2', '\x18F', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '\x191', '\t', '\x4', '\x2', '\x2', '\x191', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x192', '\x19E', '\a', '\x37', '\x2', '\x2', '\x193', '\x19E', 
		'\a', '\x38', '\x2', '\x2', '\x194', '\x19E', '\a', ':', '\x2', '\x2', 
		'\x195', '\x19E', '\a', ';', '\x2', '\x2', '\x196', '\x198', '\a', '\x31', 
		'\x2', '\x2', '\x197', '\x196', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x19A', '\a', '$', '\x2', '\x2', '\x19A', '\x19E', '\a', '$', 
		'\x2', '\x2', '\x19B', '\x19E', '\a', '<', '\x2', '\x2', '\x19C', '\x19E', 
		'\a', '=', '\x2', '\x2', '\x19D', '\x192', '\x3', '\x2', '\x2', '\x2', 
		'\x19D', '\x193', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x194', '\x3', 
		'\x2', '\x2', '\x2', '\x19D', '\x195', '\x3', '\x2', '\x2', '\x2', '\x19D', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19E', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\x19F', '\x1A0', '\a', '\x39', '\x2', '\x2', '\x1A0', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\a', ',', '\x2', '\x2', 
		'\x1A2', '[', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\t', '\x5', 
		'\x2', '\x2', '\x1A4', ']', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A8', 
		'\x5', 'r', ':', '\x2', '\x1A6', '\x1A8', '\x5', 'p', '\x39', '\x2', '\x1A7', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A6', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '_', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AC', '\x5', 
		'h', '\x35', '\x2', '\x1AA', '\x1AB', '\a', ')', '\x2', '\x2', '\x1AB', 
		'\x1AD', '\x5', 'h', '\x35', '\x2', '\x1AC', '\x1AA', '\x3', '\x2', '\x2', 
		'\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AC', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x61', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B3', '\x5', 
		'\x64', '\x33', '\x2', '\x1B1', '\x1B3', '\x5', '\x66', '\x34', '\x2', 
		'\x1B2', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\x1B3', '\x63', '\x3', '\x2', '\x2', '\x2', '\x1B4', 
		'\x1B6', '\x5', '`', '\x31', '\x2', '\x1B5', '\x1B7', '\a', 'G', '\x2', 
		'\x2', '\x1B6', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1BA', '\a', '\x46', '\x2', '\x2', '\x1B9', '\x1BB', '\a', 
		'G', '\x2', '\x2', '\x1BA', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BB', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BA', '\x3', '\x2', '\x2', 
		'\x2', '\x1BC', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1C0', '\x5', '`', '\x31', '\x2', 
		'\x1BF', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C8', 
		'\a', '\x3', '\x2', '\x2', '\x1C5', '\x1C6', '\x5', '`', '\x31', '\x2', 
		'\x1C6', '\x1C7', '\x5', 't', ';', '\x2', '\x1C7', '\x1C9', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', 
		'\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'\x1CA', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\x3', 
		'\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\a', '\x4', '\x2', '\x2', '\x1CD', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\a', '\x1E', '\x2', 
		'\x2', '\x1CF', 'i', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D3', '\x5', 
		'\x64', '\x33', '\x2', '\x1D1', '\x1D3', '\x5', '\x66', '\x34', '\x2', 
		'\x1D2', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D1', '\x3', 
		'\x2', '\x2', '\x2', '\x1D3', 'k', '\x3', '\x2', '\x2', '\x2', '\x1D4', 
		'\x1D6', '\x5', 'h', '\x35', '\x2', '\x1D5', '\x1D7', '\a', 'G', '\x2', 
		'\x2', '\x1D6', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', 
		'\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1E1', '\x3', '\x2', '\x2', '\x2', 
		'\x1D8', '\x1DA', '\a', '\x46', '\x2', '\x2', '\x1D9', '\x1DB', '\a', 
		'G', '\x2', '\x2', '\x1DA', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1DB', 
		'\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1E0', '\x5', 'h', '\x35', '\x2', 
		'\x1DF', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E3', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E1', 
		'\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E2', 'm', '\x3', '\x2', '\x2', 
		'\x2', '\x1E3', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E8', 
		'\a', '\x3', '\x2', '\x2', '\x1E5', '\x1E6', '\x5', 'h', '\x35', '\x2', 
		'\x1E6', '\x1E7', '\x5', 't', ';', '\x2', '\x1E7', '\x1E9', '\x3', '\x2', 
		'\x2', '\x2', '\x1E8', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1E8', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\a', '\x4', '\x2', '\x2', '\x1ED', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\a', ' ', '\x2', '\x2', 
		'\x1EF', 'q', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\t', '\x6', 
		'\x2', '\x2', '\x1F1', 's', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F4', 
		'\a', 'G', '\x2', '\x2', '\x1F3', '\x1F2', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F3', '\x3', 
		'\x2', '\x2', '\x2', '\x1F5', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F5', '\x3', '\x2', '\x2', 
		'\x2', '\x1F8', '\x1FA', '\a', '\a', '\x2', '\x2', '\x1F9', '\x1F8', '\x3', 
		'\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\a', 'H', '\x2', 
		'\x2', '\x1FC', 'u', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FF', '\a', 
		'G', '\x2', '\x2', '\x1FE', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FF', 
		'\x200', '\x3', '\x2', '\x2', '\x2', '\x200', '\x1FE', '\x3', '\x2', '\x2', 
		'\x2', '\x200', '\x201', '\x3', '\x2', '\x2', '\x2', '\x201', '\x207', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\x204', '\a', '\a', '\x2', '\x2', 
		'\x203', '\x202', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', '\x3', 
		'\x2', '\x2', '\x2', '\x204', '\x205', '\x3', '\x2', '\x2', '\x2', '\x205', 
		'\x207', '\a', 'H', '\x2', '\x2', '\x206', '\x1FE', '\x3', '\x2', '\x2', 
		'\x2', '\x206', '\x203', '\x3', '\x2', '\x2', '\x2', '\x207', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '{', '}', '\x82', '\x84', '\x8F', '\x96', 
		'\x98', '\x9D', '\xA1', '\xA8', '\xB0', '\xB6', '\xC8', '\xCB', '\xDB', 
		'\xDE', '\xE5', '\xEB', '\xF0', '\xF9', '\xFE', '\x104', '\x108', '\x111', 
		'\x119', '\x129', '\x130', '\x137', '\x145', '\x14F', '\x168', '\x172', 
		'\x174', '\x179', '\x181', '\x186', '\x197', '\x19D', '\x1A7', '\x1AE', 
		'\x1B2', '\x1B6', '\x1BC', '\x1C1', '\x1CA', '\x1D2', '\x1D6', '\x1DC', 
		'\x1E1', '\x1EA', '\x1F5', '\x1F9', '\x200', '\x203', '\x206',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Maja.Compiler.Parser
