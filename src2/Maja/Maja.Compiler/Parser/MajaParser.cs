//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Maja.Compiler/MajaParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Maja.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MajaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Indent=1, Dedent=2, Comment=3, Mod=4, Pub=5, Use=6, Self=7, Ret=8, Brk=9, 
		Cnt=10, Loop=11, If=12, Else=13, Elif=14, True=15, False=16, In=17, Not=18, 
		And=19, Or=20, NumberBin=21, NumberOct=22, NumberDec=23, NumberDecPrefix=24, 
		NumberHex=25, Identifier=26, Character=27, String=28, ParenOpen=29, ParenClose=30, 
		AngleOpen=31, AngleClose=32, BracketOpen=33, BracketClose=34, CurlyOpen=35, 
		CurlyClose=36, Hash=37, Colon=38, SemiColon=39, Dot=40, Range=41, Spread=42, 
		Eq=43, Neq=44, GtEq=45, LtEq=46, Plus=47, Minus=48, Multiply=49, Power=50, 
		Divide=51, Root=52, Modulo=53, BitAnd=54, BitOr=55, BitNot=56, BitXor_Imm=57, 
		BitShiftL=58, BitRollL=59, BitRollR=60, Question=61, Dollar=62, At=63, 
		Error=64, StrQuote=65, CharQuote=66, BackTick=67, Discard=68, Comma=69, 
		Sp=70, Eol=71;
	public const int
		RULE_compilationUnit = 0, RULE_directiveMod = 1, RULE_directivePub = 2, 
		RULE_directiveUse = 3, RULE_codeBlock = 4, RULE_declaration = 5, RULE_declarationPub = 6, 
		RULE_statement = 7, RULE_statementFlow = 8, RULE_statementIf = 9, RULE_statementElse = 10, 
		RULE_statementElseIf = 11, RULE_statementRet = 12, RULE_statementAssignment = 13, 
		RULE_statementExpression = 14, RULE_statementLoop = 15, RULE_declarationFunction = 16, 
		RULE_declarationFunctionLocal = 17, RULE_parameterList = 18, RULE_parameterListComma = 19, 
		RULE_parameterListIndent = 20, RULE_parameter = 21, RULE_compParameter = 22, 
		RULE_argumentList = 23, RULE_argumentListComma = 24, RULE_argumentListIndent = 25, 
		RULE_argument = 26, RULE_declarationType = 27, RULE_declarationTypeMemberList = 28, 
		RULE_declarationTypeMemberListEnum = 29, RULE_declarationTypeMemberListField = 30, 
		RULE_declarationTypeMemberListRule = 31, RULE_type = 32, RULE_typeParameterList = 33, 
		RULE_typeParameterListComma = 34, RULE_typeParameterListIndent = 35, RULE_typeParameter = 36, 
		RULE_typeParameterGeneric = 37, RULE_typeParameterTemplate = 38, RULE_typeArgumentList = 39, 
		RULE_typeArgumentListComma = 40, RULE_typeArgumentListIndent = 41, RULE_typeArgument = 42, 
		RULE_typeInitializer = 43, RULE_typeInitializerComma = 44, RULE_typeInitializerIndent = 45, 
		RULE_typeInitializerField = 46, RULE_memberEnumValue = 47, RULE_memberEnum = 48, 
		RULE_memberField = 49, RULE_memberRule = 50, RULE_declarationVariable = 51, 
		RULE_declarationVariableTyped = 52, RULE_declarationVariableInferred = 53, 
		RULE_variableAssignment = 54, RULE_expression = 55, RULE_expressionConstant = 56, 
		RULE_expressionRule = 57, RULE_expressionLoop = 58, RULE_expressionOperatorBinary = 59, 
		RULE_expressionOperatorUnaryPrefix = 60, RULE_expressionOperatorUnaryPostfix = 61, 
		RULE_expressionOperatorArithmetic = 62, RULE_expressionOperatorArithmeticUnaryPrefix = 63, 
		RULE_expressionOperatorLogic = 64, RULE_expressionOperatorLogicUnaryPrefix = 65, 
		RULE_expressionOperatorLogicUnaryPostfix = 66, RULE_expressionOperatorComparison = 67, 
		RULE_expressionOperatorBits = 68, RULE_expressionOperatorBitsUnaryPrefix = 69, 
		RULE_expressionLiteralBool = 70, RULE_expressionLiteral = 71, RULE_nameQualified = 72, 
		RULE_nameQualifiedList = 73, RULE_nameQualifiedListComma = 74, RULE_nameQualifiedListIndent = 75, 
		RULE_nameIdentifier = 76, RULE_nameIdentifierList = 77, RULE_nameIdentifierListComma = 78, 
		RULE_nameIdentifierListIndent = 79, RULE_string = 80, RULE_number = 81, 
		RULE_comment = 82, RULE_newline = 83, RULE_freeSpace = 84;
	public static readonly string[] ruleNames = {
		"compilationUnit", "directiveMod", "directivePub", "directiveUse", "codeBlock", 
		"declaration", "declarationPub", "statement", "statementFlow", "statementIf", 
		"statementElse", "statementElseIf", "statementRet", "statementAssignment", 
		"statementExpression", "statementLoop", "declarationFunction", "declarationFunctionLocal", 
		"parameterList", "parameterListComma", "parameterListIndent", "parameter", 
		"compParameter", "argumentList", "argumentListComma", "argumentListIndent", 
		"argument", "declarationType", "declarationTypeMemberList", "declarationTypeMemberListEnum", 
		"declarationTypeMemberListField", "declarationTypeMemberListRule", "type", 
		"typeParameterList", "typeParameterListComma", "typeParameterListIndent", 
		"typeParameter", "typeParameterGeneric", "typeParameterTemplate", "typeArgumentList", 
		"typeArgumentListComma", "typeArgumentListIndent", "typeArgument", "typeInitializer", 
		"typeInitializerComma", "typeInitializerIndent", "typeInitializerField", 
		"memberEnumValue", "memberEnum", "memberField", "memberRule", "declarationVariable", 
		"declarationVariableTyped", "declarationVariableInferred", "variableAssignment", 
		"expression", "expressionConstant", "expressionRule", "expressionLoop", 
		"expressionOperatorBinary", "expressionOperatorUnaryPrefix", "expressionOperatorUnaryPostfix", 
		"expressionOperatorArithmetic", "expressionOperatorArithmeticUnaryPrefix", 
		"expressionOperatorLogic", "expressionOperatorLogicUnaryPrefix", "expressionOperatorLogicUnaryPostfix", 
		"expressionOperatorComparison", "expressionOperatorBits", "expressionOperatorBitsUnaryPrefix", 
		"expressionLiteralBool", "expressionLiteral", "nameQualified", "nameQualifiedList", 
		"nameQualifiedListComma", "nameQualifiedListIndent", "nameIdentifier", 
		"nameIdentifierList", "nameIdentifierListComma", "nameIdentifierListIndent", 
		"string", "number", "comment", "newline", "freeSpace"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'mod'", "'pub'", "'use'", "'self'", "'ret'", 
		"'brk'", "'cnt'", "'loop'", "'if'", "'else'", "'elif'", "'true'", "'false'", 
		"'in'", "'not'", "'and'", "'or'", null, null, null, null, null, null, 
		null, null, "'('", "')'", "'<'", "'>'", "'['", "']'", "'{'", "'}'", "'#'", 
		"':'", "';'", "'.'", "'..'", "'...'", "'='", "'<>'", "'>='", "'=<'", "'+'", 
		"'-'", "'*'", "'**'", "'/'", "'//'", "'%'", "'&'", "'|'", "'~'", "'^'", 
		"'<<'", "'|<'", "'>|'", "'?'", "'$'", "'@'", "'!'", "'\"'", "'''", "'`'", 
		"'_'", "','", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Indent", "Dedent", "Comment", "Mod", "Pub", "Use", "Self", "Ret", 
		"Brk", "Cnt", "Loop", "If", "Else", "Elif", "True", "False", "In", "Not", 
		"And", "Or", "NumberBin", "NumberOct", "NumberDec", "NumberDecPrefix", 
		"NumberHex", "Identifier", "Character", "String", "ParenOpen", "ParenClose", 
		"AngleOpen", "AngleClose", "BracketOpen", "BracketClose", "CurlyOpen", 
		"CurlyClose", "Hash", "Colon", "SemiColon", "Dot", "Range", "Spread", 
		"Eq", "Neq", "GtEq", "LtEq", "Plus", "Minus", "Multiply", "Power", "Divide", 
		"Root", "Modulo", "BitAnd", "BitOr", "BitNot", "BitXor_Imm", "BitShiftL", 
		"BitRollL", "BitRollR", "Question", "Dollar", "At", "Error", "StrQuote", 
		"CharQuote", "BackTick", "Discard", "Comma", "Sp", "Eol"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MajaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MajaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MajaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MajaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MajaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveModContext directiveMod() {
			return GetRuleContext<DirectiveModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveUseContext[] directiveUse() {
			return GetRuleContexts<DirectiveUseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveUseContext directiveUse(int i) {
			return GetRuleContext<DirectiveUseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivePubContext[] directivePub() {
			return GetRuleContexts<DirectivePubContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivePubContext directivePub(int i) {
			return GetRuleContext<DirectivePubContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mod) {
				{
				State = 170;
				directiveMod();
				}
			}

			State = 178;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 176;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Use:
						{
						State = 173;
						directiveUse();
						}
						break;
					case Pub:
						{
						State = 174;
						directivePub();
						}
						break;
					case Comment:
					case Sp:
					case Eol:
						{
						State = 175;
						newline();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 180;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72479816164940072L) != 0) || _la==Sp || _la==Eol) {
				{
				State = 184;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 181;
					declaration();
					}
					break;
				case 2:
					{
					State = 182;
					statement();
					}
					break;
				case 3:
					{
					State = 183;
					newline();
					}
					break;
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 189;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(MajaParser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified() {
			return GetRuleContext<NameQualifiedContext>(0);
		}
		public DirectiveModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveModContext directiveMod() {
		DirectiveModContext _localctx = new DirectiveModContext(Context, State);
		EnterRule(_localctx, 2, RULE_directiveMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(Mod);
			State = 192;
			freeSpace();
			State = 193;
			nameQualified();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivePubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pub() { return GetToken(MajaParser.Pub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListContext nameQualifiedList() {
			return GetRuleContext<NameQualifiedListContext>(0);
		}
		public DirectivePubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directivePub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectivePub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivePubContext directivePub() {
		DirectivePubContext _localctx = new DirectivePubContext(Context, State);
		EnterRule(_localctx, 4, RULE_directivePub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(Pub);
			State = 196;
			freeSpace();
			State = 197;
			nameQualifiedList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Use() { return GetToken(MajaParser.Use, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListContext nameQualifiedList() {
			return GetRuleContext<NameQualifiedListContext>(0);
		}
		public DirectiveUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveUseContext directiveUse() {
		DirectiveUseContext _localctx = new DirectiveUseContext(Context, State);
		EnterRule(_localctx, 6, RULE_directiveUse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(Use);
			State = 200;
			freeSpace();
			State = 201;
			nameQualifiedList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_codeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 206;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 203;
					statement();
					}
					break;
				case 2:
					{
					State = 204;
					declaration();
					}
					break;
				case 3:
					{
					State = 205;
					newline();
					}
					break;
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72479816164940072L) != 0) || _la==Sp || _la==Eol );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationPubContext declarationPub() {
			return GetRuleContext<DeclarationPubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableContext declarationVariable() {
			return GetRuleContext<DeclarationVariableContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				declarationPub();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				declarationVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationPubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationFunctionContext declarationFunction() {
			return GetRuleContext<DeclarationFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeContext declarationType() {
			return GetRuleContext<DeclarationTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pub() { return GetToken(MajaParser.Pub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		public DeclarationPubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationPub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationPub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationPubContext declarationPub() {
		DeclarationPubContext _localctx = new DeclarationPubContext(Context, State);
		EnterRule(_localctx, 12, RULE_declarationPub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Pub) {
				{
				State = 214;
				Match(Pub);
				State = 215;
				Match(Sp);
				}
			}

			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 218;
				declarationFunction();
				}
				break;
			case 2:
				{
				State = 219;
				declarationType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementFlowContext statementFlow() {
			return GetRuleContext<StatementFlowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementAssignmentContext statementAssignment() {
			return GetRuleContext<StatementAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222;
				statementFlow();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223;
				statementAssignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 224;
				statementExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementRetContext statementRet() {
			return GetRuleContext<StatementRetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementIfContext statementIf() {
			return GetRuleContext<StatementIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementLoopContext statementLoop() {
			return GetRuleContext<StatementLoopContext>(0);
		}
		public StatementFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFlow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementFlowContext statementFlow() {
		StatementFlowContext _localctx = new StatementFlowContext(Context, State);
		EnterRule(_localctx, 16, RULE_statementFlow);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ret:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				statementRet();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228;
				statementIf();
				}
				break;
			case Loop:
				EnterOuterAlt(_localctx, 3);
				{
				State = 229;
				statementLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MajaParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseContext statementElse() {
			return GetRuleContext<StatementElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseIfContext statementElseIf() {
			return GetRuleContext<StatementElseIfContext>(0);
		}
		public StatementIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementIfContext statementIf() {
		StatementIfContext _localctx = new StatementIfContext(Context, State);
		EnterRule(_localctx, 18, RULE_statementIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(If);
			State = 233;
			Match(Sp);
			State = 234;
			expression(0);
			State = 235;
			newline();
			State = 236;
			Match(Indent);
			State = 237;
			codeBlock();
			State = 238;
			Match(Dedent);
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 239;
				statementElse();
				}
				break;
			case 2:
				{
				State = 240;
				statementElseIf();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MajaParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		public StatementElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementElse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementElseContext statementElse() {
		StatementElseContext _localctx = new StatementElseContext(Context, State);
		EnterRule(_localctx, 20, RULE_statementElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(Else);
			State = 244;
			newline();
			State = 245;
			Match(Indent);
			State = 246;
			codeBlock();
			State = 247;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementElseIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MajaParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MajaParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Elif() { return GetToken(MajaParser.Elif, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseContext statementElse() {
			return GetRuleContext<StatementElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementElseIfContext statementElseIf() {
			return GetRuleContext<StatementElseIfContext>(0);
		}
		public StatementElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementElseIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementElseIfContext statementElseIf() {
		StatementElseIfContext _localctx = new StatementElseIfContext(Context, State);
		EnterRule(_localctx, 22, RULE_statementElseIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Else:
				{
				State = 249;
				Match(Else);
				State = 250;
				freeSpace();
				State = 251;
				Match(If);
				}
				break;
			case Elif:
				{
				State = 253;
				Match(Elif);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 256;
			Match(Sp);
			State = 257;
			expression(0);
			State = 258;
			newline();
			State = 259;
			Match(Indent);
			State = 260;
			codeBlock();
			State = 261;
			Match(Dedent);
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 262;
				statementElse();
				}
				break;
			case 2:
				{
				State = 263;
				statementElseIf();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementRetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ret() { return GetToken(MajaParser.Ret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementRetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementRet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementRet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementRetContext statementRet() {
		StatementRetContext _localctx = new StatementRetContext(Context, State);
		EnterRule(_localctx, 24, RULE_statementRet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(Ret);
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 267;
				Match(Sp);
				State = 268;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementAssignmentContext statementAssignment() {
		StatementAssignmentContext _localctx = new StatementAssignmentContext(Context, State);
		EnterRule(_localctx, 26, RULE_statementAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			nameIdentifier();
			State = 272;
			Match(Sp);
			State = 273;
			Match(Eq);
			State = 274;
			Match(Sp);
			State = 275;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_statementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MajaParser.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp() { return GetToken(MajaParser.Sp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLoopContext expressionLoop() {
			return GetRuleContext<ExpressionLoopContext>(0);
		}
		public StatementLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementLoopContext statementLoop() {
		StatementLoopContext _localctx = new StatementLoopContext(Context, State);
		EnterRule(_localctx, 30, RULE_statementLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(Loop);
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 280;
				Match(Sp);
				State = 281;
				expressionLoop();
				}
				break;
			}
			State = 284;
			newline();
			State = 285;
			Match(Indent);
			State = 286;
			codeBlock();
			State = 287;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(MajaParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(MajaParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace() {
			return GetRuleContext<FreeSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DeclarationFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationFunctionContext declarationFunction() {
		DeclarationFunctionContext _localctx = new DeclarationFunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_declarationFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			nameIdentifier();
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 290;
				Match(Sp);
				}
			}

			State = 293;
			Match(Colon);
			State = 294;
			freeSpace();
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 295;
				typeParameterList();
				}
			}

			State = 298;
			parameterList();
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sp) {
					{
					State = 299;
					Match(Sp);
					}
				}

				State = 302;
				Match(Colon);
				State = 303;
				Match(Sp);
				State = 304;
				type();
				}
				break;
			}
			State = 307;
			newline();
			State = 308;
			Match(Indent);
			State = 309;
			codeBlock();
			State = 310;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationFunctionLocalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationFunctionContext declarationFunction() {
			return GetRuleContext<DeclarationFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		public DeclarationFunctionLocalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationFunctionLocal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationFunctionLocal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationFunctionLocalContext declarationFunctionLocal() {
		DeclarationFunctionLocalContext _localctx = new DeclarationFunctionLocalContext(Context, State);
		EnterRule(_localctx, 34, RULE_declarationFunctionLocal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(Indent);
			State = 313;
			declarationFunction();
			State = 314;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListCommaContext parameterListComma() {
			return GetRuleContext<ParameterListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListIndentContext parameterListIndent() {
			return GetRuleContext<ParameterListIndentContext>(0);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(ParenOpen);
			State = 321;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case Hash:
				{
				State = 317;
				parameterListComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 318;
				newline();
				State = 319;
				parameterListIndent();
				}
				break;
			case ParenClose:
				break;
			default:
				break;
			}
			State = 323;
			Match(ParenClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterContext[] compParameter() {
			return GetRuleContexts<CompParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterContext compParameter(int i) {
			return GetRuleContext<CompParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public ParameterListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListCommaContext parameterListComma() {
		ParameterListCommaContext _localctx = new ParameterListCommaContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameterListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 325;
				parameter();
				}
				break;
			case Hash:
				{
				State = 326;
				compParameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 329;
				Match(Comma);
				State = 330;
				Match(Sp);
				State = 333;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 331;
					parameter();
					}
					break;
				case Hash:
					{
					State = 332;
					compParameter();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterContext[] compParameter() {
			return GetRuleContexts<CompParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompParameterContext compParameter(int i) {
			return GetRuleContext<CompParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public ParameterListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListIndentContext parameterListIndent() {
		ParameterListIndentContext _localctx = new ParameterListIndentContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameterListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(Indent);
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comment || _la==Sp) {
					{
					{
					State = 341;
					comment();
					}
					}
					State = 346;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 349;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 347;
					parameter();
					}
					break;
				case Hash:
					{
					State = 348;
					compParameter();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 351;
				newline();
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 137506062344L) != 0) || _la==Sp );
			State = 357;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			nameIdentifier();
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 360;
				Match(Sp);
				}
			}

			State = 363;
			Match(Colon);
			State = 364;
			Match(Sp);
			State = 365;
			type();
			State = 370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 366;
				Match(Sp);
				State = 367;
				Match(Eq);
				State = 368;
				Match(Sp);
				State = 369;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public CompParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompParameterContext compParameter() {
		CompParameterContext _localctx = new CompParameterContext(Context, State);
		EnterRule(_localctx, 44, RULE_compParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(Hash);
			State = 373;
			parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListCommaContext argumentListComma() {
			return GetRuleContext<ArgumentListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListIndentContext argumentListIndent() {
			return GetRuleContext<ArgumentListIndentContext>(0);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 46, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			Match(ParenOpen);
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comment || _la==Sp || _la==Eol) {
				{
				State = 376;
				newline();
				}
			}

			State = 381;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case Not:
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Identifier:
			case Character:
			case String:
			case ParenOpen:
			case BracketOpen:
			case Plus:
			case Minus:
			case BitNot:
				{
				State = 379;
				argumentListComma();
				}
				break;
			case Indent:
				{
				State = 380;
				argumentListIndent();
				}
				break;
			case ParenClose:
				break;
			default:
				break;
			}
			State = 383;
			Match(ParenClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public ArgumentListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListCommaContext argumentListComma() {
		ArgumentListCommaContext _localctx = new ArgumentListCommaContext(Context, State);
		EnterRule(_localctx, 48, RULE_argumentListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			argument();
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 386;
				Match(Comma);
				State = 387;
				Match(Sp);
				State = 388;
				argument();
				}
				}
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public ArgumentListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListIndentContext argumentListIndent() {
		ArgumentListIndentContext _localctx = new ArgumentListIndentContext(Context, State);
		EnterRule(_localctx, 50, RULE_argumentListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(Indent);
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 395;
				argument();
				State = 396;
				newline();
				}
				}
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72479816164933632L) != 0) );
			State = 402;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 52, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 404;
				nameIdentifier();
				State = 405;
				Match(Sp);
				State = 406;
				Match(Eq);
				State = 407;
				Match(Sp);
				}
				break;
			}
			State = 411;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListContext declarationTypeMemberList() {
			return GetRuleContext<DeclarationTypeMemberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DeclarationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeContext declarationType() {
		DeclarationTypeContext _localctx = new DeclarationTypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_declarationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			nameIdentifier();
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 414;
				typeParameterList();
				}
			}

			State = 423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sp) {
					{
					State = 417;
					Match(Sp);
					}
				}

				State = 420;
				Match(Colon);
				State = 421;
				Match(Sp);
				State = 422;
				type();
				}
				break;
			}
			State = 425;
			newline();
			State = 426;
			Match(Indent);
			State = 427;
			declarationTypeMemberList();
			State = 428;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListEnumContext[] declarationTypeMemberListEnum() {
			return GetRuleContexts<DeclarationTypeMemberListEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListEnumContext declarationTypeMemberListEnum(int i) {
			return GetRuleContext<DeclarationTypeMemberListEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListFieldContext[] declarationTypeMemberListField() {
			return GetRuleContexts<DeclarationTypeMemberListFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListFieldContext declarationTypeMemberListField(int i) {
			return GetRuleContext<DeclarationTypeMemberListFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListRuleContext[] declarationTypeMemberListRule() {
			return GetRuleContexts<DeclarationTypeMemberListRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationTypeMemberListRuleContext declarationTypeMemberListRule(int i) {
			return GetRuleContext<DeclarationTypeMemberListRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public DeclarationTypeMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListContext declarationTypeMemberList() {
		DeclarationTypeMemberListContext _localctx = new DeclarationTypeMemberListContext(Context, State);
		EnterRule(_localctx, 56, RULE_declarationTypeMemberList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 434;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 430;
					declarationTypeMemberListEnum();
					}
					break;
				case 2:
					{
					State = 431;
					declarationTypeMemberListField();
					}
					break;
				case 3:
					{
					State = 432;
					declarationTypeMemberListRule();
					}
					break;
				case 4:
					{
					State = 433;
					newline();
					}
					break;
				}
				}
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 137506062344L) != 0) || _la==Sp || _la==Eol );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumValueContext[] memberEnumValue() {
			return GetRuleContexts<MemberEnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumValueContext memberEnumValue(int i) {
			return GetRuleContext<MemberEnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumContext[] memberEnum() {
			return GetRuleContexts<MemberEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberEnumContext memberEnum(int i) {
			return GetRuleContext<MemberEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext[] freeSpace() {
			return GetRuleContexts<FreeSpaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeSpaceContext freeSpace(int i) {
			return GetRuleContext<FreeSpaceContext>(i);
		}
		public DeclarationTypeMemberListEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberListEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberListEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListEnumContext declarationTypeMemberListEnum() {
		DeclarationTypeMemberListEnumContext _localctx = new DeclarationTypeMemberListEnumContext(Context, State);
		EnterRule(_localctx, 58, RULE_declarationTypeMemberListEnum);
		int _la;
		try {
			int _alt;
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 441;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 438;
						memberEnumValue();
						State = 439;
						newline();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 443;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 445;
					memberEnum();
					State = 452;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 446;
						Match(Comma);
						State = 447;
						freeSpace();
						State = 448;
						memberEnum();
						}
						}
						State = 454;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 457;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Identifier );
				State = 459;
				newline();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberFieldContext[] memberField() {
			return GetRuleContexts<MemberFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberFieldContext memberField(int i) {
			return GetRuleContext<MemberFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public DeclarationTypeMemberListFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberListField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberListField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListFieldContext declarationTypeMemberListField() {
		DeclarationTypeMemberListFieldContext _localctx = new DeclarationTypeMemberListFieldContext(Context, State);
		EnterRule(_localctx, 60, RULE_declarationTypeMemberListField);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 463;
					memberField();
					State = 464;
					newline();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 468;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationTypeMemberListRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberRuleContext[] memberRule() {
			return GetRuleContexts<MemberRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberRuleContext memberRule(int i) {
			return GetRuleContext<MemberRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public DeclarationTypeMemberListRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationTypeMemberListRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationTypeMemberListRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationTypeMemberListRuleContext declarationTypeMemberListRule() {
		DeclarationTypeMemberListRuleContext _localctx = new DeclarationTypeMemberListRuleContext(Context, State);
		EnterRule(_localctx, 62, RULE_declarationTypeMemberListRule);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 470;
					memberRule();
					State = 471;
					newline();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 475;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			nameIdentifier();
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleOpen) {
				{
				State = 478;
				typeArgumentList();
				}
			}

			State = 482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 481;
				argumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListCommaContext typeParameterListComma() {
			return GetRuleContext<TypeParameterListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListIndentContext typeParameterListIndent() {
			return GetRuleContext<TypeParameterListIndentContext>(0);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeParameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(AngleOpen);
			State = 489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case Hash:
				{
				State = 485;
				typeParameterListComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 486;
				newline();
				State = 487;
				typeParameterListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 491;
			Match(AngleClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public TypeParameterListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListCommaContext typeParameterListComma() {
		TypeParameterListCommaContext _localctx = new TypeParameterListCommaContext(Context, State);
		EnterRule(_localctx, 68, RULE_typeParameterListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			typeParameter();
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 494;
				Match(Comma);
				State = 495;
				Match(Sp);
				State = 496;
				typeParameter();
				}
				}
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public TypeParameterListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListIndentContext typeParameterListIndent() {
		TypeParameterListIndentContext _localctx = new TypeParameterListIndentContext(Context, State);
		EnterRule(_localctx, 70, RULE_typeParameterListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			Match(Indent);
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comment || _la==Sp) {
					{
					{
					State = 503;
					comment();
					}
					}
					State = 508;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 509;
				typeParameter();
				State = 510;
				newline();
				}
				}
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 137506062344L) != 0) || _la==Sp );
			State = 516;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterGenericContext typeParameterGeneric() {
			return GetRuleContext<TypeParameterGenericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterTemplateContext typeParameterTemplate() {
			return GetRuleContext<TypeParameterTemplateContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 72, RULE_typeParameter);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 518;
				typeParameterGeneric();
				}
				break;
			case Hash:
				EnterOuterAlt(_localctx, 2);
				{
				State = 519;
				typeParameterTemplate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		public TypeParameterGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterGenericContext typeParameterGeneric() {
		TypeParameterGenericContext _localctx = new TypeParameterGenericContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeParameterGeneric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			type();
			State = 527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 523;
				Match(Sp);
				State = 524;
				Match(Eq);
				State = 525;
				Match(Sp);
				State = 526;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterTemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		public TypeParameterTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterTemplate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterTemplateContext typeParameterTemplate() {
		TypeParameterTemplateContext _localctx = new TypeParameterTemplateContext(Context, State);
		EnterRule(_localctx, 76, RULE_typeParameterTemplate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			Match(Hash);
			State = 530;
			type();
			State = 535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 531;
				Match(Sp);
				State = 532;
				Match(Eq);
				State = 533;
				Match(Sp);
				State = 534;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListCommaContext typeArgumentListComma() {
			return GetRuleContext<TypeArgumentListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListIndentContext typeArgumentListIndent() {
			return GetRuleContext<TypeArgumentListIndentContext>(0);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeArgumentList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(AngleOpen);
			State = 542;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case Not:
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Identifier:
			case Character:
			case String:
			case ParenOpen:
			case BracketOpen:
			case Plus:
			case Minus:
			case BitNot:
				{
				State = 538;
				typeArgumentListComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				{
				State = 539;
				newline();
				State = 540;
				typeArgumentListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 544;
			Match(AngleClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public TypeArgumentListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListCommaContext typeArgumentListComma() {
		TypeArgumentListCommaContext _localctx = new TypeArgumentListCommaContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeArgumentListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			typeArgument();
			State = 552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 547;
				Match(Comma);
				State = 548;
				Match(Sp);
				State = 549;
				typeArgument();
				}
				}
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public TypeArgumentListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListIndentContext typeArgumentListIndent() {
		TypeArgumentListIndentContext _localctx = new TypeArgumentListIndentContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeArgumentListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			Match(Indent);
			State = 559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 556;
				typeArgument();
				State = 557;
				newline();
				}
				}
				State = 561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72479816164933632L) != 0) );
			State = 563;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeArgument);
		try {
			State = 567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 565;
				type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 566;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerCommaContext typeInitializerComma() {
			return GetRuleContext<TypeInitializerCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerIndentContext typeInitializerIndent() {
			return GetRuleContext<TypeInitializerIndentContext>(0);
		}
		public TypeInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerContext typeInitializer() {
		TypeInitializerContext _localctx = new TypeInitializerContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeInitializer);
		try {
			State = 573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CurlyOpen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 569;
				typeInitializerComma();
				}
				break;
			case Comment:
			case Sp:
			case Eol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 570;
				newline();
				State = 571;
				typeInitializerIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyOpen() { return GetToken(MajaParser.CurlyOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext[] typeInitializerField() {
			return GetRuleContexts<TypeInitializerFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext typeInitializerField(int i) {
			return GetRuleContext<TypeInitializerFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyClose() { return GetToken(MajaParser.CurlyClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		public TypeInitializerCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializerComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializerComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerCommaContext typeInitializerComma() {
		TypeInitializerCommaContext _localctx = new TypeInitializerCommaContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeInitializerComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			Match(CurlyOpen);
			State = 576;
			Match(Sp);
			State = 577;
			typeInitializerField();
			State = 583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 578;
				Match(Comma);
				State = 579;
				Match(Sp);
				State = 580;
				typeInitializerField();
				}
				}
				State = 585;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 586;
			Match(Sp);
			State = 587;
			Match(CurlyClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext[] typeInitializerField() {
			return GetRuleContexts<TypeInitializerFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerFieldContext typeInitializerField(int i) {
			return GetRuleContext<TypeInitializerFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public TypeInitializerIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializerIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializerIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerIndentContext typeInitializerIndent() {
		TypeInitializerIndentContext _localctx = new TypeInitializerIndentContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeInitializerIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(Indent);
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 590;
				typeInitializerField();
				State = 591;
				newline();
				}
				}
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 597;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInitializerFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeInitializerFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInitializerField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInitializerField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInitializerFieldContext typeInitializerField() {
		TypeInitializerFieldContext _localctx = new TypeInitializerFieldContext(Context, State);
		EnterRule(_localctx, 92, RULE_typeInitializerField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			nameIdentifier();
			State = 600;
			Match(Sp);
			State = 601;
			Match(Eq);
			State = 602;
			Match(Sp);
			State = 603;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberEnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionConstantContext expressionConstant() {
			return GetRuleContext<ExpressionConstantContext>(0);
		}
		public MemberEnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberEnumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberEnumValueContext memberEnumValue() {
		MemberEnumValueContext _localctx = new MemberEnumValueContext(Context, State);
		EnterRule(_localctx, 94, RULE_memberEnumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			nameIdentifier();
			State = 610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 606;
				Match(Sp);
				State = 607;
				Match(Eq);
				State = 608;
				Match(Sp);
				State = 609;
				expressionConstant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public MemberEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberEnumContext memberEnum() {
		MemberEnumContext _localctx = new MemberEnumContext(Context, State);
		EnterRule(_localctx, 96, RULE_memberEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemberFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberFieldContext memberField() {
		MemberFieldContext _localctx = new MemberFieldContext(Context, State);
		EnterRule(_localctx, 98, RULE_memberField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			nameIdentifier();
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 615;
				Match(Sp);
				}
			}

			State = 618;
			Match(Colon);
			State = 619;
			Match(Sp);
			State = 620;
			type();
			State = 625;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 621;
				Match(Sp);
				State = 622;
				Match(Eq);
				State = 623;
				Match(Sp);
				State = 624;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MajaParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionRuleContext expressionRule() {
			return GetRuleContext<ExpressionRuleContext>(0);
		}
		public MemberRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberRuleContext memberRule() {
		MemberRuleContext _localctx = new MemberRuleContext(Context, State);
		EnterRule(_localctx, 100, RULE_memberRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			Match(Hash);
			State = 628;
			expressionRule();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableTypedContext declarationVariableTyped() {
			return GetRuleContext<DeclarationVariableTypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationVariableInferredContext declarationVariableInferred() {
			return GetRuleContext<DeclarationVariableInferredContext>(0);
		}
		public DeclarationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableContext declarationVariable() {
		DeclarationVariableContext _localctx = new DeclarationVariableContext(Context, State);
		EnterRule(_localctx, 102, RULE_declarationVariable);
		try {
			State = 632;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 630;
				declarationVariableTyped();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 631;
				declarationVariableInferred();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableTypedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationVariableTypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariableTyped; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariableTyped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableTypedContext declarationVariableTyped() {
		DeclarationVariableTypedContext _localctx = new DeclarationVariableTypedContext(Context, State);
		EnterRule(_localctx, 104, RULE_declarationVariableTyped);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			nameIdentifier();
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 635;
				Match(Sp);
				}
			}

			State = 638;
			Match(Colon);
			State = 639;
			Match(Sp);
			State = 640;
			type();
			State = 647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Sp) {
					{
					State = 641;
					Match(Sp);
					}
				}

				State = 644;
				Match(Eq);
				State = 645;
				Match(Sp);
				State = 646;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationVariableInferredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MajaParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationVariableInferredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationVariableInferred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationVariableInferred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationVariableInferredContext declarationVariableInferred() {
		DeclarationVariableInferredContext _localctx = new DeclarationVariableInferredContext(Context, State);
		EnterRule(_localctx, 106, RULE_declarationVariableInferred);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			nameIdentifier();
			State = 651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 650;
				Match(Sp);
				}
			}

			State = 653;
			Match(Colon);
			State = 654;
			Match(Eq);
			State = 655;
			Match(Sp);
			State = 656;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 108, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			nameIdentifier();
			State = 659;
			Match(Sp);
			State = 660;
			Match(Eq);
			State = 661;
			Match(Sp);
			State = 662;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionIdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public ExpressionIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryPostfixContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorUnaryPostfixContext expressionOperatorUnaryPostfix() {
			return GetRuleContext<ExpressionOperatorUnaryPostfixContext>(0);
		}
		public ExpressionUnaryPostfixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnaryPostfix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionMemberAccessContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(MajaParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier() {
			return GetRuleContext<NameIdentifierContext>(0);
		}
		public ExpressionMemberAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInvocationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public ExpressionInvocationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionRangeContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketOpen() { return GetToken(MajaParser.BracketOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Range() { return GetToken(MajaParser.Range, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketClose() { return GetToken(MajaParser.BracketClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionRangeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryPrefixContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorUnaryPrefixContext expressionOperatorUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionUnaryPrefixContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionTypeInitializerContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeInitializerContext typeInitializer() {
			return GetRuleContext<TypeInitializerContext>(0);
		}
		public ExpressionTypeInitializerContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionTypeInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBinaryContext expressionOperatorBinary() {
			return GetRuleContext<ExpressionOperatorBinaryContext>(0);
		}
		public ExpressionBinaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionPrecedenceContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenOpen() { return GetToken(MajaParser.ParenOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParenClose() { return GetToken(MajaParser.ParenClose, 0); }
		public ExpressionPrecedenceContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionPrecedence(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionConstContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionConstantContext expressionConstant() {
			return GetRuleContext<ExpressionConstantContext>(0);
		}
		public ExpressionConstContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 110;
		EnterRecursionRule(_localctx, 110, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				_localctx = new ExpressionPrecedenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 665;
				Match(ParenOpen);
				State = 666;
				expression(0);
				State = 667;
				Match(ParenClose);
				}
				break;
			case 2:
				{
				_localctx = new ExpressionUnaryPrefixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 669;
				expressionOperatorUnaryPrefix();
				State = 670;
				expression(9);
				}
				break;
			case 3:
				{
				_localctx = new ExpressionTypeInitializerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 672;
				type();
				State = 673;
				typeInitializer();
				}
				break;
			case 4:
				{
				_localctx = new ExpressionRangeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 675;
				Match(BracketOpen);
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72479816164933632L) != 0)) {
					{
					State = 676;
					expression(0);
					}
				}

				State = 679;
				Match(Range);
				State = 681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72479816164933632L) != 0)) {
					{
					State = 680;
					expression(0);
					}
				}

				State = 683;
				Match(BracketClose);
				}
				break;
			case 5:
				{
				_localctx = new ExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 684;
				nameIdentifier();
				}
				break;
			case 6:
				{
				_localctx = new ExpressionConstContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 685;
				expressionConstant();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 706;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 704;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
					case 1:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 688;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 689;
						Match(Sp);
						State = 690;
						expressionOperatorBinary();
						State = 691;
						Match(Sp);
						State = 692;
						expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionUnaryPostfixContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 694;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 695;
						expressionOperatorUnaryPostfix();
						}
						break;
					case 3:
						{
						_localctx = new ExpressionInvocationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 696;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 698;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==AngleOpen) {
							{
							State = 697;
							typeArgumentList();
							}
						}

						State = 700;
						argumentList();
						}
						break;
					case 4:
						{
						_localctx = new ExpressionMemberAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 701;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 702;
						Match(Dot);
						State = 703;
						nameIdentifier();
						}
						break;
					}
					} 
				}
				State = 708;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLiteralContext expressionLiteral() {
			return GetRuleContext<ExpressionLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLiteralBoolContext expressionLiteralBool() {
			return GetRuleContext<ExpressionLiteralBoolContext>(0);
		}
		public ExpressionConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionConstantContext expressionConstant() {
		ExpressionConstantContext _localctx = new ExpressionConstantContext(Context, State);
		EnterRule(_localctx, 112, RULE_expressionConstant);
		try {
			State = 711;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
			case String:
				EnterOuterAlt(_localctx, 1);
				{
				State = 709;
				expressionLiteral();
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 2);
				{
				State = 710;
				expressionLiteralBool();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionRuleContext expressionRule() {
		ExpressionRuleContext _localctx = new ExpressionRuleContext(Context, State);
		EnterRule(_localctx, 114, RULE_expressionRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLoopContext expressionLoop() {
		ExpressionLoopContext _localctx = new ExpressionLoopContext(Context, State);
		EnterRule(_localctx, 116, RULE_expressionLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorArithmeticContext expressionOperatorArithmetic() {
			return GetRuleContext<ExpressionOperatorArithmeticContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorLogicContext expressionOperatorLogic() {
			return GetRuleContext<ExpressionOperatorLogicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorComparisonContext expressionOperatorComparison() {
			return GetRuleContext<ExpressionOperatorComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBitsContext expressionOperatorBits() {
			return GetRuleContext<ExpressionOperatorBitsContext>(0);
		}
		public ExpressionOperatorBinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBinary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBinaryContext expressionOperatorBinary() {
		ExpressionOperatorBinaryContext _localctx = new ExpressionOperatorBinaryContext(Context, State);
		EnterRule(_localctx, 118, RULE_expressionOperatorBinary);
		try {
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 717;
				expressionOperatorArithmetic();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 718;
				expressionOperatorLogic();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 719;
				expressionOperatorComparison();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 720;
				expressionOperatorBits();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorArithmeticUnaryPrefixContext expressionOperatorArithmeticUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorArithmeticUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorLogicUnaryPrefixContext expressionOperatorLogicUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorLogicUnaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorBitsUnaryPrefixContext expressionOperatorBitsUnaryPrefix() {
			return GetRuleContext<ExpressionOperatorBitsUnaryPrefixContext>(0);
		}
		public ExpressionOperatorUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorUnaryPrefixContext expressionOperatorUnaryPrefix() {
		ExpressionOperatorUnaryPrefixContext _localctx = new ExpressionOperatorUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 120, RULE_expressionOperatorUnaryPrefix);
		try {
			State = 726;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Plus:
			case Minus:
				EnterOuterAlt(_localctx, 1);
				{
				State = 723;
				expressionOperatorArithmeticUnaryPrefix();
				}
				break;
			case Not:
				EnterOuterAlt(_localctx, 2);
				{
				State = 724;
				expressionOperatorLogicUnaryPrefix();
				}
				break;
			case BitNot:
				EnterOuterAlt(_localctx, 3);
				{
				State = 725;
				expressionOperatorBitsUnaryPrefix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorUnaryPostfixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOperatorLogicUnaryPostfixContext expressionOperatorLogicUnaryPostfix() {
			return GetRuleContext<ExpressionOperatorLogicUnaryPostfixContext>(0);
		}
		public ExpressionOperatorUnaryPostfixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorUnaryPostfix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorUnaryPostfix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorUnaryPostfixContext expressionOperatorUnaryPostfix() {
		ExpressionOperatorUnaryPostfixContext _localctx = new ExpressionOperatorUnaryPostfixContext(Context, State);
		EnterRule(_localctx, 122, RULE_expressionOperatorUnaryPostfix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			expressionOperatorLogicUnaryPostfix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorArithmeticContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MajaParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MajaParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(MajaParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(MajaParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(MajaParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(MajaParser.Power, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Root() { return GetToken(MajaParser.Root, 0); }
		public ExpressionOperatorArithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorArithmetic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorArithmeticContext expressionOperatorArithmetic() {
		ExpressionOperatorArithmeticContext _localctx = new ExpressionOperatorArithmeticContext(Context, State);
		EnterRule(_localctx, 124, RULE_expressionOperatorArithmetic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17873661021126656L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorArithmeticUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(MajaParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(MajaParser.Minus, 0); }
		public ExpressionOperatorArithmeticUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorArithmeticUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorArithmeticUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorArithmeticUnaryPrefixContext expressionOperatorArithmeticUnaryPrefix() {
		ExpressionOperatorArithmeticUnaryPrefixContext _localctx = new ExpressionOperatorArithmeticUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 126, RULE_expressionOperatorArithmeticUnaryPrefix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732;
			_la = TokenStream.LA(1);
			if ( !(_la==Plus || _la==Minus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorLogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MajaParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MajaParser.Or, 0); }
		public ExpressionOperatorLogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorLogic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorLogicContext expressionOperatorLogic() {
		ExpressionOperatorLogicContext _localctx = new ExpressionOperatorLogicContext(Context, State);
		EnterRule(_localctx, 128, RULE_expressionOperatorLogic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Or) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorLogicUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(MajaParser.Not, 0); }
		public ExpressionOperatorLogicUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorLogicUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorLogicUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorLogicUnaryPrefixContext expressionOperatorLogicUnaryPrefix() {
		ExpressionOperatorLogicUnaryPrefixContext _localctx = new ExpressionOperatorLogicUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 130, RULE_expressionOperatorLogicUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			Match(Not);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorLogicUnaryPostfixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(MajaParser.Question, 0); }
		public ExpressionOperatorLogicUnaryPostfixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorLogicUnaryPostfix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorLogicUnaryPostfix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorLogicUnaryPostfixContext expressionOperatorLogicUnaryPostfix() {
		ExpressionOperatorLogicUnaryPostfixContext _localctx = new ExpressionOperatorLogicUnaryPostfixContext(Context, State);
		EnterRule(_localctx, 132, RULE_expressionOperatorLogicUnaryPostfix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			Match(Question);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(MajaParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Neq() { return GetToken(MajaParser.Neq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose() { return GetToken(MajaParser.AngleClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleOpen() { return GetToken(MajaParser.AngleOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GtEq() { return GetToken(MajaParser.GtEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LtEq() { return GetToken(MajaParser.LtEq, 0); }
		public ExpressionOperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorComparisonContext expressionOperatorComparison() {
		ExpressionOperatorComparisonContext _localctx = new ExpressionOperatorComparisonContext(Context, State);
		EnterRule(_localctx, 134, RULE_expressionOperatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 131947837784064L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(MajaParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(MajaParser.BitOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXor_Imm() { return GetToken(MajaParser.BitXor_Imm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitShiftL() { return GetToken(MajaParser.BitShiftL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AngleClose() { return GetTokens(MajaParser.AngleClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleClose(int i) {
			return GetToken(MajaParser.AngleClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitRollL() { return GetToken(MajaParser.BitRollL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitRollR() { return GetToken(MajaParser.BitRollR, 0); }
		public ExpressionOperatorBitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBitsContext expressionOperatorBits() {
		ExpressionOperatorBitsContext _localctx = new ExpressionOperatorBitsContext(Context, State);
		EnterRule(_localctx, 136, RULE_expressionOperatorBits);
		try {
			State = 753;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BitAnd:
				EnterOuterAlt(_localctx, 1);
				{
				State = 742;
				Match(BitAnd);
				}
				break;
			case BitOr:
				EnterOuterAlt(_localctx, 2);
				{
				State = 743;
				Match(BitOr);
				}
				break;
			case BitXor_Imm:
				EnterOuterAlt(_localctx, 3);
				{
				State = 744;
				Match(BitXor_Imm);
				}
				break;
			case BitShiftL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 745;
				Match(BitShiftL);
				}
				break;
			case AngleClose:
				EnterOuterAlt(_localctx, 5);
				{
				State = 747;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 746;
					Match(AngleClose);
					}
					break;
				}
				State = 749;
				Match(AngleClose);
				State = 750;
				Match(AngleClose);
				}
				break;
			case BitRollL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 751;
				Match(BitRollL);
				}
				break;
			case BitRollR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 752;
				Match(BitRollR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOperatorBitsUnaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(MajaParser.BitNot, 0); }
		public ExpressionOperatorBitsUnaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOperatorBitsUnaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOperatorBitsUnaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOperatorBitsUnaryPrefixContext expressionOperatorBitsUnaryPrefix() {
		ExpressionOperatorBitsUnaryPrefixContext _localctx = new ExpressionOperatorBitsUnaryPrefixContext(Context, State);
		EnterRule(_localctx, 138, RULE_expressionOperatorBitsUnaryPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 755;
			Match(BitNot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLiteralBoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MajaParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MajaParser.False, 0); }
		public ExpressionLiteralBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLiteralBool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteralBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLiteralBoolContext expressionLiteralBool() {
		ExpressionLiteralBoolContext _localctx = new ExpressionLiteralBoolContext(Context, State);
		EnterRule(_localctx, 140, RULE_expressionLiteralBool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExpressionLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLiteralContext expressionLiteral() {
		ExpressionLiteralContext _localctx = new ExpressionLiteralContext(Context, State);
		EnterRule(_localctx, 142, RULE_expressionLiteral);
		try {
			State = 761;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberBin:
			case NumberOct:
			case NumberDec:
			case NumberDecPrefix:
			case NumberHex:
			case Character:
				EnterOuterAlt(_localctx, 1);
				{
				State = 759;
				number();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 760;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MajaParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MajaParser.Dot, i);
		}
		public NameQualifiedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualified; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualified(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedContext nameQualified() {
		NameQualifiedContext _localctx = new NameQualifiedContext(Context, State);
		EnterRule(_localctx, 144, RULE_nameQualified);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			nameIdentifier();
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 764;
				Match(Dot);
				State = 765;
				nameIdentifier();
				}
				}
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListCommaContext nameQualifiedListComma() {
			return GetRuleContext<NameQualifiedListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListIndentContext nameQualifiedListIndent() {
			return GetRuleContext<NameQualifiedListIndentContext>(0);
		}
		public NameQualifiedListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListContext nameQualifiedList() {
		NameQualifiedListContext _localctx = new NameQualifiedListContext(Context, State);
		EnterRule(_localctx, 146, RULE_nameQualifiedList);
		try {
			State = 773;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 771;
				nameQualifiedListComma();
				}
				break;
			case Indent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 772;
				nameQualifiedListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext[] nameQualified() {
			return GetRuleContexts<NameQualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified(int i) {
			return GetRuleContext<NameQualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		public NameQualifiedListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListCommaContext nameQualifiedListComma() {
		NameQualifiedListCommaContext _localctx = new NameQualifiedListCommaContext(Context, State);
		EnterRule(_localctx, 148, RULE_nameQualifiedListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			nameQualified();
			State = 777;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 776;
				Match(Sp);
				}
				break;
			}
			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 779;
				Match(Comma);
				State = 781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 780;
					Match(Sp);
					}
					}
					State = 783;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				State = 785;
				nameQualified();
				}
				}
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameQualifiedListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext[] nameQualified() {
			return GetRuleContexts<NameQualifiedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedContext nameQualified(int i) {
			return GetRuleContext<NameQualifiedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NameQualifiedListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameQualifiedListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameQualifiedListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameQualifiedListIndentContext nameQualifiedListIndent() {
		NameQualifiedListIndentContext _localctx = new NameQualifiedListIndentContext(Context, State);
		EnterRule(_localctx, 150, RULE_nameQualifiedListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			Match(Indent);
			State = 795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 792;
				nameQualified();
				State = 793;
				newline();
				}
				}
				State = 797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 799;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MajaParser.Identifier, 0); }
		public NameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierContext nameIdentifier() {
		NameIdentifierContext _localctx = new NameIdentifierContext(Context, State);
		EnterRule(_localctx, 152, RULE_nameIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListCommaContext nameQualifiedListComma() {
			return GetRuleContext<NameQualifiedListCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameQualifiedListIndentContext nameQualifiedListIndent() {
			return GetRuleContext<NameQualifiedListIndentContext>(0);
		}
		public NameIdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListContext nameIdentifierList() {
		NameIdentifierListContext _localctx = new NameIdentifierListContext(Context, State);
		EnterRule(_localctx, 154, RULE_nameIdentifierList);
		try {
			State = 805;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 803;
				nameQualifiedListComma();
				}
				break;
			case Indent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 804;
				nameQualifiedListIndent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MajaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MajaParser.Comma, i);
		}
		public NameIdentifierListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierListComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListCommaContext nameIdentifierListComma() {
		NameIdentifierListCommaContext _localctx = new NameIdentifierListCommaContext(Context, State);
		EnterRule(_localctx, 156, RULE_nameIdentifierListComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			nameIdentifier();
			State = 809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sp) {
				{
				State = 808;
				Match(Sp);
				}
			}

			State = 820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 811;
				Match(Comma);
				State = 813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 812;
					Match(Sp);
					}
					}
					State = 815;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				State = 817;
				nameIdentifier();
				}
				}
				State = 822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierListIndentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Indent() { return GetToken(MajaParser.Indent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dedent() { return GetToken(MajaParser.Dedent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NameIdentifierListIndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifierListIndent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifierListIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierListIndentContext nameIdentifierListIndent() {
		NameIdentifierListIndentContext _localctx = new NameIdentifierListIndentContext(Context, State);
		EnterRule(_localctx, 158, RULE_nameIdentifierListIndent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			Match(Indent);
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 824;
				nameIdentifier();
				State = 825;
				newline();
				}
				}
				State = 829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 831;
			Match(Dedent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(MajaParser.String, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 160, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberBin() { return GetToken(MajaParser.NumberBin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDec() { return GetToken(MajaParser.NumberDec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberDecPrefix() { return GetToken(MajaParser.NumberDecPrefix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberHex() { return GetToken(MajaParser.NumberHex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberOct() { return GetToken(MajaParser.NumberOct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character() { return GetToken(MajaParser.Character, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 162, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 199229440L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(MajaParser.Comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eol() { return GetToken(MajaParser.Eol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 164, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sp) {
				{
				{
				State = 837;
				Match(Sp);
				}
				}
				State = 842;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 843;
			Match(Comment);
			State = 844;
			Match(Eol);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(MajaParser.Comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Eol() { return GetTokens(MajaParser.Eol); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eol(int i) {
			return GetToken(MajaParser.Eol, i);
		}
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 166, RULE_newline);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sp) {
				{
				{
				State = 846;
				Match(Sp);
				}
				}
				State = 851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comment) {
				{
				State = 852;
				Match(Comment);
				}
			}

			State = 856;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 855;
					Match(Eol);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 858;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeSpaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sp() { return GetTokens(MajaParser.Sp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sp(int i) {
			return GetToken(MajaParser.Sp, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		public FreeSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeSpace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMajaParserVisitor<TResult> typedVisitor = visitor as IMajaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreeSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeSpaceContext freeSpace() {
		FreeSpaceContext _localctx = new FreeSpaceContext(Context, State);
		EnterRule(_localctx, 168, RULE_freeSpace);
		int _la;
		try {
			State = 866;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 861;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 860;
					Match(Sp);
					}
					}
					State = 863;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Sp );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 865;
				newline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 55: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,71,869,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		1,0,3,0,172,8,0,1,0,1,0,1,0,5,0,177,8,0,10,0,12,0,180,9,0,1,0,1,0,1,0,
		5,0,185,8,0,10,0,12,0,188,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
		1,3,1,3,1,3,1,3,1,4,1,4,1,4,4,4,207,8,4,11,4,12,4,208,1,5,1,5,3,5,213,
		8,5,1,6,1,6,3,6,217,8,6,1,6,1,6,3,6,221,8,6,1,7,1,7,1,7,3,7,226,8,7,1,
		8,1,8,1,8,3,8,231,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,242,8,9,
		1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,3,11,255,8,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,265,8,11,1,12,1,12,1,12,3,12,
		270,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,3,15,283,
		8,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,3,16,292,8,16,1,16,1,16,1,16,3,
		16,297,8,16,1,16,1,16,3,16,301,8,16,1,16,1,16,1,16,3,16,306,8,16,1,16,
		1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,
		322,8,18,1,18,1,18,1,19,1,19,3,19,328,8,19,1,19,1,19,1,19,1,19,3,19,334,
		8,19,5,19,336,8,19,10,19,12,19,339,9,19,1,20,1,20,5,20,343,8,20,10,20,
		12,20,346,9,20,1,20,1,20,3,20,350,8,20,1,20,1,20,4,20,354,8,20,11,20,12,
		20,355,1,20,1,20,1,21,1,21,3,21,362,8,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,3,21,371,8,21,1,22,1,22,1,22,1,23,1,23,3,23,378,8,23,1,23,1,23,3,
		23,382,8,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,390,8,24,10,24,12,24,393,
		9,24,1,25,1,25,1,25,1,25,4,25,399,8,25,11,25,12,25,400,1,25,1,25,1,26,
		1,26,1,26,1,26,1,26,3,26,410,8,26,1,26,1,26,1,27,1,27,3,27,416,8,27,1,
		27,3,27,419,8,27,1,27,1,27,1,27,3,27,424,8,27,1,27,1,27,1,27,1,27,1,27,
		1,28,1,28,1,28,1,28,4,28,435,8,28,11,28,12,28,436,1,29,1,29,1,29,4,29,
		442,8,29,11,29,12,29,443,1,29,1,29,1,29,1,29,1,29,5,29,451,8,29,10,29,
		12,29,454,9,29,4,29,456,8,29,11,29,12,29,457,1,29,1,29,3,29,462,8,29,1,
		30,1,30,1,30,4,30,467,8,30,11,30,12,30,468,1,31,1,31,1,31,4,31,474,8,31,
		11,31,12,31,475,1,32,1,32,3,32,480,8,32,1,32,3,32,483,8,32,1,33,1,33,1,
		33,1,33,1,33,3,33,490,8,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,498,8,34,
		10,34,12,34,501,9,34,1,35,1,35,5,35,505,8,35,10,35,12,35,508,9,35,1,35,
		1,35,1,35,4,35,513,8,35,11,35,12,35,514,1,35,1,35,1,36,1,36,3,36,521,8,
		36,1,37,1,37,1,37,1,37,1,37,3,37,528,8,37,1,38,1,38,1,38,1,38,1,38,1,38,
		3,38,536,8,38,1,39,1,39,1,39,1,39,1,39,3,39,543,8,39,1,39,1,39,1,40,1,
		40,1,40,1,40,5,40,551,8,40,10,40,12,40,554,9,40,1,41,1,41,1,41,1,41,4,
		41,560,8,41,11,41,12,41,561,1,41,1,41,1,42,1,42,3,42,568,8,42,1,43,1,43,
		1,43,1,43,3,43,574,8,43,1,44,1,44,1,44,1,44,1,44,1,44,5,44,582,8,44,10,
		44,12,44,585,9,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,4,45,594,8,45,11,
		45,12,45,595,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,
		47,1,47,3,47,611,8,47,1,48,1,48,1,49,1,49,3,49,617,8,49,1,49,1,49,1,49,
		1,49,1,49,1,49,1,49,3,49,626,8,49,1,50,1,50,1,50,1,51,1,51,3,51,633,8,
		51,1,52,1,52,3,52,637,8,52,1,52,1,52,1,52,1,52,3,52,643,8,52,1,52,1,52,
		1,52,3,52,648,8,52,1,53,1,53,3,53,652,8,53,1,53,1,53,1,53,1,53,1,53,1,
		54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
		55,1,55,1,55,1,55,1,55,3,55,678,8,55,1,55,1,55,3,55,682,8,55,1,55,1,55,
		1,55,3,55,687,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,
		55,699,8,55,1,55,1,55,1,55,1,55,5,55,705,8,55,10,55,12,55,708,9,55,1,56,
		1,56,3,56,712,8,56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,59,3,59,722,8,
		59,1,60,1,60,1,60,3,60,727,8,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,
		1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,68,1,68,3,68,748,8,68,1,
		68,1,68,1,68,1,68,3,68,754,8,68,1,69,1,69,1,70,1,70,1,71,1,71,3,71,762,
		8,71,1,72,1,72,1,72,5,72,767,8,72,10,72,12,72,770,9,72,1,73,1,73,3,73,
		774,8,73,1,74,1,74,3,74,778,8,74,1,74,1,74,4,74,782,8,74,11,74,12,74,783,
		1,74,5,74,787,8,74,10,74,12,74,790,9,74,1,75,1,75,1,75,1,75,4,75,796,8,
		75,11,75,12,75,797,1,75,1,75,1,76,1,76,1,77,1,77,3,77,806,8,77,1,78,1,
		78,3,78,810,8,78,1,78,1,78,4,78,814,8,78,11,78,12,78,815,1,78,5,78,819,
		8,78,10,78,12,78,822,9,78,1,79,1,79,1,79,1,79,4,79,828,8,79,11,79,12,79,
		829,1,79,1,79,1,80,1,80,1,81,1,81,1,82,5,82,839,8,82,10,82,12,82,842,9,
		82,1,82,1,82,1,82,1,83,5,83,848,8,83,10,83,12,83,851,9,83,1,83,3,83,854,
		8,83,1,83,4,83,857,8,83,11,83,12,83,858,1,84,4,84,862,8,84,11,84,12,84,
		863,1,84,3,84,867,8,84,1,84,0,1,110,85,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
		72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,152,154,156,158,160,162,164,166,168,0,6,1,0,47,53,1,0,47,48,1,0,19,
		20,2,0,31,32,43,46,1,0,15,16,2,0,21,25,27,27,907,0,171,1,0,0,0,2,191,1,
		0,0,0,4,195,1,0,0,0,6,199,1,0,0,0,8,206,1,0,0,0,10,212,1,0,0,0,12,216,
		1,0,0,0,14,225,1,0,0,0,16,230,1,0,0,0,18,232,1,0,0,0,20,243,1,0,0,0,22,
		254,1,0,0,0,24,266,1,0,0,0,26,271,1,0,0,0,28,277,1,0,0,0,30,279,1,0,0,
		0,32,289,1,0,0,0,34,312,1,0,0,0,36,316,1,0,0,0,38,327,1,0,0,0,40,340,1,
		0,0,0,42,359,1,0,0,0,44,372,1,0,0,0,46,375,1,0,0,0,48,385,1,0,0,0,50,394,
		1,0,0,0,52,409,1,0,0,0,54,413,1,0,0,0,56,434,1,0,0,0,58,461,1,0,0,0,60,
		466,1,0,0,0,62,473,1,0,0,0,64,477,1,0,0,0,66,484,1,0,0,0,68,493,1,0,0,
		0,70,502,1,0,0,0,72,520,1,0,0,0,74,522,1,0,0,0,76,529,1,0,0,0,78,537,1,
		0,0,0,80,546,1,0,0,0,82,555,1,0,0,0,84,567,1,0,0,0,86,573,1,0,0,0,88,575,
		1,0,0,0,90,589,1,0,0,0,92,599,1,0,0,0,94,605,1,0,0,0,96,612,1,0,0,0,98,
		614,1,0,0,0,100,627,1,0,0,0,102,632,1,0,0,0,104,634,1,0,0,0,106,649,1,
		0,0,0,108,658,1,0,0,0,110,686,1,0,0,0,112,711,1,0,0,0,114,713,1,0,0,0,
		116,715,1,0,0,0,118,721,1,0,0,0,120,726,1,0,0,0,122,728,1,0,0,0,124,730,
		1,0,0,0,126,732,1,0,0,0,128,734,1,0,0,0,130,736,1,0,0,0,132,738,1,0,0,
		0,134,740,1,0,0,0,136,753,1,0,0,0,138,755,1,0,0,0,140,757,1,0,0,0,142,
		761,1,0,0,0,144,763,1,0,0,0,146,773,1,0,0,0,148,775,1,0,0,0,150,791,1,
		0,0,0,152,801,1,0,0,0,154,805,1,0,0,0,156,807,1,0,0,0,158,823,1,0,0,0,
		160,833,1,0,0,0,162,835,1,0,0,0,164,840,1,0,0,0,166,849,1,0,0,0,168,866,
		1,0,0,0,170,172,3,2,1,0,171,170,1,0,0,0,171,172,1,0,0,0,172,178,1,0,0,
		0,173,177,3,6,3,0,174,177,3,4,2,0,175,177,3,166,83,0,176,173,1,0,0,0,176,
		174,1,0,0,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,
		0,0,0,179,186,1,0,0,0,180,178,1,0,0,0,181,185,3,10,5,0,182,185,3,14,7,
		0,183,185,3,166,83,0,184,181,1,0,0,0,184,182,1,0,0,0,184,183,1,0,0,0,185,
		188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,189,1,0,0,0,188,186,1,
		0,0,0,189,190,5,0,0,1,190,1,1,0,0,0,191,192,5,4,0,0,192,193,3,168,84,0,
		193,194,3,144,72,0,194,3,1,0,0,0,195,196,5,5,0,0,196,197,3,168,84,0,197,
		198,3,146,73,0,198,5,1,0,0,0,199,200,5,6,0,0,200,201,3,168,84,0,201,202,
		3,146,73,0,202,7,1,0,0,0,203,207,3,14,7,0,204,207,3,10,5,0,205,207,3,166,
		83,0,206,203,1,0,0,0,206,204,1,0,0,0,206,205,1,0,0,0,207,208,1,0,0,0,208,
		206,1,0,0,0,208,209,1,0,0,0,209,9,1,0,0,0,210,213,3,12,6,0,211,213,3,102,
		51,0,212,210,1,0,0,0,212,211,1,0,0,0,213,11,1,0,0,0,214,215,5,5,0,0,215,
		217,5,70,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,220,1,0,0,0,218,221,3,
		32,16,0,219,221,3,54,27,0,220,218,1,0,0,0,220,219,1,0,0,0,221,13,1,0,0,
		0,222,226,3,16,8,0,223,226,3,26,13,0,224,226,3,28,14,0,225,222,1,0,0,0,
		225,223,1,0,0,0,225,224,1,0,0,0,226,15,1,0,0,0,227,231,3,24,12,0,228,231,
		3,18,9,0,229,231,3,30,15,0,230,227,1,0,0,0,230,228,1,0,0,0,230,229,1,0,
		0,0,231,17,1,0,0,0,232,233,5,12,0,0,233,234,5,70,0,0,234,235,3,110,55,
		0,235,236,3,166,83,0,236,237,5,1,0,0,237,238,3,8,4,0,238,241,5,2,0,0,239,
		242,3,20,10,0,240,242,3,22,11,0,241,239,1,0,0,0,241,240,1,0,0,0,241,242,
		1,0,0,0,242,19,1,0,0,0,243,244,5,13,0,0,244,245,3,166,83,0,245,246,5,1,
		0,0,246,247,3,8,4,0,247,248,5,2,0,0,248,21,1,0,0,0,249,250,5,13,0,0,250,
		251,3,168,84,0,251,252,5,12,0,0,252,255,1,0,0,0,253,255,5,14,0,0,254,249,
		1,0,0,0,254,253,1,0,0,0,255,256,1,0,0,0,256,257,5,70,0,0,257,258,3,110,
		55,0,258,259,3,166,83,0,259,260,5,1,0,0,260,261,3,8,4,0,261,264,5,2,0,
		0,262,265,3,20,10,0,263,265,3,22,11,0,264,262,1,0,0,0,264,263,1,0,0,0,
		264,265,1,0,0,0,265,23,1,0,0,0,266,269,5,8,0,0,267,268,5,70,0,0,268,270,
		3,110,55,0,269,267,1,0,0,0,269,270,1,0,0,0,270,25,1,0,0,0,271,272,3,152,
		76,0,272,273,5,70,0,0,273,274,5,43,0,0,274,275,5,70,0,0,275,276,3,110,
		55,0,276,27,1,0,0,0,277,278,3,110,55,0,278,29,1,0,0,0,279,282,5,11,0,0,
		280,281,5,70,0,0,281,283,3,116,58,0,282,280,1,0,0,0,282,283,1,0,0,0,283,
		284,1,0,0,0,284,285,3,166,83,0,285,286,5,1,0,0,286,287,3,8,4,0,287,288,
		5,2,0,0,288,31,1,0,0,0,289,291,3,152,76,0,290,292,5,70,0,0,291,290,1,0,
		0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,294,5,38,0,0,294,296,3,168,84,
		0,295,297,3,66,33,0,296,295,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,
		305,3,36,18,0,299,301,5,70,0,0,300,299,1,0,0,0,300,301,1,0,0,0,301,302,
		1,0,0,0,302,303,5,38,0,0,303,304,5,70,0,0,304,306,3,64,32,0,305,300,1,
		0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,308,3,166,83,0,308,309,5,1,0,
		0,309,310,3,8,4,0,310,311,5,2,0,0,311,33,1,0,0,0,312,313,5,1,0,0,313,314,
		3,32,16,0,314,315,5,2,0,0,315,35,1,0,0,0,316,321,5,29,0,0,317,322,3,38,
		19,0,318,319,3,166,83,0,319,320,3,40,20,0,320,322,1,0,0,0,321,317,1,0,
		0,0,321,318,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,5,30,0,0,324,
		37,1,0,0,0,325,328,3,42,21,0,326,328,3,44,22,0,327,325,1,0,0,0,327,326,
		1,0,0,0,328,337,1,0,0,0,329,330,5,69,0,0,330,333,5,70,0,0,331,334,3,42,
		21,0,332,334,3,44,22,0,333,331,1,0,0,0,333,332,1,0,0,0,334,336,1,0,0,0,
		335,329,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,39,
		1,0,0,0,339,337,1,0,0,0,340,353,5,1,0,0,341,343,3,164,82,0,342,341,1,0,
		0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,349,1,0,0,0,346,
		344,1,0,0,0,347,350,3,42,21,0,348,350,3,44,22,0,349,347,1,0,0,0,349,348,
		1,0,0,0,350,351,1,0,0,0,351,352,3,166,83,0,352,354,1,0,0,0,353,344,1,0,
		0,0,354,355,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,
		358,5,2,0,0,358,41,1,0,0,0,359,361,3,152,76,0,360,362,5,70,0,0,361,360,
		1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,364,5,38,0,0,364,365,5,70,
		0,0,365,370,3,64,32,0,366,367,5,70,0,0,367,368,5,43,0,0,368,369,5,70,0,
		0,369,371,3,110,55,0,370,366,1,0,0,0,370,371,1,0,0,0,371,43,1,0,0,0,372,
		373,5,37,0,0,373,374,3,42,21,0,374,45,1,0,0,0,375,377,5,29,0,0,376,378,
		3,166,83,0,377,376,1,0,0,0,377,378,1,0,0,0,378,381,1,0,0,0,379,382,3,48,
		24,0,380,382,3,50,25,0,381,379,1,0,0,0,381,380,1,0,0,0,381,382,1,0,0,0,
		382,383,1,0,0,0,383,384,5,30,0,0,384,47,1,0,0,0,385,391,3,52,26,0,386,
		387,5,69,0,0,387,388,5,70,0,0,388,390,3,52,26,0,389,386,1,0,0,0,390,393,
		1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,49,1,0,0,0,393,391,1,0,0,0,
		394,398,5,1,0,0,395,396,3,52,26,0,396,397,3,166,83,0,397,399,1,0,0,0,398,
		395,1,0,0,0,399,400,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,402,1,
		0,0,0,402,403,5,2,0,0,403,51,1,0,0,0,404,405,3,152,76,0,405,406,5,70,0,
		0,406,407,5,43,0,0,407,408,5,70,0,0,408,410,1,0,0,0,409,404,1,0,0,0,409,
		410,1,0,0,0,410,411,1,0,0,0,411,412,3,110,55,0,412,53,1,0,0,0,413,415,
		3,152,76,0,414,416,3,66,33,0,415,414,1,0,0,0,415,416,1,0,0,0,416,423,1,
		0,0,0,417,419,5,70,0,0,418,417,1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,
		420,421,5,38,0,0,421,422,5,70,0,0,422,424,3,64,32,0,423,418,1,0,0,0,423,
		424,1,0,0,0,424,425,1,0,0,0,425,426,3,166,83,0,426,427,5,1,0,0,427,428,
		3,56,28,0,428,429,5,2,0,0,429,55,1,0,0,0,430,435,3,58,29,0,431,435,3,60,
		30,0,432,435,3,62,31,0,433,435,3,166,83,0,434,430,1,0,0,0,434,431,1,0,
		0,0,434,432,1,0,0,0,434,433,1,0,0,0,435,436,1,0,0,0,436,434,1,0,0,0,436,
		437,1,0,0,0,437,57,1,0,0,0,438,439,3,94,47,0,439,440,3,166,83,0,440,442,
		1,0,0,0,441,438,1,0,0,0,442,443,1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,
		0,444,462,1,0,0,0,445,452,3,96,48,0,446,447,5,69,0,0,447,448,3,168,84,
		0,448,449,3,96,48,0,449,451,1,0,0,0,450,446,1,0,0,0,451,454,1,0,0,0,452,
		450,1,0,0,0,452,453,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,455,445,1,
		0,0,0,456,457,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,
		459,460,3,166,83,0,460,462,1,0,0,0,461,441,1,0,0,0,461,455,1,0,0,0,462,
		59,1,0,0,0,463,464,3,98,49,0,464,465,3,166,83,0,465,467,1,0,0,0,466,463,
		1,0,0,0,467,468,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,61,1,0,0,0,
		470,471,3,100,50,0,471,472,3,166,83,0,472,474,1,0,0,0,473,470,1,0,0,0,
		474,475,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,63,1,0,0,0,477,479,
		3,152,76,0,478,480,3,78,39,0,479,478,1,0,0,0,479,480,1,0,0,0,480,482,1,
		0,0,0,481,483,3,46,23,0,482,481,1,0,0,0,482,483,1,0,0,0,483,65,1,0,0,0,
		484,489,5,31,0,0,485,490,3,68,34,0,486,487,3,166,83,0,487,488,3,70,35,
		0,488,490,1,0,0,0,489,485,1,0,0,0,489,486,1,0,0,0,490,491,1,0,0,0,491,
		492,5,32,0,0,492,67,1,0,0,0,493,499,3,72,36,0,494,495,5,69,0,0,495,496,
		5,70,0,0,496,498,3,72,36,0,497,494,1,0,0,0,498,501,1,0,0,0,499,497,1,0,
		0,0,499,500,1,0,0,0,500,69,1,0,0,0,501,499,1,0,0,0,502,512,5,1,0,0,503,
		505,3,164,82,0,504,503,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,507,
		1,0,0,0,507,509,1,0,0,0,508,506,1,0,0,0,509,510,3,72,36,0,510,511,3,166,
		83,0,511,513,1,0,0,0,512,506,1,0,0,0,513,514,1,0,0,0,514,512,1,0,0,0,514,
		515,1,0,0,0,515,516,1,0,0,0,516,517,5,2,0,0,517,71,1,0,0,0,518,521,3,74,
		37,0,519,521,3,76,38,0,520,518,1,0,0,0,520,519,1,0,0,0,521,73,1,0,0,0,
		522,527,3,64,32,0,523,524,5,70,0,0,524,525,5,43,0,0,525,526,5,70,0,0,526,
		528,3,64,32,0,527,523,1,0,0,0,527,528,1,0,0,0,528,75,1,0,0,0,529,530,5,
		37,0,0,530,535,3,64,32,0,531,532,5,70,0,0,532,533,5,43,0,0,533,534,5,70,
		0,0,534,536,3,64,32,0,535,531,1,0,0,0,535,536,1,0,0,0,536,77,1,0,0,0,537,
		542,5,31,0,0,538,543,3,80,40,0,539,540,3,166,83,0,540,541,3,82,41,0,541,
		543,1,0,0,0,542,538,1,0,0,0,542,539,1,0,0,0,543,544,1,0,0,0,544,545,5,
		32,0,0,545,79,1,0,0,0,546,552,3,84,42,0,547,548,5,69,0,0,548,549,5,70,
		0,0,549,551,3,84,42,0,550,547,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,
		552,553,1,0,0,0,553,81,1,0,0,0,554,552,1,0,0,0,555,559,5,1,0,0,556,557,
		3,84,42,0,557,558,3,166,83,0,558,560,1,0,0,0,559,556,1,0,0,0,560,561,1,
		0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,563,1,0,0,0,563,564,5,2,0,0,
		564,83,1,0,0,0,565,568,3,64,32,0,566,568,3,110,55,0,567,565,1,0,0,0,567,
		566,1,0,0,0,568,85,1,0,0,0,569,574,3,88,44,0,570,571,3,166,83,0,571,572,
		3,90,45,0,572,574,1,0,0,0,573,569,1,0,0,0,573,570,1,0,0,0,574,87,1,0,0,
		0,575,576,5,35,0,0,576,577,5,70,0,0,577,583,3,92,46,0,578,579,5,69,0,0,
		579,580,5,70,0,0,580,582,3,92,46,0,581,578,1,0,0,0,582,585,1,0,0,0,583,
		581,1,0,0,0,583,584,1,0,0,0,584,586,1,0,0,0,585,583,1,0,0,0,586,587,5,
		70,0,0,587,588,5,36,0,0,588,89,1,0,0,0,589,593,5,1,0,0,590,591,3,92,46,
		0,591,592,3,166,83,0,592,594,1,0,0,0,593,590,1,0,0,0,594,595,1,0,0,0,595,
		593,1,0,0,0,595,596,1,0,0,0,596,597,1,0,0,0,597,598,5,2,0,0,598,91,1,0,
		0,0,599,600,3,152,76,0,600,601,5,70,0,0,601,602,5,43,0,0,602,603,5,70,
		0,0,603,604,3,110,55,0,604,93,1,0,0,0,605,610,3,152,76,0,606,607,5,70,
		0,0,607,608,5,43,0,0,608,609,5,70,0,0,609,611,3,112,56,0,610,606,1,0,0,
		0,610,611,1,0,0,0,611,95,1,0,0,0,612,613,3,152,76,0,613,97,1,0,0,0,614,
		616,3,152,76,0,615,617,5,70,0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,618,
		1,0,0,0,618,619,5,38,0,0,619,620,5,70,0,0,620,625,3,64,32,0,621,622,5,
		70,0,0,622,623,5,43,0,0,623,624,5,70,0,0,624,626,3,110,55,0,625,621,1,
		0,0,0,625,626,1,0,0,0,626,99,1,0,0,0,627,628,5,37,0,0,628,629,3,114,57,
		0,629,101,1,0,0,0,630,633,3,104,52,0,631,633,3,106,53,0,632,630,1,0,0,
		0,632,631,1,0,0,0,633,103,1,0,0,0,634,636,3,152,76,0,635,637,5,70,0,0,
		636,635,1,0,0,0,636,637,1,0,0,0,637,638,1,0,0,0,638,639,5,38,0,0,639,640,
		5,70,0,0,640,647,3,64,32,0,641,643,5,70,0,0,642,641,1,0,0,0,642,643,1,
		0,0,0,643,644,1,0,0,0,644,645,5,43,0,0,645,646,5,70,0,0,646,648,3,110,
		55,0,647,642,1,0,0,0,647,648,1,0,0,0,648,105,1,0,0,0,649,651,3,152,76,
		0,650,652,5,70,0,0,651,650,1,0,0,0,651,652,1,0,0,0,652,653,1,0,0,0,653,
		654,5,38,0,0,654,655,5,43,0,0,655,656,5,70,0,0,656,657,3,110,55,0,657,
		107,1,0,0,0,658,659,3,152,76,0,659,660,5,70,0,0,660,661,5,43,0,0,661,662,
		5,70,0,0,662,663,3,110,55,0,663,109,1,0,0,0,664,665,6,55,-1,0,665,666,
		5,29,0,0,666,667,3,110,55,0,667,668,5,30,0,0,668,687,1,0,0,0,669,670,3,
		120,60,0,670,671,3,110,55,9,671,687,1,0,0,0,672,673,3,64,32,0,673,674,
		3,86,43,0,674,687,1,0,0,0,675,677,5,33,0,0,676,678,3,110,55,0,677,676,
		1,0,0,0,677,678,1,0,0,0,678,679,1,0,0,0,679,681,5,41,0,0,680,682,3,110,
		55,0,681,680,1,0,0,0,681,682,1,0,0,0,682,683,1,0,0,0,683,687,5,34,0,0,
		684,687,3,152,76,0,685,687,3,112,56,0,686,664,1,0,0,0,686,669,1,0,0,0,
		686,672,1,0,0,0,686,675,1,0,0,0,686,684,1,0,0,0,686,685,1,0,0,0,687,706,
		1,0,0,0,688,689,10,7,0,0,689,690,5,70,0,0,690,691,3,118,59,0,691,692,5,
		70,0,0,692,693,3,110,55,8,693,705,1,0,0,0,694,695,10,8,0,0,695,705,3,122,
		61,0,696,698,10,6,0,0,697,699,3,78,39,0,698,697,1,0,0,0,698,699,1,0,0,
		0,699,700,1,0,0,0,700,705,3,46,23,0,701,702,10,4,0,0,702,703,5,40,0,0,
		703,705,3,152,76,0,704,688,1,0,0,0,704,694,1,0,0,0,704,696,1,0,0,0,704,
		701,1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,111,1,
		0,0,0,708,706,1,0,0,0,709,712,3,142,71,0,710,712,3,140,70,0,711,709,1,
		0,0,0,711,710,1,0,0,0,712,113,1,0,0,0,713,714,3,110,55,0,714,115,1,0,0,
		0,715,716,3,110,55,0,716,117,1,0,0,0,717,722,3,124,62,0,718,722,3,128,
		64,0,719,722,3,134,67,0,720,722,3,136,68,0,721,717,1,0,0,0,721,718,1,0,
		0,0,721,719,1,0,0,0,721,720,1,0,0,0,722,119,1,0,0,0,723,727,3,126,63,0,
		724,727,3,130,65,0,725,727,3,138,69,0,726,723,1,0,0,0,726,724,1,0,0,0,
		726,725,1,0,0,0,727,121,1,0,0,0,728,729,3,132,66,0,729,123,1,0,0,0,730,
		731,7,0,0,0,731,125,1,0,0,0,732,733,7,1,0,0,733,127,1,0,0,0,734,735,7,
		2,0,0,735,129,1,0,0,0,736,737,5,18,0,0,737,131,1,0,0,0,738,739,5,61,0,
		0,739,133,1,0,0,0,740,741,7,3,0,0,741,135,1,0,0,0,742,754,5,54,0,0,743,
		754,5,55,0,0,744,754,5,57,0,0,745,754,5,58,0,0,746,748,5,32,0,0,747,746,
		1,0,0,0,747,748,1,0,0,0,748,749,1,0,0,0,749,750,5,32,0,0,750,754,5,32,
		0,0,751,754,5,59,0,0,752,754,5,60,0,0,753,742,1,0,0,0,753,743,1,0,0,0,
		753,744,1,0,0,0,753,745,1,0,0,0,753,747,1,0,0,0,753,751,1,0,0,0,753,752,
		1,0,0,0,754,137,1,0,0,0,755,756,5,56,0,0,756,139,1,0,0,0,757,758,7,4,0,
		0,758,141,1,0,0,0,759,762,3,162,81,0,760,762,3,160,80,0,761,759,1,0,0,
		0,761,760,1,0,0,0,762,143,1,0,0,0,763,768,3,152,76,0,764,765,5,40,0,0,
		765,767,3,152,76,0,766,764,1,0,0,0,767,770,1,0,0,0,768,766,1,0,0,0,768,
		769,1,0,0,0,769,145,1,0,0,0,770,768,1,0,0,0,771,774,3,148,74,0,772,774,
		3,150,75,0,773,771,1,0,0,0,773,772,1,0,0,0,774,147,1,0,0,0,775,777,3,144,
		72,0,776,778,5,70,0,0,777,776,1,0,0,0,777,778,1,0,0,0,778,788,1,0,0,0,
		779,781,5,69,0,0,780,782,5,70,0,0,781,780,1,0,0,0,782,783,1,0,0,0,783,
		781,1,0,0,0,783,784,1,0,0,0,784,785,1,0,0,0,785,787,3,144,72,0,786,779,
		1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,149,1,0,0,
		0,790,788,1,0,0,0,791,795,5,1,0,0,792,793,3,144,72,0,793,794,3,166,83,
		0,794,796,1,0,0,0,795,792,1,0,0,0,796,797,1,0,0,0,797,795,1,0,0,0,797,
		798,1,0,0,0,798,799,1,0,0,0,799,800,5,2,0,0,800,151,1,0,0,0,801,802,5,
		26,0,0,802,153,1,0,0,0,803,806,3,148,74,0,804,806,3,150,75,0,805,803,1,
		0,0,0,805,804,1,0,0,0,806,155,1,0,0,0,807,809,3,152,76,0,808,810,5,70,
		0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,820,1,0,0,0,811,813,5,69,0,0,812,
		814,5,70,0,0,813,812,1,0,0,0,814,815,1,0,0,0,815,813,1,0,0,0,815,816,1,
		0,0,0,816,817,1,0,0,0,817,819,3,152,76,0,818,811,1,0,0,0,819,822,1,0,0,
		0,820,818,1,0,0,0,820,821,1,0,0,0,821,157,1,0,0,0,822,820,1,0,0,0,823,
		827,5,1,0,0,824,825,3,152,76,0,825,826,3,166,83,0,826,828,1,0,0,0,827,
		824,1,0,0,0,828,829,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,831,1,
		0,0,0,831,832,5,2,0,0,832,159,1,0,0,0,833,834,5,28,0,0,834,161,1,0,0,0,
		835,836,7,5,0,0,836,163,1,0,0,0,837,839,5,70,0,0,838,837,1,0,0,0,839,842,
		1,0,0,0,840,838,1,0,0,0,840,841,1,0,0,0,841,843,1,0,0,0,842,840,1,0,0,
		0,843,844,5,3,0,0,844,845,5,71,0,0,845,165,1,0,0,0,846,848,5,70,0,0,847,
		846,1,0,0,0,848,851,1,0,0,0,849,847,1,0,0,0,849,850,1,0,0,0,850,853,1,
		0,0,0,851,849,1,0,0,0,852,854,5,3,0,0,853,852,1,0,0,0,853,854,1,0,0,0,
		854,856,1,0,0,0,855,857,5,71,0,0,856,855,1,0,0,0,857,858,1,0,0,0,858,856,
		1,0,0,0,858,859,1,0,0,0,859,167,1,0,0,0,860,862,5,70,0,0,861,860,1,0,0,
		0,862,863,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,867,1,0,0,0,865,
		867,3,166,83,0,866,861,1,0,0,0,866,865,1,0,0,0,867,169,1,0,0,0,99,171,
		176,178,184,186,206,208,212,216,220,225,230,241,254,264,269,282,291,296,
		300,305,321,327,333,337,344,349,355,361,370,377,381,391,400,409,415,418,
		423,434,436,443,452,457,461,468,475,479,482,489,499,506,514,520,527,535,
		542,552,561,567,573,583,595,610,616,625,632,636,642,647,651,677,681,686,
		698,704,706,711,721,726,747,753,761,768,773,777,783,788,797,805,809,815,
		820,829,840,849,853,858,863,866
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Maja.Compiler.Parser
